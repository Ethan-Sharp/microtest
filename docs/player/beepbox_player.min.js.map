{"version":3,"sources":["../../synth/SynthConfig.ts","../../node_modules/imperative-html/src/elements-base.ts","../../node_modules/imperative-html/src/elements-strict.ts","../../editor/ColorConfig.ts","../../editor/EditorConfig.ts","../../synth/FFT.ts","../../synth/Deque.ts","../../synth/synth.ts","../../player/main.ts"],"names":["Config","centerWave","wave","sum","i","length","average","cumulative","wavePrev","push","Float64Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","getDrumWave","index","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","samples","Float32Array","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","Error","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","pow","highIndex","min","retroWave","combinedAmplitude","lerped","log","LN2","amplitude","spectrumMax","radians","PI","cos","sin","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","dictionary","value","name","result","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","reverbRange","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentsPerChannelMin","instrumentsPerChannelMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipWaves","volume","pitchFilterMult","isSoft","filterCutoffMaxHz","filterCutoffMinHz","filterMax","filterMaxResonance","filterCutoffRange","filterResonanceRange","transitions","isSeamless","attackSeconds","releases","releaseTicks","slides","slideTicks","vibratos","type","delayParts","vibratoTypes","periodsSeconds","period","arpSpeedScale","intervals","spread","offset","sign","effectsNames","volumeRange","volumeLogScale","panCenter","panMax","detuneMin","detuneMax","songDetuneMin","songDetuneMax","chords","harmonizes","customInterval","arpeggiates","isCustomInterval","strumParts","maxChordSize","operatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","harmonicsControlPoints","harmonicsRendered","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthRange","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","modCount","pitchOctaves","maxScrollableOctaves","maxPitch","maximumTonesPerChannel","sineWaveLength","sineWaveMask","sineWave","generateSineWave","barEditorHeight","applyElementArgs","element","args","args_1","__values","args_1_1","next","done","arg","Node","appendChild","document","createTextNode","Array","isArray","Symbol","iterator","__spread","constructor","Object","Element","_d","e_2","_e","key","setAttribute","join","console","warn","tagName","_f","e_3","_g","styleKey","style","setProperty","removeAttribute","svgNS","HTML","_i","arguments","createRange","createContextualFragment","SVG","fragment","createDocumentFragment","svgParser","DOMParser","parseFromString","documentElement","firstChild","importNode","name_1","createElement","_c","split","name_2","createElementNS","test","snakeCaseName","replace","ColorConfig","[object Object]","this","colorLookup","clear","song","channel","getComputedStyle","_styleElement","getPropertyValue","trim","base","getChannelColor","regex","secondaryChannel","getComputed","exec","primaryChannel","secondaryNote","primaryNote","pitchChannelCount","pitchChannels","noiseChannelCount","noiseChannels","modChannels","has","get","pitchSecondaryChannelHue","pitchSecondaryChannelHueScale","pitchSecondaryChannelSat","pitchSecondaryChannelSatScale","pitchSecondaryChannelLum","pitchSecondaryChannelLumScale","pitchPrimaryChannelHue","pitchPrimaryChannelHueScale","pitchPrimaryChannelSat","pitchPrimaryChannelSatScale","pitchPrimaryChannelLum","pitchPrimaryChannelLumScale","pitchSecondaryNoteHue","pitchSecondaryNoteHueScale","pitchSecondaryNoteSat","pitchSecondaryNoteSatScale","pitchSecondaryNoteLum","pitchSecondaryNoteLumScale","pitchPrimaryNoteHue","pitchPrimaryNoteHueScale","pitchPrimaryNoteSat","pitchPrimaryNoteSatScale","pitchPrimaryNoteLum","pitchPrimaryNoteLumScale","newChannelColors","floor","set","noiseSecondaryChannelHue","noiseSecondaryChannelHueScale","noiseSecondaryChannelSat","noiseSecondaryChannelSatScale","noiseSecondaryChannelLum","noiseSecondaryChannelLumScale","noisePrimaryChannelHue","noisePrimaryChannelHueScale","noisePrimaryChannelSat","noisePrimaryChannelSatScale","noisePrimaryChannelLum","noisePrimaryChannelLumScale","noiseSecondaryNoteHue","noiseSecondaryNoteHueScale","noiseSecondaryNoteSat","noiseSecondaryNoteSatScale","noiseSecondaryNoteLum","noiseSecondaryNoteLumScale","noisePrimaryNoteHue","noisePrimaryNoteHueScale","noisePrimaryNoteSat","noisePrimaryNoteSatScale","noisePrimaryNoteLum","noisePrimaryNoteLumScale","modSecondaryChannelHue","modSecondaryChannelHueScale","modSecondaryChannelSat","modSecondaryChannelSatScale","modSecondaryChannelLum","modSecondaryChannelLumScale","modPrimaryChannelHue","modPrimaryChannelHueScale","modPrimaryChannelSat","modPrimaryChannelSatScale","modPrimaryChannelLum","modPrimaryChannelLumScale","modSecondaryNoteHue","modSecondaryNoteHueScale","modSecondaryNoteSat","modSecondaryNoteSatScale","modSecondaryNoteLum","modSecondaryNoteLumScale","modPrimaryNoteHue","modPrimaryNoteHueScale","modPrimaryNoteSat","modPrimaryNoteSatScale","modPrimaryNoteLum","modPrimaryNoteLumScale","textContent","themes","themeColor","querySelector","resetColors","Map","dark classic","dark competition","light classic","jummbox classic","forest","canyon","midnight","jummbox light","pageMargin","editorBackground","hoverPreview","playhead","primaryText","secondaryText","invertedText","textSelection","boxSelectionFill","loopAccent","linkAccent","uiWidgetBackground","uiWidgetFocus","pitchBackground","tonic","fifthNote","whitePianoKey","blackPianoKey","useColorFormula","trackEditorBgPitch","trackEditorBgPitchDim","trackEditorBgNoise","trackEditorBgNoiseDim","trackEditorBgMod","trackEditorBgModDim","multiplicativeModSlider","overwritingModSlider","indicatorPrimary","indicatorSecondary","select2OptGroup","inputBoxOutline","muteButtonNormal","muteButtonMod","modLabelPrimary","modLabelSecondaryText","modLabelPrimaryText","head","navigator","userAgent","EditorConfig","presetValue","categoryIndex","presetIndex","presetCategories","presets","program","category","preset","generalMidi","midiProgram","presetName","factor","countBits","n","isPowerOf2","round","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","customType","settings","transition","effects","chord","filterCutoffHz","filterResonance","filterEnvelope","interval","vibrato","isNoise","algorithm","feedbackType","feedbackAmplitude","feedbackEnvelope","operators","frequency","envelope","customChipWave","harmonics","midiSubharmonicOctaves","pulseWidth","pulseEnvelope","spectrum","drums","Deque","_capacity","_buffer","undefined","_mask","_offset","_count","_expandCapacity","popFront","popBack","oldBuffer","size","base64IntToCharCode","base64CharCodeToInt","BitFieldReader","source","_bits","_readIndex","charCodeAt","minValue","minBits","numBits","readLongTail","read","BitFieldWriter","_index","writeLongTail","write","other","buffer","ceil","makeNotePin","time","clamp","max","val","validateRange","Note","pitch","start","end","fadeout","pitches","pins","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestVolume","pin","newNote","concat","Pattern","notes","instrument","note","clone","Operator","reset","SpectrumWave","isNoiseChannel","_wave","_waveIsReady","isHarmonic","lowestOctave","waveLength","highestOctave","falloffRatio","pitchTweak","controlPointToOctave","point","value1","value2","octave1","octave2","HarmonicsWave","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","Instrument","isModChannel","chipWave","chipNoise","filterCutoff","vibratoDepth","vibratoSpeed","vibratoDelay","vibratoType","pan","panDelay","arpeggioSpeed","fastTwoNoteArp","tieNoteTransition","clicklessTransition","detune","LFOtime","nextLFOtime","arpTime","customChipWaveIntegral","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modStatuses","modInstruments","modSettings","mod","ModStatus","msNone","ModSetting","mstNone","spectrumWave","instrumentObject","getChord","getFilterCutoffOctaves","getFilterEnvelope","getDrumsetEnvelope","operatorArray","operator","useSlowerRhythm","indexOf","setTypeAndReset","oldTransitionNames","binary","sudden","smooth","transitionObject","findIndex","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","sustain sharp","sustain medium","sustain soft","decay sharp","legacyFilter","legacyEffectNames","drum","legacyWaveNames","triangle","square","pulse wide","pulse narrow","sawtooth","double saw","double pulse","spiky","plateau","legacyChorusNames","fifths","octaves","feedback","legacyEnvelopeNames","pluck 1","pluck 2","pluck 3","operatorObject","freq","frequencyFromPitch","drumsetIndexReferenceDelta","getCustomWave","_drumsetIndexToSpectrumOctave","Channel","octave","instruments","patterns","bars","muted","Song","string","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","mstMaxVols","mstSongVolume","mstTempo","mstReverb","mstNextBar","mstInsVolume","mstPan","mstFilterCut","mstFilterPeak","mstFMSlider1","mstFMSlider2","mstFMSlider3","mstFMSlider4","mstFMFeedback","mstPulseWidth","mstDetune","mstVibratoDepth","mstSongDetune","mstVibratoSpeed","mstVibratoDelay","mstArpeggioSpeed","mstPanDelay","mstResetArpeggio","mstMaxValue","mstNewNoteVols","getNewNoteVolume","isMod","modChannel","modInstrument","cap","realToModValue","tempo","getVolumeCap","getVolumeCapForSetting","modSetting","fromBase64String","initToDefault","setting","modChannelCount","andResetChannels","scale","loopStart","loopLength","reverb","beatsPerBar","barCount","patternsPerChannel","rhythm","instrumentsPerChannel","title","channelIndex","getChannelCount","pattern","bar","bits","_variant","_latestJummBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","o","spectrumBits","encodeBase64","harmonicsBits","neededBits","shapeBits","neededInstrumentBits","getChannelIsNoise","getChannelIsMod","instrumentIndex","modStatus","msForPitch","msForNoise","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","writePartDuration","writePinCount","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","splice","unshift","pop","allPitches","pitchIndex","pitchIter","writePitchInterval","stringLength","lengthBase64","digits","prototype","maxApplyArgs","slice","compressed","charIndex","fromJsonObject","JSON","parse","substring","variant","_latestBeepboxVersion","_oldestBeepboxVersion","_oldestJummBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","command","instrumentChannelIterator","instrumentIndexIterator","toSetOctaves","useSlowerArpSpeed","songNameLength","decodeURIComponent","window","localStorage","getItem","instrumentType","legacyWaves","legacyEffects","legacyEnvelopes","effect","originalValue","nextValue","channelNameLength","byteCount","markCustomWaveDirty","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","newPattern","newNotes","useOldShape","shape","pinObj","pinCount","readPinCount","initialVolume","bendCount","pitchBend","readLegacyPartDuration","readPartDuration","readPitchInterval","intervalIter","shift","isBackwards","restLength","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","toJsonObject","patternArray","noteArray","volumeCap","pointArray","useVol","tick","forMod","points","sequenceArray","l","octaveScrollBar","sequence","format","_format","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","oldScaleNames","romani :)","romani :(","enigma","scaleName","letter","charAt","toUpperCase","symbol","toLowerCase","C","D","E","F","G","A","B","#","♯","b","♭","importedPartsPerBeat","maxInstruments","maxPatterns","maxBars","channelObject","newPitchChannels","newNoiseChannels","newModChannels","patternObject","maxNoteCount","noteObject","k","startInterval","pointObject","lowestPitch","highestPitch","patternIndex","getPattern","Tone","chordSize","drumsetPitch","prevNote","nextNote","prevNotePitchIndex","nextNotePitchIndex","active","noteStart","noteEnd","noteLengthTicks","ticksSinceReleased","liveInputSamplesHeld","lastInterval","lastVolume","stereoVolume1","stereoVolume2","stereoOffset","stereoDelay","sample","phases","phaseDeltas","volumeStarts","volumeDeltas","volumeStart","volumeDelta","phaseDeltaScale","pulseWidthDelta","filter","filterScale","filterSample0","filterSample1","vibratoScale","intervalMult","intervalVolumeMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","Synth","samplesPerSecond","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","loopRepeatCount","wantToSkip","playheadInternal","beat","part","tickSampleCountdown","isPlayingSong","liveInputEndTime","tonePool","activeTones","tyingOver","activeModTones","releasedTones","liveInputTones","limit","stereoBufferIndex","samplesForNone","samplesForReverb","samplesForChorus","samplesForChorusReverb","chorusDelayLine","chorusDelayPos","chorusPhase","reverbDelayLine","reverbDelayPos","reverbFeedback0","reverbFeedback1","reverbFeedback2","reverbFeedback3","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","synthesize","deactivateAudio","setSong","getInstrumentSynthFunction","warmUp","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","currentPart","currentBar","instrumentIdx","getPatternInstrument","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","msForSong","setModValue","playing","remainder","samplesPerTick","getSamplesPerTick","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","modValueToReal","ended","totalSamples","foundMod","find","sort","a","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getSamplesPerBar","getTotalBars","useLoopCount","volumeEnd","nextVal","channelAdjust","forSong","isModActive","AudioContext","webkitAudioContext","sampleRate","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","activateAudio","warmUpSynthesizer","computeLatestModValues","snapToBar","freeAllTones","oldBar","outputBufferLength","playSong","channelCount","idx","bufferIndex","pause","stereoBufferLength","chorusAngle","chorusRange","chorusOffset0","chorusOffset1","chorusOffset2","chorusOffset3","chorusOffset4","chorusOffset5","useReverb","getModValue","samplesLeftInBuffer","runLength","determineCurrentActiveTones","count","tone","playTone","skipBar","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","determineLiveInputTones","getTransition","freeReleasedTone","shouldFadeOutFast","chorusTap0Index","chorusTap1Index","chorusTap2Index","chorusTap3Index","chorusTap4Index","chorusTap5Index","chorusTap0Delta","chorusTap1Delta","chorusTap2Delta","chorusTap3Delta","chorusTap4Delta","chorusTap5Delta","runEnd","bufferIndexL","bufferIndexR","sampleForNoneL","sampleForNoneR","sampleForReverbL","sampleForReverbR","sampleForChorusL","sampleForChorusR","sampleForChorusReverbL","sampleForChorusReverbR","combinedChorusL","combinedChorusR","chorusTap0Ratio","chorusTap1Ratio","chorusTap2Ratio","chorusTap3Ratio","chorusTap4Ratio","chorusTap5Ratio","chorusTap0A","chorusTap0B","chorusTap1A","chorusTap1B","chorusTap2A","chorusTap2B","chorusTap3A","chorusTap3B","chorusTap4A","chorusTap4B","chorusTap5A","chorusSampleL","chorusSampleR","reverbDelayPos1","reverbDelayPos2","reverbDelayPos3","reverbSample0","reverbSample1","reverbSample2","reverbSample3","reverbTemp0","reverbTemp1","reverbTemp2","reverbTemp3","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","Number","isInteger","atEnd","carryOver","toneCount","targetBar","nextPattern","currNote","currVolume","p","releaseTone","freeTone","remove","resetEffects","epsilon","pushBack","pushFront","toneIndex","toneList","newTone","modChannelIdx","prevNotes","nextNotes","fillCount","syncTones","peakBack","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","synthBuffer","computeTone","synthesizer","beats","customVolume","attack","synth","chordVolume","computeChordVolume","intervalScale","secondsPerPart","beatsPerPart","toneWasActive","treatAsSeamless","startPan","endPan","startPanDelay","endPanDelay","useStartPan","useEndPan","maxDelayStart","maxDelayEnd","delayEnd","stereoVolumeLEnd","stereoVolumeREnd","volumeReferencePitch","baseVolume","pitchDamping","resetPhases","partsSinceStart","intervalStart","intervalEnd","transitionVolumeStart","transitionVolumeEnd","chordVolumeStart","chordVolumeEnd","decayTimeStart","decayTimeEnd","ticksSoFar","startTicksSinceReleased","endTicksSinceReleased","startTick","endTick","toneTransition","expressionToVolumeMult","heldTicksStart","heldTicksEnd","heldPartsStart","heldPartsEnd","partsPerBar","endPinIndex","startPin","endPin","noteStartTick","pinStart","pinEnd","tickTimeStart","tickTimeEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","customVolumeTickStart","customVolumeTickEnd","transitionVolumeTickStart","transitionVolumeTickEnd","chordVolumeTickStart","chordVolumeTickEnd","intervalTickStart","intervalTickEnd","decayTimeTickStart","decayTimeTickEnd","maximumSlideTicks","slideRatioStartTick","slideRatioEndTick","intervalDiff","volumeDiff","decayTimeDiff","chordSizeDiff","sampleTime","lfoEffectStart","getLFOAmplitude","lfoEffectEnd","partsStart","partsEnd","useVibratoStart","useVibratoEnd","activeVibratoDelayMods","vibratoDelayStart","vibratoDelayEnd","MAX_VALUE","instrumentVolumeMult","instrumentVolumeToVolumeMult","pickMainInterval","cutoffOctavesModStart","cutoffOctavesModEnd","filterCutModStart","filterCutModEnd","filterCutoffHzStart","filterCutoffHzEnd","filterBaseStart","filterBaseEnd","filterMin","computeEnvelope","endFilter","filterVolumeStart","filterVolumeEnd","getFilterResonance","useFilterResonanceStart","useFilterResonanceEnd","filterResonanceEnd","sineVolumeBoostStart","sineVolumeBoostEnd","totalCarrierVolumeStart","totalCarrierVolumeEnd","arpeggioInterval","detuneStart","detuneEnd","associatedCarrierIndex","freqMult","startFreq","amplitudeStart","amplitudeEnd","amplitudeCurveStart","operatorAmplitudeCurve","amplitudeCurveEnd","startVal","endVal","endPitch","pitchVolumeStart","pitchVolumeEnd","operatorEnvelope","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","volumeMult","intervalOffset","settingsVolumeMultStart","settingsVolumeMultEnd","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulators","modulatorNumber","feedbackIndices","Function","chipSynth","harmonicsSynth","pulseWidthSynth","noiseSynth","spectrumSynth","drumsetSynth","modSynth","data","volumeScale","intervalA","intervalB","intervalSign","deltaRatio","phaseDeltaA","phaseDeltaB","phaseA","phaseB","filter1","filter2","filterScale1","filterScale2","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","prevWaveIntegralA","prevWaveIntegralB","delays","stereoVolumeL","stereoVolumeR","nextWaveIntegralA","nextWaveIntegralB","waveA","waveB","output","phaseDelta","phase","sawPhaseA","sawPhaseB","pulseWave","t","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","phaseRatio","getDrumsetWave","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","slope","instrumentVolume","expression","getBeatsPerMinute","beatsPerSecond","partsPerSecond","tickPerSecond","button","div","h1","input","svg","circle","rect","path","setTheme","animationRequest","prevHash","id","toString","pauseButtonDisplayed","zoomEnabled","timelineWidth","outVolumeHistoricTimer","outVolumeHistoricCap","titleText","editLink","target","copyLink","href","shareLink","fullscreenLink","draggingPlayhead","playButton","playButtonContainer","loopIcon","d","loopButton","width","height","viewBox","volumeIcon","fill","volumeSlider","step","zoomIcon","cx","cy","r","stroke-width","stroke","zoomButton","timeline","timelineContainer","visualizationContainer","outVolumeBarBg","pointer-events","x","y","outVolumeBar","stop1","stop","stop-color","stop2","stop3","gradient","linearGradient","gradientUnits","defs","volumeBarContainer","preserveAspectRatio","hashUpdatedExternally","myHash","location","hash","parameter","equalsIndex","paramName","snapToStart","renderLoopIcon","renderTimeline","animate","requestAnimationFrame","onTogglePlay","renderPlayhead","volumeUpdate","renderPlayButton","useOutVolumeCap","historicOutCap","cancelAnimationFrame","play","setItem","onTimelineMouseMove","event","preventDefault","onTimelineCursorMove","clientX","pageX","onTimelineTouchMove","touches","mouseX","boundingRect","getBoundingClientRect","left","right","onTimelineCursorUp","setSynthVolume","pos","scrollLeft","innerHTML","timelineHeight","windowOctaves","windowPitchCount","semitoneHeight","targetBeatWidth","targetSemitoneHeight","barWidth","partWidth","wavePitchHeight","drumPitchHeight","color","opacity","pitchHeight","configuredOctaveScroll","octavesToMove","newScrollableOctaves","newCenter","distanceFromCenter","offsetY","offsetX","drawNote","noteElement","radius","classList","add","innerText","renderZoomIcon","body","top","self","display","addEventListener","keyCode","prevBar","nextBar","nav","clipboard","writeText","catch","prompt","textField","select","succeeded","execCommand","share","url"],"mappings":"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I,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAA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","sourcesContent":["/*!\r\nCopyright (C) 2020 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\n//namespace beepbox {\r\nexport interface Dictionary<T> {\r\n\t[K: string]: T;\r\n}\r\n\r\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\r\n\tdictionary: Dictionary<T>;\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tcustom,\r\n\tsteady,\r\n\tpunch,\r\n\tflare,\r\n\ttwang,\r\n\tswell,\r\n\ttremolo,\r\n\ttremolo2,\r\n\tdecay,\r\n}\r\n\r\nexport const enum InstrumentType {\r\n\tchip = 0,\r\n\tfm = 1,\r\n\tnoise = 2,\r\n\tspectrum = 3,\r\n\tdrumset = 4,\r\n\tharmonics = 5,\r\n\tpwm = 6,\r\n\tcustomChipWave = 7,\r\n\tmod = 8,\r\n\tlength,\r\n}\r\n\r\nexport interface BeepBoxOption {\r\n\treadonly index: number;\r\n\treadonly name: string;\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n\treadonly flags: ReadonlyArray<boolean>;\r\n\treadonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n\treadonly isWhiteKey: boolean;\r\n\treadonly basePitch: number;\r\n}\r\n\r\nexport interface Rhythm extends BeepBoxOption {\r\n\treadonly stepsPerBeat: number;\r\n\t//readonly ticksPerArpeggio: number;\r\n\t//readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>>;\r\n\treadonly roundUpThresholds: number[] | null;\r\n}\r\n\r\nexport interface ChipWave extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly samples: Float64Array;\r\n}\r\n\r\nexport interface ChipNoise extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly basePitch: number;\r\n\treadonly pitchFilterMult: number;\r\n\treadonly isSoft: boolean;\r\n\tsamples: Float32Array | null;\r\n}\r\n\r\nexport interface Transition extends BeepBoxOption {\r\n\treadonly isSeamless: boolean;\r\n\treadonly attackSeconds: number;\r\n\treadonly releases: boolean;\r\n\treadonly releaseTicks: number;\r\n\treadonly slides: boolean;\r\n\treadonly slideTicks: number;\r\n}\r\n\r\nexport interface Vibrato extends BeepBoxOption {\r\n\treadonly amplitude: number;\r\n\treadonly type: number;\r\n\treadonly delayParts: number;\r\n}\r\n\r\nexport interface VibratoType extends BeepBoxOption {\r\n\treadonly periodsSeconds: number[];\r\n\treadonly period: number;\r\n}\r\n\r\nexport interface Interval extends BeepBoxOption {\r\n\treadonly spread: number;\r\n\treadonly offset: number;\r\n\treadonly volume: number;\r\n\treadonly sign: number;\r\n}\r\n\r\nexport interface Chord extends BeepBoxOption {\r\n\treadonly harmonizes: boolean;\r\n\treadonly customInterval: boolean;\r\n\treadonly arpeggiates: boolean;\r\n\treadonly isCustomInterval: boolean;\r\n\treadonly strumParts: number;\r\n}\r\n\r\nexport interface Algorithm extends BeepBoxOption {\r\n\treadonly carrierCount: number;\r\n\treadonly associatedCarrier: ReadonlyArray<number>;\r\n\treadonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface OperatorFrequency extends BeepBoxOption {\r\n\treadonly mult: number;\r\n\treadonly hzOffset: number;\r\n\treadonly amplitudeSign: number;\r\n}\r\n\r\nexport interface Envelope extends BeepBoxOption {\r\n\treadonly type: EnvelopeType;\r\n\treadonly speed: number;\r\n}\r\n\r\nexport interface Feedback extends BeepBoxOption {\r\n\treadonly indices: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport class Config {\r\n\t// Params for post-processing compressor\r\n\tpublic static thresholdVal: number = -10;\r\n\tpublic static kneeVal: number = 40;\r\n\tpublic static ratioVal: number = 12;\r\n\tpublic static attackVal: number = 0;\r\n\tpublic static releaseVal: number = 0.25;\r\n\r\n\tpublic static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\r\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\r\n\t\t{ name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\r\n\t\t{ name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\r\n\t\t{ name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\r\n\t\t{ name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\r\n\t\t{ name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\r\n\t\t{ name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\r\n\t\t{ name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\r\n\t\t{ name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\r\n\t\t{ name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\r\n\t\t{ name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\r\n\t\t{ name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\r\n\t\t{ name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\r\n\t\t{ name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\r\n\t\t{ name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\r\n\t\t{ name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\r\n\t\t{ name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\r\n\t\t{ name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\r\n\t\t{ name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\r\n\t\t{ name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\r\n\t\t{ name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\r\n\r\n\r\n\t]);\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{ name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{ name: \"C♯\", isWhiteKey: false, basePitch: 13 },\r\n\t\t{ name: \"D\", isWhiteKey: true, basePitch: 14 },\r\n\t\t{ name: \"D♯\", isWhiteKey: false, basePitch: 15 },\r\n\t\t{ name: \"E\", isWhiteKey: true, basePitch: 16 },\r\n\t\t{ name: \"F\", isWhiteKey: true, basePitch: 17 },\r\n\t\t{ name: \"F♯\", isWhiteKey: false, basePitch: 18 },\r\n\t\t{ name: \"G\", isWhiteKey: true, basePitch: 19 },\r\n\t\t{ name: \"G♯\", isWhiteKey: false, basePitch: 20 },\r\n\t\t{ name: \"A\", isWhiteKey: true, basePitch: 21 },\r\n\t\t{ name: \"A♯\", isWhiteKey: false, basePitch: 22 },\r\n\t\t{ name: \"B\", isWhiteKey: true, basePitch: 23 },\r\n\t]);\r\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\r\n\tpublic static readonly tempoMin: number = 30;\r\n\tpublic static readonly tempoMax: number = 320;\r\n\tpublic static readonly reverbRange: number = 32;\r\n\tpublic static readonly beatsPerBarMin: number = 3;\r\n\tpublic static readonly beatsPerBarMax: number = 16;\r\n\tpublic static readonly barCountMin: number = 1;\r\n\tpublic static readonly barCountMax: number = 256;\r\n\tpublic static readonly instrumentsPerChannelMin: number = 1;\r\n\tpublic static readonly instrumentsPerChannelMax: number = 10;\r\n\tpublic static readonly partsPerBeat: number = 24;\r\n\tpublic static readonly ticksPerPart: number = 2;\r\n\tpublic static readonly ticksPerArpeggio: number = 3;\r\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7] ];\r\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\r\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\r\n\t\t{ name: \"÷6\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷8\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t]);\r\n\r\n\tpublic static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"custom chip\", \"mod\"];\r\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, true];\r\n\tpublic static readonly chipWaves: DictionaryArray<ChipWave> = toNameMap([\r\n\t\t{ name: \"rounded\", volume: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\r\n\t\t{ name: \"triangle\", volume: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\r\n\t\t{ name: \"square\", volume: 0.5, samples: centerWave([1.0, -1.0]) },\r\n\t\t{ name: \"1/4 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"1/8 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"sawtooth\", volume: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n\t\t{ name: \"double saw\", volume: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n\t\t{ name: \"double pulse\", volume: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"spiky\", volume: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\r\n\t\t{ name: \"sine\", volume: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\r\n\t\t{ name: \"flute\", volume: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\r\n\t\t{ name: \"harp\", volume: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\r\n\t\t{ name: \"sharp clarinet\", volume: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\r\n\t\t{ name: \"soft clarinet\", volume: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n\t\t{ name: \"alto sax\", volume: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\r\n\t\t{ name: \"bassoon\", volume: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\r\n\t\t{ name: \"trumpet\", volume: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\r\n\t\t{ name: \"electric guitar\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\r\n\t\t{ name: \"organ\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\r\n\t\t{ name: \"pan flute\", volume: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\r\n\t\t{ name: \"glitch\", volume: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n\t]);\r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\r\n\t\t{ name: \"retro\", volume: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"white\", volume: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\r\n\t\t{ name: \"clang\", volume: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"buzz\", volume: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"hollow\", volume: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\r\n\t\t{ name: \"shine\", volume: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"deep\", volume: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\r\n\t\t{ name: \"cutter\", volume: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"metallic\", volume: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t]);\r\n\tpublic static readonly filterCutoffMaxHz: number = 8000; // This is carefully calculated to correspond to no change when filtering at 48000 samples per second.\r\n\tpublic static readonly filterCutoffMinHz: number = 1;\r\n\tpublic static readonly filterMax: number = 0.95;\r\n\tpublic static readonly filterMaxResonance: number = 0.95;\r\n\tpublic static readonly filterCutoffRange: number = 11;\r\n\tpublic static readonly filterResonanceRange: number = 8;\r\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\r\n\t\t{ name: \"seamless\", isSeamless: true, attackSeconds: 0.0, releases: false, releaseTicks: 1, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard\", isSeamless: false, attackSeconds: 0.0, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft\", isSeamless: false, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"slide\", isSeamless: true, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: true, slideTicks: 3 },\r\n\t\t{ name: \"cross fade\", isSeamless: false, attackSeconds: 0.04, releases: true, releaseTicks: 6, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard fade\", isSeamless: false, attackSeconds: 0.0, releases: true, releaseTicks: 48, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"medium fade\", isSeamless: false, attackSeconds: 0.0125, releases: true, releaseTicks: 72, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft fade\", isSeamless: false, attackSeconds: 0.06, releases: true, releaseTicks: 96, slides: false, slideTicks: 6 },\r\n\t]);\r\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\r\n\t\t{ name: \"none\", amplitude: 0.0, type: 0, delayParts: 0 },\r\n\t\t{ name: \"light\", amplitude: 0.15, type: 0, delayParts: 0 },\r\n\t\t{ name: \"delayed\", amplitude: 0.3, type: 0, delayParts: 18 },\r\n\t\t{ name: \"heavy\", amplitude: 0.45, type: 0, delayParts: 0 },\r\n\t\t{ name: \"shaky\", amplitude: 0.1, type: 1, delayParts: 0 },\r\n\t]);\r\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\r\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\r\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\r\n\t]);\r\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\r\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\r\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\r\n\tpublic static readonly intervals: DictionaryArray<Interval> = toNameMap([\r\n\t\t{ name: \"union\", spread: 0.0, offset: 0.0, volume: 0.7, sign: 1.0 },\r\n\t\t{ name: \"shimmer\", spread: 0.018, offset: 0.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"hum\", spread: 0.045, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"honky tonk\", spread: 0.09, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"dissonant\", spread: 0.25, offset: 0.0, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"fifth\", spread: 3.5, offset: 3.5, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"octave\", spread: 6.0, offset: 6.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"bowed\", spread: 0.02, offset: 0.0, volume: 1.0, sign: -1.0 },\r\n\t\t{ name: \"piano\", spread: 0.01, offset: 0.0, volume: 1.0, sign: 0.7 },\r\n\t]);\r\n\tpublic static readonly effectsNames: ReadonlyArray<string> = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\r\n\tpublic static readonly volumeRange: number = 50;\r\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\r\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\r\n\tpublic static readonly volumeLogScale: number = 0.1428;\r\n\tpublic static readonly panCenter: number = 50;\r\n\tpublic static readonly panMax: number = Config.panCenter * 2;\r\n\tpublic static readonly detuneMin: number = -50;\r\n\tpublic static readonly detuneMax: number = 50;\r\n\tpublic static readonly songDetuneMin: number = -250;\r\n\tpublic static readonly songDetuneMax: number = 250;\r\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\r\n\t\t{ name: \"harmony\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"strum\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 1 },\r\n\t\t{ name: \"arpeggio\", harmonizes: false, customInterval: false, arpeggiates: true, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"custom interval\", harmonizes: true, customInterval: true, arpeggiates: true, isCustomInterval: true, strumParts: 0 },\r\n\t]);\r\n\tpublic static readonly maxChordSize: number = 9; // Pandora's box...\r\n\tpublic static readonly operatorCount: number = 4;\r\n\tpublic static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\r\n\t\t{ name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\r\n\t\t{ name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\r\n\t\t{ name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\r\n\t\t{ name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\r\n\t\t{ name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\r\n\t\t{ name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\r\n\t\t{ name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\r\n\t\t{ name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\r\n\t\t{ name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\r\n\t\t{ name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\r\n\t\t{ name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\r\n\t]);\r\n\tpublic static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091];\r\n\tpublic static readonly operatorAmplitudeMax: number = 15;\r\n\tpublic static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\r\n\t\t{ name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\r\n\t\t{ name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\r\n\t\t{ name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t]);\r\n\tpublic static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\r\n\t\t{ name: \"custom\", type: EnvelopeType.custom, speed: 0.0 },\r\n\t\t{ name: \"steady\", type: EnvelopeType.steady, speed: 0.0 },\r\n\t\t{ name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\r\n\t\t{ name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\r\n\t\t{ name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\r\n\t\t{ name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\r\n\t\t{ name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\r\n\t\t{ name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\r\n\t\t{ name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\r\n\t\t{ name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\r\n\t\t{ name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\r\n\t\t{ name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\r\n\t\t{ name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\r\n\t\t{ name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\r\n\t\t{ name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\r\n\t\t{ name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\r\n\t\t{ name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\r\n\t\t{ name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\r\n\t\t{ name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\r\n\t\t{ name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\r\n\t\t{ name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\r\n\t]);\r\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\r\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\r\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\r\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\r\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\r\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\r\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\r\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\r\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\r\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\r\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\r\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\r\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\r\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\r\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\r\n\t\t{ name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\r\n\t]);\r\n\tpublic static readonly chipNoiseLength: number = 1 << 15; // 32768\r\n\tpublic static readonly spectrumBasePitch: number = 24;\r\n\tpublic static readonly spectrumControlPoints: number = 30;\r\n\tpublic static readonly spectrumControlPointsPerOctave: number = 7;\r\n\tpublic static readonly spectrumControlPointBits: number = 3;\r\n\tpublic static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\r\n\tpublic static readonly harmonicsControlPoints: number = 28;\r\n\tpublic static readonly harmonicsRendered: number = 64;\r\n\tpublic static readonly harmonicsControlPointBits: number = 3;\r\n\tpublic static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\r\n\tpublic static readonly harmonicsWavelength: number = 1 << 11; // 2048\r\n\tpublic static readonly pulseWidthRange: number = 50;\r\n\tpublic static readonly pitchChannelCountMin: number = 1;\r\n\tpublic static readonly pitchChannelCountMax: number = 40;\r\n\tpublic static readonly noiseChannelCountMin: number = 0;\r\n\tpublic static readonly noiseChannelCountMax: number = 8;\r\n\tpublic static readonly modChannelCountMin: number = 0;\r\n\tpublic static readonly modChannelCountMax: number = 8;\r\n\tpublic static readonly noiseInterval: number = 6;\r\n\tpublic static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\r\n\tpublic static readonly drumCount: number = 12;\r\n\tpublic static readonly modCount: number = 6;\r\n\tpublic static readonly pitchOctaves: number = 8;\r\n\tpublic static readonly maxScrollableOctaves: number = 5; // Largest number possible with any config setting\r\n\tpublic static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\r\n\tpublic static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\r\n\tpublic static readonly sineWaveLength: number = 1 << 8; // 256\r\n\tpublic static readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n\tpublic static readonly sineWave: Float64Array = generateSineWave();\r\n\r\n\t// Height of the small editor column for inserting/deleting rows, in pixels.\r\n\tpublic static readonly barEditorHeight: number = 10;\r\n\r\n}\r\n\r\nfunction centerWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = wave[i] - average;\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\nfunction centerAndNormalizeWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tlet magn: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t\tmagn += Math.abs(wave[i]);\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\tconst magnAvg: number = magn / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = (wave[i] - average) / (magnAvg);\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\n\r\n// The function arguments will be defined in FFT.ts, but I want\r\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\r\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\r\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\r\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\r\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null = null, scaleElementsByFactor: Function | null = null): Float32Array {\r\n\tlet wave: Float32Array | null = Config.chipNoises[index].samples;\r\n\tif (wave == null) {\r\n\t\twave = new Float32Array(Config.chipNoiseLength + 1);\r\n\t\tConfig.chipNoises[index].samples = wave;\r\n\r\n\t\tif (index == 0) {\r\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 1) {\r\n\t\t\t// White noise is just random values for each sample.\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t}\r\n\t\t} else if (index == 2) {\r\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 3) {\r\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 4) {\r\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\tdrawNoiseSpectrum(wave, 10, 11, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 11, 14, .6578, .6578, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 5) {\r\n\t\t\t// \"Shine\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 6) {\r\n\t\t\t// \"Deep\" drums from modbox!\r\n\t\t\tdrawNoiseSpectrum(wave, 1, 10, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 20, 14, -2, -2, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 7) {\r\n\t\t\t// \"Cutter\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1);\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 8) {\r\n\t\t\t// \"Metallic\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < 32768; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 + 0.5;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t}\r\n\r\n\t\twave[Config.chipNoiseLength] = wave[0];\r\n\t}\r\n\r\n\treturn wave;\r\n}\r\n\r\nexport function drawNoiseSpectrum(wave: Float32Array, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\r\n\tconst referenceOctave: number = 11;\r\n\tconst referenceIndex: number = 1 << referenceOctave;\r\n\tconst lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n\tconst highIndex: number = Math.min(Config.chipNoiseLength >> 1, Math.pow(2, highOctave) | 0);\r\n\tconst retroWave: Float32Array = getDrumWave(0);\r\n\tlet combinedAmplitude: number = 0.0;\r\n\tfor (let i: number = lowIndex; i < highIndex; i++) {\r\n\r\n\t\tlet lerped: number = lowPower + (highPower - lowPower) * (Math.log(i) / Math.LN2 - lowOctave) / (highOctave - lowOctave);\r\n\t\t//let amplitude: number = Math.pow(2, lerped);\r\n\t\t//let amplitude: number = Math.pow((lerped + 5) / 7, 4);\r\n\t\tlet amplitude: number = Math.pow(2, (lerped - 1) * Config.spectrumMax + 1) * lerped;\r\n\r\n\t\tamplitude *= Math.pow(i / referenceIndex, overallSlope);\r\n\r\n\t\tcombinedAmplitude += amplitude;\r\n\r\n\t\t// Add two different sources of psuedo-randomness to the noise\r\n\t\t// (individually they aren't random enough) but in a deterministic\r\n\t\t// way so that live spectrum editing doesn't result in audible pops.\r\n\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the \r\n\t\t// LFSR retro wave (effectively random), and also rotate the phase\r\n\t\t// of each sine wave based on the golden angle to disrupt the symmetry.\r\n\t\tamplitude *= retroWave[i];\r\n\t\tconst radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\r\n\r\n\t\twave[i] = Math.cos(radians) * amplitude;\r\n\t\twave[Config.chipNoiseLength - i] = Math.sin(radians) * amplitude;\r\n\t}\r\n\r\n\treturn combinedAmplitude;\r\n}\r\n\r\nfunction generateSineWave(): Float64Array {\r\n\tconst wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n\tfor (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n\t\twave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n\t}\r\n\treturn wave;\r\n}\r\n\r\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\r\n\tlet arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\r\n\tif (arpeggioPattern != null) {\r\n\t\tif (pitchCount == 2 && useFastTwoNoteArp == false) {\r\n\t\t\tarpeggioPattern = [0, 0, 1, 1];\r\n\t\t}\r\n\t\treturn arpeggioPattern[arpeggio % arpeggioPattern.length];\r\n\t} else {\r\n\t\treturn arpeggio % pitchCount;\r\n\t}\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n\tconst dictionary: Dictionary<T> = {};\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tconst value: any = array[i];\r\n\t\tvalue.index = i;\r\n\t\tdictionary[value.name] = <T>value;\r\n\t}\r\n\tconst result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\r\n\tresult.dictionary = dictionary;\r\n\treturn result;\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nexport function applyElementArgs<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, args: Array<any>): T {\n\tfor (const arg of args) {\n\t\tif (arg instanceof Node) {\n\t\t\telement.appendChild(arg);\n\t\t} else if (typeof arg === \"string\") {\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t} else if (typeof arg === \"function\") {\n\t\t\tapplyElementArgs(element, [arg()]);\n\t\t} else if (Array.isArray(arg)) {\n\t\t\tapplyElementArgs(element, arg);\n\t\t} else if (arg && typeof Symbol !== \"undefined\" && typeof arg[Symbol.iterator] === \"function\") {\n\t\t\tapplyElementArgs(element, [...arg]);\n\t\t} else if (arg && arg.constructor === Object && element instanceof Element) {\n\t\t\t// If the argument is a literal {} Object\n\t\t\tfor (const key of Object.keys(arg)) {\n\t\t\t\tconst value = arg[key];\n\t\t\t\t/*if (key === \"classList\") {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.classList.add(...value.split(\" \"));\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.classList.add(...value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid classList value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else*/ if (key === \"class\" /* || key === \"className\" */) {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.setAttribute(\"class\", value);\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.setAttribute(\"class\", [...value].join(\" \"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid \" + key + \" value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else if (key === \"style\") {\n\t\t\t\t\tif (value && value.constructor === Object) {\n\t\t\t\t\t\tfor (const styleKey of Object.keys(value)) {\n\t\t\t\t\t\t\tif (styleKey in (<HTMLElement | SVGElement>element).style) {\n\t\t\t\t\t\t\t\t// In practice, camelCase and kebab-case properties both work as properties on CSSStyleDeclaration objects.\n\t\t\t\t\t\t\t\t(<any> element).style[styleKey] = value[styleKey];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// CSS variables start with -- and must be set with setProperty.\n\t\t\t\t\t\t\t\t(<HTMLElement | SVGElement>element).style.setProperty(styleKey, value[styleKey]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\t// If value is a callback, set as a property instead trying to coerce to string.\n\t\t\t\t\t(<any>element)[key] = value;\n\t\t\t\t} else if (typeof(value) === \"boolean\") {\n\t\t\t\t\t// If value is boolean, set attribute if true, remove if false.\n\t\t\t\t\tif (value) element.setAttribute(key, \"\");\n\t\t\t\t\telse element.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\t// Default to setting attribute, as if writing html directly.\n\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Just convert unrecognized objects to text and append them.\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t}\n\t}\n\treturn element;\n}\n\nexport const svgNS: string = \"http://www.w3.org/2000/svg\";\n\nexport function parseHTML(...args: Array<any>): DocumentFragment {\n\treturn document.createRange().createContextualFragment(args.join());\n}\n\n//let svgParser: SVGSVGElement | null = null;\nexport function parseSVG(...args: Array<any>): DocumentFragment {\n\tconst fragment: DocumentFragment = document.createDocumentFragment();\n\t\n\t// Internet Explorer doesn't support the first method here, so I commented it out and used a slightly more complex one involving DOMParser below.\n\t/*\n\tif (svgParser === null) svgParser = <SVGSVGElement>document.createElementNS(svgNS, \"svg\");\n\tsvgParser.innerHTML = args.join();\n\twhile (svgParser.firstChild !== null) fragment.appendChild(svgParser.firstChild);\n\t*/\n\tconst svgParser: Element = new DOMParser().parseFromString(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + args.join() + \"</svg>\", \"image/svg+xml\").documentElement;\n\twhile (svgParser.firstChild !== null) {\n\t\tdocument.importNode(svgParser.firstChild, true);\n\t\tfragment.appendChild(svgParser.firstChild);\n\t}\n\t\n\treturn fragment;\n}\n\nexport function replaceScriptWith(...args: Array<any>): void {\n\tlet currentScript: HTMLScriptElement | SVGScriptElement | null = document.currentScript;\n\tif (currentScript == null) { // double-equals to intentionally include undefined in Internet Explorer.\n\t\t\n\t\t// Internet Explorer doens't support currentScript, try this method instead:\n\t\tif (document.readyState === \"loading\") {\n\t\t\tconst scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\"script\");\n\t\t\tcurrentScript = scripts[scripts.length - 1];\n\t\t}\n\t\t\n\t\tif (currentScript == null) {\n\t\t\tconsole.warn(\"Couldn't replace script because no script is currently being parsed and executed, maybe this is happening in a callback function or event handler instead?\");\n\t\t\treturn;\n\t\t}\n\t}\n\tif (currentScript.parentNode === null) {\n\t\tconsole.warn(\"Couldn't replace script element because it is not attached to a parent anymore, did you try to replace the same script more than once?\");\n\t\treturn;\n\t}\n\tcurrentScript.parentNode.replaceChild(applyElementArgs(document.createDocumentFragment(), args), currentScript);\n}\n\nexport function applyToElement<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, ...args: Array<any>): T {\n\tif (!(element instanceof Element || element instanceof DocumentFragment)) {\n\t\tconsole.warn(\"Couldn't apply to provided argument because it's not an element or DocumentFragment.\");\n\t\treturn element;\n\t}\n\treturn applyElementArgs(element, args);\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\n\nimport {applyElementArgs, svgNS, parseHTML, parseSVG, replaceScriptWith, applyToElement} from \"./elements-base\";\nexport {replaceScriptWith, applyToElement};\n\ninterface HTMLElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => HTMLElement;\n\ta(...args: Array<any>): HTMLAnchorElement;\n\tabbr(...args: Array<any>): HTMLElement;\n\taddress(...args: Array<any>): HTMLElement;\n\tarea(...args: Array<any>): HTMLAreaElement;\n\tarticle(...args: Array<any>): HTMLElement;\n\taside(...args: Array<any>): HTMLElement;\n\taudio(...args: Array<any>): HTMLAudioElement;\n\tb(...args: Array<any>): HTMLElement;\n\tbase(...args: Array<any>): HTMLBaseElement;\n\tbdi(...args: Array<any>): HTMLElement;\n\tbdo(...args: Array<any>): HTMLElement;\n\tblockquote(...args: Array<any>): HTMLQuoteElement;\n\tbr(...args: Array<any>): HTMLBRElement;\n\tbutton(...args: Array<any>): HTMLButtonElement;\n\tcanvas(...args: Array<any>): HTMLCanvasElement;\n\tcaption(...args: Array<any>): HTMLTableCaptionElement;\n\tcite(...args: Array<any>): HTMLElement;\n\tcode(...args: Array<any>): HTMLElement;\n\tcol(...args: Array<any>): HTMLTableColElement;\n\tcolgroup(...args: Array<any>): HTMLTableColElement;\n\tdatalist(...args: Array<any>): HTMLDataListElement;\n\tdd(...args: Array<any>): HTMLElement;\n\tdel(...args: Array<any>): HTMLModElement;\n\tdetails(...args: Array<any>): HTMLDetailsElement;\n\tdfn(...args: Array<any>): HTMLElement;\n\tdialog(...args: Array<any>): HTMLDialogElement;\n\tdiv(...args: Array<any>): HTMLDivElement;\n\tdl(...args: Array<any>): HTMLDListElement;\n\tdt(...args: Array<any>): HTMLElement;\n\tem(...args: Array<any>): HTMLElement;\n\tembed(...args: Array<any>): HTMLEmbedElement;\n\tfieldset(...args: Array<any>): HTMLFieldSetElement;\n\tfigcaption(...args: Array<any>): HTMLElement;\n\tfigure(...args: Array<any>): HTMLElement;\n\tfooter(...args: Array<any>): HTMLElement;\n\tform(...args: Array<any>): HTMLFormElement;\n\th1(...args: Array<any>): HTMLHeadingElement;\n\th2(...args: Array<any>): HTMLHeadingElement;\n\th3(...args: Array<any>): HTMLHeadingElement;\n\th4(...args: Array<any>): HTMLHeadingElement;\n\th5(...args: Array<any>): HTMLHeadingElement;\n\th6(...args: Array<any>): HTMLHeadingElement;\n\theader(...args: Array<any>): HTMLElement;\n\thr(...args: Array<any>): HTMLHRElement;\n\ti(...args: Array<any>): HTMLElement;\n\tiframe(...args: Array<any>): HTMLIFrameElement;\n\timg(...args: Array<any>): HTMLImageElement;\n\tinput(...args: Array<any>): HTMLInputElement;\n\tins(...args: Array<any>): HTMLModElement;\n\tkbd(...args: Array<any>): HTMLElement;\n\tlabel(...args: Array<any>): HTMLLabelElement;\n\tlegend(...args: Array<any>): HTMLLegendElement;\n\tli(...args: Array<any>): HTMLLIElement;\n\tlink(...args: Array<any>): HTMLLinkElement;\n\tmain(...args: Array<any>): HTMLElement;\n\tmap(...args: Array<any>): HTMLMapElement;\n\tmark(...args: Array<any>): HTMLElement;\n\tmenu(...args: Array<any>): HTMLMenuElement;\n\tmenuitem(...args: Array<any>): HTMLUnknownElement;\n\tmeta(...args: Array<any>): HTMLMetaElement;\n\tmeter(...args: Array<any>): HTMLMeterElement;\n\tnav(...args: Array<any>): HTMLElement;\n\tnoscript(...args: Array<any>): HTMLElement;\n\tobject(...args: Array<any>): HTMLObjectElement;\n\tol(...args: Array<any>): HTMLOListElement;\n\toptgroup(...args: Array<any>): HTMLOptGroupElement;\n\toption(...args: Array<any>): HTMLOptionElement;\n\toutput(...args: Array<any>): HTMLOutputElement;\n\tp(...args: Array<any>): HTMLParagraphElement;\n\tparam(...args: Array<any>): HTMLParamElement;\n\tpicture(...args: Array<any>): HTMLPictureElement;\n\tpre(...args: Array<any>): HTMLPreElement;\n\tprogress(...args: Array<any>): HTMLProgressElement;\n\tq(...args: Array<any>): HTMLQuoteElement;\n\trp(...args: Array<any>): HTMLElement;\n\trt(...args: Array<any>): HTMLElement;\n\truby(...args: Array<any>): HTMLElement;\n\ts(...args: Array<any>): HTMLElement;\n\tsamp(...args: Array<any>): HTMLElement;\n\tscript(...args: Array<any>): HTMLScriptElement;\n\tsection(...args: Array<any>): HTMLElement;\n\tselect(...args: Array<any>): HTMLSelectElement;\n\tsmall(...args: Array<any>): HTMLElement;\n\tsource(...args: Array<any>): HTMLSourceElement;\n\tspan(...args: Array<any>): HTMLSpanElement;\n\tstrong(...args: Array<any>): HTMLElement;\n\tstyle(...args: Array<any>): HTMLStyleElement;\n\tsub(...args: Array<any>): HTMLElement;\n\tsummary(...args: Array<any>): HTMLElement;\n\tsup(...args: Array<any>): HTMLElement;\n\ttable(...args: Array<any>): HTMLTableElement;\n\ttbody(...args: Array<any>): HTMLTableSectionElement;\n\ttd(...args: Array<any>): HTMLTableCellElement;\n\ttemplate(...args: Array<any>): HTMLTemplateElement;\n\ttextarea(...args: Array<any>): HTMLTextAreaElement;\n\ttfoot(...args: Array<any>): HTMLTableSectionElement;\n\tth(...args: Array<any>): HTMLTableCellElement;\n\tthead(...args: Array<any>): HTMLTableSectionElement;\n\ttime(...args: Array<any>): HTMLTimeElement;\n\ttitle(...args: Array<any>): HTMLTitleElement;\n\ttr(...args: Array<any>): HTMLTableRowElement;\n\ttrack(...args: Array<any>): HTMLTrackElement;\n\tu(...args: Array<any>): HTMLElement;\n\tul(...args: Array<any>): HTMLUListElement;\n\tvar(...args: Array<any>): HTMLElement;\n\tvideo(...args: Array<any>): HTMLVideoElement;\n\twbr(...args: Array<any>): HTMLElement;\n}\n\ninterface SVGElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => SVGElement;\n\ta(...args: Array<any>): SVGAElement;\n\taltGlyph(...args: Array<any>): SVGElement;\n\taltGlyphDef(...args: Array<any>): SVGElement;\n\taltGlyphItem(...args: Array<any>): SVGElement;\n\tanimate(...args: Array<any>): SVGAnimateElement;\n\tanimateMotion(...args: Array<any>): SVGAnimateMotionElement;\n\tanimateTransform(...args: Array<any>): SVGAnimateTransformElement;\n\tcircle(...args: Array<any>): SVGCircleElement;\n\tclipPath(...args: Array<any>): SVGClipPathElement;\n\t\"color-profile\"(...args: Array<any>): SVGElement;\n\tcolor_profile(...args: Array<any>): SVGElement;\n\tcursor(...args: Array<any>): SVGElement;\n\tdefs(...args: Array<any>): SVGDefsElement;\n\tdesc(...args: Array<any>): SVGDescElement;\n\tdiscard(...args: Array<any>): SVGElement;\n\tellipse(...args: Array<any>): SVGEllipseElement;\n\tfeBlend(...args: Array<any>): SVGFEBlendElement;\n\tfeColorMatrix(...args: Array<any>): SVGFEColorMatrixElement;\n\tfeComponentTransfer(...args: Array<any>): SVGFEComponentTransferElement;\n\tfeComposite(...args: Array<any>): SVGFECompositeElement;\n\tfeConvolveMatrix(...args: Array<any>): SVGFEConvolveMatrixElement;\n\tfeDiffuseLighting(...args: Array<any>): SVGFEDiffuseLightingElement;\n\tfeDisplacementMap(...args: Array<any>): SVGFEDisplacementMapElement;\n\tfeDistantLight(...args: Array<any>): SVGFEDistantLightElement;\n\tfeDropShadow(...args: Array<any>): SVGElement;\n\tfeFlood(...args: Array<any>): SVGFEFloodElement;\n\tfeFuncA(...args: Array<any>): SVGFEFuncAElement;\n\tfeFuncB(...args: Array<any>): SVGFEFuncBElement;\n\tfeFuncG(...args: Array<any>): SVGFEFuncGElement;\n\tfeFuncR(...args: Array<any>): SVGFEFuncRElement;\n\tfeGaussianBlur(...args: Array<any>): SVGFEGaussianBlurElement;\n\tfeImage(...args: Array<any>): SVGFEImageElement;\n\tfeMerge(...args: Array<any>): SVGFEMergeElement;\n\tfeMergeNode(...args: Array<any>): SVGFEMergeNodeElement;\n\tfeMorphology(...args: Array<any>): SVGFEMorphologyElement;\n\tfeOffset(...args: Array<any>): SVGFEOffsetElement;\n\tfePointLight(...args: Array<any>): SVGFEPointLightElement;\n\tfeSpecularLighting(...args: Array<any>): SVGFESpecularLightingElement;\n\tfeSpotLight(...args: Array<any>): SVGFESpotLightElement;\n\tfeTile(...args: Array<any>): SVGFETileElement;\n\tfeTurbulence(...args: Array<any>): SVGFETurbulenceElement;\n\tfilter(...args: Array<any>): SVGFilterElement;\n\tfont(...args: Array<any>): SVGElement;\n\t\"font-face\"(...args: Array<any>): SVGElement;\n\tfont_face(...args: Array<any>): SVGElement;\n\t\"font-face-format\"(...args: Array<any>): SVGElement;\n\tfont_face_format(...args: Array<any>): SVGElement;\n\t\"font-face-name\"(...args: Array<any>): SVGElement;\n\tfont_face_name(...args: Array<any>): SVGElement;\n\t\"font-face-src\"(...args: Array<any>): SVGElement;\n\tfont_face_src(...args: Array<any>): SVGElement;\n\t\"font-face-uri\"(...args: Array<any>): SVGElement;\n\tfont_face_uri(...args: Array<any>): SVGElement;\n\tforeignObject(...args: Array<any>): SVGForeignObjectElement;\n\tg(...args: Array<any>): SVGGElement;\n\tglyph(...args: Array<any>): SVGElement;\n\tglyphRef(...args: Array<any>): SVGElement;\n\thkern(...args: Array<any>): SVGElement;\n\timage(...args: Array<any>): SVGImageElement;\n\tline(...args: Array<any>): SVGLineElement;\n\tlinearGradient(...args: Array<any>): SVGLinearGradientElement;\n\tmarker(...args: Array<any>): SVGMarkerElement;\n\tmask(...args: Array<any>): SVGMaskElement;\n\tmetadata(...args: Array<any>): SVGMetadataElement;\n\t\"missing-glyph\"(...args: Array<any>): SVGElement;\n\tmissing_glyph(...args: Array<any>): SVGElement;\n\tmpath(...args: Array<any>): SVGElement;\n\tpath(...args: Array<any>): SVGPathElement;\n\tpattern(...args: Array<any>): SVGPatternElement;\n\tpolygon(...args: Array<any>): SVGPolygonElement;\n\tpolyline(...args: Array<any>): SVGPolylineElement;\n\tradialGradient(...args: Array<any>): SVGRadialGradientElement;\n\trect(...args: Array<any>): SVGRectElement;\n\tscript(...args: Array<any>): SVGScriptElement;\n\tset(...args: Array<any>): SVGElement;\n\tstop(...args: Array<any>): SVGStopElement;\n\tstyle(...args: Array<any>): SVGStyleElement;\n\tsvg(...args: Array<any>): SVGSVGElement;\n\tswitch(...args: Array<any>): SVGSwitchElement;\n\tsymbol(...args: Array<any>): SVGSymbolElement;\n\ttext(...args: Array<any>): SVGTextElement;\n\ttextPath(...args: Array<any>): SVGTextPathElement;\n\ttitle(...args: Array<any>): SVGTitleElement;\n\ttref(...args: Array<any>): SVGElement;\n\ttspan(...args: Array<any>): SVGTSpanElement;\n\tuse(...args: Array<any>): SVGUseElement;\n\tview(...args: Array<any>): SVGViewElement;\n\tvkern(...args: Array<any>): SVGElement;\n}\n\nexport const HTML: HTMLElementFactory = <HTMLElementFactory> <unknown> parseHTML;\nexport const SVG: SVGElementFactory = <SVGElementFactory> <unknown> parseSVG;\n\nfor (const name of \"a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr\".split(\" \")) {\n\t(<any>HTML)[name] = (...args: Array<any>) => applyElementArgs(document.createElement(name), args);\n}\nfor (const name of \"a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern\".split(\" \")) {\n\t(<any>SVG)[name] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\tif (/-/.test(name)) {\n\t\tconst snakeCaseName = name.replace(/-/g, \"_\");\n\t\t(<any>SVG)[snakeCaseName] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\t}\n}\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { BeepBoxOption, DictionaryArray, toNameMap, Config } from \"../synth/SynthConfig\";\r\nimport { Song } from \"../synth/synth\";\r\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\r\n\r\n//namespace beepbox {\r\nexport interface ChannelColors extends BeepBoxOption {\r\n\treadonly secondaryChannel: string;\r\n\treadonly primaryChannel: string;\r\n\treadonly secondaryNote: string;\r\n\treadonly primaryNote: string;\r\n}\r\n\r\nexport class ColorConfig {\r\n\tpublic static colorLookup: Map<number, ChannelColors> = new Map<number, ChannelColors>();\r\n\r\n\tpublic static readonly themes: { [name: string]: string } = {\r\n\t\t\"dark classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: black;\r\n\t\t\t\t\t--editor-background: black;\r\n\t\t\t\t\t--hover-preview: white;\r\n\t\t\t\t\t--playhead: white;\r\n\t\t\t\t\t--primary-text: white;\r\n\t\t\t\t\t--secondary-text: #999;\r\n\t\t\t\t\t--inverted-text: black;\r\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(255,255,255,0.2);\r\n\t\t\t\t\t--loop-accent: #74f;\r\n\t\t\t\t\t--link-accent: #98f;\r\n\t\t\t\t\t--ui-widget-background: #444;\r\n\t\t\t\t\t--ui-widget-focus: #777;\r\n\t\t\t\t\t--pitch-background: #444;\r\n\t\t\t\t\t--tonic: #864;\r\n\t\t\t\t\t--fifth-note: #468;\r\n\t\t\t\t\t--white-piano-key: #bbb;\r\n\t\t\t\t\t--black-piano-key: #444;\r\n\t\t\t\t\t--use-color-formula: false;\r\n\t\t\t\t\t--track-editor-bg-pitch: #444;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-noise: #444;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-mod: #234;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\r\n\t\t\t\t\t--multiplicative-mod-slider: #456;\r\n\t\t\t\t\t--overwriting-mod-slider: #654;\r\n\t\t\t\t\t--indicator-primary: #74f;\r\n\t\t\t\t\t--indicator-secondary: #444;\r\n\t\t\t\t\t--select2-opt-group: #585858;\r\n\t\t\t\t\t--input-box-outline: #333;\r\n\t\t\t\t\t--mute-button-normal: #ffa033;\r\n\t\t\t\t\t--mute-button-mod: #9a6bff;\r\n\t\t\t\t\t--pitch1-secondary-channel: #0099a1;\r\n\t\t\t\t\t--pitch1-primary-channel:   #25f3ff;\r\n\t\t\t\t\t--pitch1-secondary-note:    #00bdc7;\r\n\t\t\t\t\t--pitch1-primary-note:      #92f9ff;\r\n\t\t\t\t\t--pitch2-secondary-channel: #a1a100;\r\n\t\t\t\t\t--pitch2-primary-channel:   #ffff25;\r\n\t\t\t\t\t--pitch2-secondary-note:    #c7c700;\r\n\t\t\t\t\t--pitch2-primary-note:      #ffff92;\r\n\t\t\t\t\t--pitch3-secondary-channel: #c75000;\r\n\t\t\t\t\t--pitch3-primary-channel:   #ff9752;\r\n\t\t\t\t\t--pitch3-secondary-note:    #ff771c;\r\n\t\t\t\t\t--pitch3-primary-note:      #ffcdab;\r\n\t\t\t\t\t--pitch4-secondary-channel: #00a100;\r\n\t\t\t\t\t--pitch4-primary-channel:   #50ff50;\r\n\t\t\t\t\t--pitch4-secondary-note:    #00c700;\r\n\t\t\t\t\t--pitch4-primary-note:      #a0ffa0;\r\n\t\t\t\t\t--pitch5-secondary-channel: #d020d0;\r\n\t\t\t\t\t--pitch5-primary-channel:   #ff90ff;\r\n\t\t\t\t\t--pitch5-secondary-note:    #e040e0;\r\n\t\t\t\t\t--pitch5-primary-note:      #ffc0ff;\r\n\t\t\t\t\t--pitch6-secondary-channel: #7777b0;\r\n\t\t\t\t\t--pitch6-primary-channel:   #a0a0ff;\r\n\t\t\t\t\t--pitch6-secondary-note:    #8888d0;\r\n\t\t\t\t\t--pitch6-primary-note:      #d0d0ff;\r\n\t\t\t\t\t--pitch7-secondary-channel: #8AA100;\r\n\t\t\t\t\t--pitch7-primary-channel:   #DEFF25;\r\n\t\t\t\t\t--pitch7-secondary-note:\t  #AAC700;\r\n\t\t\t\t\t--pitch7-primary-note:\t\t\t#E6FF92;\r\n\t\t\t\t\t--pitch8-secondary-channel: #DF0019;\r\n\t\t\t\t\t--pitch8-primary-channel:   #FF98A4;\r\n\t\t\t\t\t--pitch8-secondary-note:    #FF4E63;\r\n\t\t\t\t\t--pitch8-primary-note:      #FFB2BB;\r\n\t\t\t\t\t--pitch9-secondary-channel: #00A170;\r\n\t\t\t\t\t--pitch9-primary-channel:   #50FFC9;\r\n\t\t\t\t\t--pitch9-secondary-note:    #00C78A;\r\n\t\t\t\t\t--pitch9-primary-note:\t\t\t#83FFD9;\r\n\t\t\t\t\t--pitch10-secondary-channel:#A11FFF;\r\n\t\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\r\n\t\t\t\t\t--pitch10-secondary-note:   #B757FF;\r\n\t\t\t\t\t--pitch10-primary-note:     #DFACFF;\r\n\t\t\t\t\t--noise1-secondary-channel: #6f6f6f;\r\n\t\t\t\t\t--noise1-primary-channel:   #aaaaaa;\r\n\t\t\t\t\t--noise1-secondary-note:    #a7a7a7;\r\n\t\t\t\t\t--noise1-primary-note:      #e0e0e0;\r\n\t\t\t\t\t--noise2-secondary-channel: #996633;\r\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\r\n\t\t\t\t\t--noise2-secondary-note:    #cc9966;\r\n\t\t\t\t\t--noise2-primary-note:      #f0d0bb;\r\n\t\t\t\t\t--noise3-secondary-channel: #4a6d8f;\r\n\t\t\t\t\t--noise3-primary-channel:   #77aadd;\r\n\t\t\t\t\t--noise3-secondary-note:    #6f9fcf;\r\n\t\t\t\t\t--noise3-primary-note:      #bbd7ff;\r\n\t\t\t\t\t--noise4-secondary-channel: #6B3E8E;\r\n\t\t\t\t\t--noise4-primary-channel:   #AF82D2;\r\n\t\t\t\t\t--noise4-secondary-note:    #9E71C1;\r\n\t\t\t\t\t--noise4-primary-note:      #D4C1EA;\r\n          --mod1-secondary-channel:   #339955;\r\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\r\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\r\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\r\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\r\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\r\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\r\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\r\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\r\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\r\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\r\n\t\t\t\t\t--mod3-primary-note:\t\t\t  #f8ddff;\r\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\r\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\r\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\r\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\r\n\t\t\t\t\t--mod-label-primary:        #999;\r\n\t\t\t\t\t--mod-label-secondary-text: #333;\r\n\t\t\t\t\t--mod-label-primary-text:   black;\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"dark competition\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: black;\r\n\t\t\t\t\t--editor-background: black;\r\n\t\t\t\t\t--hover-preview: #ddd;\r\n\t\t\t\t\t--playhead: #ddd;\r\n\t\t\t\t\t--primary-text: #ddd;\r\n\t\t\t\t\t--secondary-text: #8e695b;\r\n\t\t\t\t\t--inverted-text: black;\r\n\t\t\t\t\t--text-selection: rgba(169,0,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(221,221,221,0.2);\r\n\t\t\t\t\t--loop-accent: #bf15ba;\r\n\t\t\t\t\t--link-accent: #f888ff;\r\n\t\t\t\t\t--ui-widget-background: #443a3a;\r\n\t\t\t\t\t--ui-widget-focus: #777;\r\n\t\t\t\t\t--pitch-background: #353333;\r\n\t\t\t\t\t--tonic: #884a44;\r\n\t\t\t\t\t--fifth-note: #415498;\r\n\t\t\t\t\t--white-piano-key: #bbb;\r\n\t\t\t\t\t--black-piano-key: #444;\r\n\t\t\t\t\t--use-color-formula: false;\r\n\t\t\t\t\t--track-editor-bg-pitch: #444;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-noise: #444;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #333;\r\n\t\t\t\t\t--track-editor-bg-mod: #234;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #123;\r\n\t\t\t\t\t--multiplicative-mod-slider: #456;\r\n\t\t\t\t\t--overwriting-mod-slider: #654;\r\n\t\t\t\t\t--indicator-primary: #74f;\r\n\t\t\t\t\t--indicator-secondary: #444;\r\n\t\t\t\t\t--select2-opt-group: #585858;\r\n\t\t\t\t\t--input-box-outline: #333;\r\n\t\t\t\t\t--mute-button-normal: #ffa033;\r\n\t\t\t\t\t--mute-button-mod: #9a6bff;\r\n\t\t\t\t\t--pitch1-secondary-channel: #0099a1;\r\n\t\t\t\t\t--pitch1-primary-channel:   #25f3ff;\r\n\t\t\t\t\t--pitch1-secondary-note:    #00bdc7;\r\n\t\t\t\t\t--pitch1-primary-note:      #92f9ff;\r\n\t\t\t\t\t--pitch2-secondary-channel: #a1a100;\r\n\t\t\t\t\t--pitch2-primary-channel:   #ffff25;\r\n\t\t\t\t\t--pitch2-secondary-note:    #c7c700;\r\n\t\t\t\t\t--pitch2-primary-note:      #ffff92;\r\n\t\t\t\t\t--pitch3-secondary-channel: #c75000;\r\n\t\t\t\t\t--pitch3-primary-channel:   #ff9752;\r\n\t\t\t\t\t--pitch3-secondary-note:    #ff771c;\r\n\t\t\t\t\t--pitch3-primary-note:      #ffcdab;\r\n\t\t\t\t\t--pitch4-secondary-channel: #00a100;\r\n\t\t\t\t\t--pitch4-primary-channel:   #50ff50;\r\n\t\t\t\t\t--pitch4-secondary-note:    #00c700;\r\n\t\t\t\t\t--pitch4-primary-note:      #a0ffa0;\r\n\t\t\t\t\t--pitch5-secondary-channel: #d020d0;\r\n\t\t\t\t\t--pitch5-primary-channel:   #ff90ff;\r\n\t\t\t\t\t--pitch5-secondary-note:    #e040e0;\r\n\t\t\t\t\t--pitch5-primary-note:      #ffc0ff;\r\n\t\t\t\t\t--pitch6-secondary-channel: #7777b0;\r\n\t\t\t\t\t--pitch6-primary-channel:   #a0a0ff;\r\n\t\t\t\t\t--pitch6-secondary-note:    #8888d0;\r\n\t\t\t\t\t--pitch6-primary-note:      #d0d0ff;\r\n\t\t\t\t\t--pitch7-secondary-channel: #8AA100;\r\n\t\t\t\t\t--pitch7-primary-channel:   #DEFF25;\r\n\t\t\t\t\t--pitch7-secondary-note:\t  #AAC700;\r\n\t\t\t\t\t--pitch7-primary-note:\t\t\t#E6FF92;\r\n\t\t\t\t\t--pitch8-secondary-channel: #DF0019;\r\n\t\t\t\t\t--pitch8-primary-channel:   #FF98A4;\r\n\t\t\t\t\t--pitch8-secondary-note:    #FF4E63;\r\n\t\t\t\t\t--pitch8-primary-note:      #FFB2BB;\r\n\t\t\t\t\t--pitch9-secondary-channel: #00A170;\r\n\t\t\t\t\t--pitch9-primary-channel:   #50FFC9;\r\n\t\t\t\t\t--pitch9-secondary-note:    #00C78A;\r\n\t\t\t\t\t--pitch9-primary-note:\t\t\t#83FFD9;\r\n\t\t\t\t\t--pitch10-secondary-channel:#A11FFF;\r\n\t\t\t\t\t--pitch10-primary-channel:  #CE8BFF;\r\n\t\t\t\t\t--pitch10-secondary-note:   #B757FF;\r\n\t\t\t\t\t--pitch10-primary-note:     #DFACFF;\r\n\t\t\t\t\t--noise1-secondary-channel: #6f6f6f;\r\n\t\t\t\t\t--noise1-primary-channel:   #aaaaaa;\r\n\t\t\t\t\t--noise1-secondary-note:    #a7a7a7;\r\n\t\t\t\t\t--noise1-primary-note:      #e0e0e0;\r\n\t\t\t\t\t--noise2-secondary-channel: #996633;\r\n\t\t\t\t\t--noise2-primary-channel:   #ddaa77;\r\n\t\t\t\t\t--noise2-secondary-note:    #cc9966;\r\n\t\t\t\t\t--noise2-primary-note:      #f0d0bb;\r\n\t\t\t\t\t--noise3-secondary-channel: #4a6d8f;\r\n\t\t\t\t\t--noise3-primary-channel:   #77aadd;\r\n\t\t\t\t\t--noise3-secondary-note:    #6f9fcf;\r\n\t\t\t\t\t--noise3-primary-note:      #bbd7ff;\r\n\t\t\t\t\t--noise4-secondary-channel: #6B3E8E;\r\n\t\t\t\t\t--noise4-primary-channel:   #AF82D2;\r\n\t\t\t\t\t--noise4-secondary-note:    #9E71C1;\r\n\t\t\t\t\t--noise4-primary-note:      #D4C1EA;\r\n          --mod1-secondary-channel:   #339955;\r\n\t\t\t\t\t--mod1-primary-channel:     #77fc55;\r\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\r\n\t\t\t\t\t--mod1-primary-note:        #cdffee;\r\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\r\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\r\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\r\n\t\t\t\t\t--mod2-primary-note:        #ffb8de;\r\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\r\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\r\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\r\n\t\t\t\t\t--mod3-primary-note:\t\t\t  #f8ddff;\r\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\r\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\r\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\r\n\t\t\t\t\t--mod4-primary-note:        #fff6d3;\r\n\t\t\t\t\t--mod-label-primary:        #999;\r\n\t\t\t\t\t--mod-label-secondary-text: #333;\r\n\t\t\t\t\t--mod-label-primary-text:   black;\r\n\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"light classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t-webkit-text-stroke-width: 0.5px;\r\n\t\t\t\t\t--page-margin: #685d88;\r\n\t\t\t\t\t--editor-background: white;\r\n\t\t\t\t\t--hover-preview: black;\r\n\t\t\t\t\t--playhead: rgba(0,0,0,0.5);\r\n\t\t\t\t\t--primary-text: black;\r\n\t\t\t\t\t--secondary-text: #777;\r\n\t\t\t\t\t--inverted-text: white;\r\n\t\t\t\t\t--text-selection: rgba(200,170,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(0,0,0,0.1);\r\n\t\t\t\t\t--loop-accent: #98f;\r\n\t\t\t\t\t--link-accent: #74f;\r\n\t\t\t\t\t--ui-widget-background: #ececec;\r\n\t\t\t\t\t--ui-widget-focus: #eee;\r\n\t\t\t\t\t--pitch-background: #ececec;\r\n\t\t\t\t\t--tonic: #f0d6b6;\r\n\t\t\t\t\t--fifth-note: #bbddf0;\r\n\t\t\t\t\t--white-piano-key: #eee;\r\n\t\t\t\t\t--black-piano-key: #666;\r\n\t\t\t\t\t--use-color-formula: false;\r\n\t\t\t\t\t--track-editor-bg-pitch: #ececec;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #fdfdfd;\r\n\t\t\t\t\t--track-editor-bg-noise: #ececec;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #fdfdfd;\r\n\t\t\t\t\t--track-editor-bg-mod: #dbecfd;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #ecfdff;\r\n\t\t\t\t\t--multiplicative-mod-slider: #789;\r\n\t\t\t\t\t--overwriting-mod-slider: #987;\r\n\t\t\t\t\t--indicator-primary: #98f;\r\n\t\t\t\t\t--indicator-secondary: #cde;\r\n\t\t\t\t\t--select2-opt-group: #cecece;\r\n\t\t\t\t\t--input-box-outline: #ddd;\r\n\t\t\t\t\t--mute-button-normal: #c0b47f;\r\n\t\t\t\t\t--mute-button-mod: #bd7fc0;\r\n\t\t\t\t\t--pitch1-secondary-channel: #6CD9ED;\r\n\t\t\t\t\t--pitch1-primary-channel:   #00A0BD;\r\n\t\t\t\t\t--pitch1-secondary-note:    #34C2DC;\r\n\t\t\t\t\t--pitch1-primary-note:      #00758A;\r\n\t\t\t\t\t--pitch2-secondary-channel: #E3C941;\r\n\t\t\t\t\t--pitch2-primary-channel:   #B49700;\r\n\t\t\t\t\t--pitch2-secondary-note:    #D1B628;\r\n\t\t\t\t\t--pitch2-primary-note:      #836E00;\r\n\t\t\t\t\t--pitch3-secondary-channel: #FF9D61;\r\n\t\t\t\t\t--pitch3-primary-channel:   #E14E00;\r\n\t\t\t\t\t--pitch3-secondary-note:    #F67D3C;\r\n\t\t\t\t\t--pitch3-primary-note:      #B64000;\r\n\t\t\t\t\t--pitch4-secondary-channel: #4BE24B;\r\n\t\t\t\t\t--pitch4-primary-channel:   #00A800;\r\n\t\t\t\t\t--pitch4-secondary-note:    #2DC82D;\r\n\t\t\t\t\t--pitch4-primary-note:      #008000;\r\n\t\t\t\t\t--pitch5-secondary-channel: #FF90FF;\r\n\t\t\t\t\t--pitch5-primary-channel:   #E12EDF;\r\n\t\t\t\t\t--pitch5-secondary-note:    #EC6EEC;\r\n\t\t\t\t\t--pitch5-primary-note:      #A600A5;\r\n\t\t\t\t\t--pitch6-secondary-channel: #B5B5FE;\r\n\t\t\t\t\t--pitch6-primary-channel:   #6969FD;\r\n\t\t\t\t\t--pitch6-secondary-note:    #9393FE;\r\n\t\t\t\t\t--pitch6-primary-note:      #4A4AD7;\r\n\t\t\t\t\t--pitch7-secondary-channel: #CBE24B;\r\n\t\t\t\t\t--pitch7-primary-channel:   #8EA800;\r\n\t\t\t\t\t--pitch7-secondary-note:    #B0C82D;\r\n\t\t\t\t\t--pitch7-primary-note:      #6C8000;\r\n\t\t\t\t\t--pitch8-secondary-channel: #FF90A4;\r\n\t\t\t\t\t--pitch8-primary-channel:   #E12E4D;\r\n\t\t\t\t\t--pitch8-secondary-note:    #EC6E85;\r\n\t\t\t\t\t--pitch8-primary-note:      #A6001D;\r\n\t\t\t\t\t--pitch9-secondary-channel: #41E3B5;\r\n\t\t\t\t\t--pitch9-primary-channel:   #00B481;\r\n\t\t\t\t\t--pitch9-secondary-note:    #28D1A1;\r\n\t\t\t\t\t--pitch9-primary-note:      #00835E;\r\n\t\t\t\t\t--pitch10-secondary-channel:#CA77FF;\r\n\t\t\t\t\t--pitch10-primary-channel:  #9609FF;\r\n\t\t\t\t\t--pitch10-secondary-note:   #B54FFF;\r\n\t\t\t\t\t--pitch10-primary-note:     #8400E3;\r\n\t\t\t\t\t--noise1-secondary-channel: #C1C1C1;\r\n\t\t\t\t\t--noise1-primary-channel:   #898989;\r\n\t\t\t\t\t--noise1-secondary-note:    #ADADAD;\r\n\t\t\t\t\t--noise1-primary-note:      #6C6C6C;\r\n\t\t\t\t\t--noise2-secondary-channel: #E8BB8C;\r\n\t\t\t\t\t--noise2-primary-channel:   #BD7D3A;\r\n\t\t\t\t\t--noise2-secondary-note:    #D1A374;\r\n\t\t\t\t\t--noise2-primary-note:      #836342;\r\n\t\t\t\t\t--noise3-secondary-channel: #9BC4EB;\r\n\t\t\t\t\t--noise3-primary-channel:   #4481BE;\r\n\t\t\t\t\t--noise3-secondary-note:    #7CA7D3;\r\n\t\t\t\t\t--noise3-primary-note:      #476685;\r\n\t\t\t\t\t--noise4-secondary-channel: #C5A5E0;\r\n\t\t\t\t\t--noise4-primary-channel:   #8553AE;\r\n\t\t\t\t\t--noise4-secondary-note:    #AB87C8;\r\n\t\t\t\t\t--noise4-primary-note:      #684F7D;\r\n\t\t\t\t\t--mod1-secondary-channel:   #339955;\r\n\t\t\t\t\t--mod1-primary-channel:     #77dd55;\r\n\t\t\t\t\t--mod1-secondary-note:      #77ff8a;\r\n\t\t\t\t\t--mod1-primary-note:        #2ad84a;\r\n\t\t\t\t\t--mod2-secondary-channel:   #993355;\r\n\t\t\t\t\t--mod2-primary-channel:     #f04960;\r\n\t\t\t\t\t--mod2-secondary-note:      #f057a0;\r\n\t\t\t\t\t--mod2-primary-note:        #ba124a;\r\n\t\t\t\t\t--mod3-secondary-channel:   #553399;\r\n\t\t\t\t\t--mod3-primary-channel:     #8855fc;\r\n\t\t\t\t\t--mod3-secondary-note:      #aa64ff;\r\n\t\t\t\t\t--mod3-primary-note:        #7a1caa;\r\n\t\t\t\t\t--mod4-secondary-channel:   #a86436;\r\n\t\t\t\t\t--mod4-primary-channel:     #c8a825;\r\n\t\t\t\t\t--mod4-secondary-note:      #e8ba46;\r\n\t\t\t\t\t--mod4-primary-note:        #a86810;\r\n\t\t\t\t\t--mod-label-primary:        #dddddd;\r\n\t\t\t\t\t--mod-label-secondary-text: #777;\r\n\t\t\t\t\t--mod-label-primary-text:   black;\r\n\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.select2-selection__rendered {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"jummbox classic\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #040410;\r\n\t\t\t\t\t--editor-background: #040410;\r\n\t\t\t\t\t--hover-preview: white;\r\n\t\t\t\t\t--playhead: rgba(255, 255, 255, 0.9);\r\n\t\t\t\t\t--primary-text: white;\r\n\t\t\t\t\t--secondary-text: #84859a;\r\n\t\t\t\t\t--inverted-text: black;\r\n\t\t\t\t\t--text-selection: rgba(119,68,255,0.99);\r\n\t\t\t\t\t--box-selection-fill: #044b94;\r\n\t\t\t\t\t--loop-accent: #74f;\r\n\t\t\t\t\t--link-accent: #98f;\r\n\t\t\t\t\t--ui-widget-background: #393e4f;\r\n\t\t\t\t\t--ui-widget-focus: #6d6886;\r\n\t\t\t\t\t--pitch-background: #393e4f;\r\n\t\t\t\t\t--tonic: #725491;\r\n\t\t\t\t\t--fifth-note: #54547a;\r\n\t\t\t\t\t--white-piano-key: #eee;\r\n\t\t\t\t\t--black-piano-key: #666;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #393e4f;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #1c1d28;\r\n\t\t\t\t\t--track-editor-bg-noise: #3d3535;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #161313;\r\n\t\t\t\t\t--track-editor-bg-mod: #283560;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #0a101f;\r\n\t\t\t\t\t--multiplicative-mod-slider: #606c9f;\r\n\t\t\t\t\t--overwriting-mod-slider: #6850b5;\r\n\t\t\t\t\t--indicator-primary: #9c64f7;\r\n\t\t\t\t\t--indicator-secondary: #393e4f;\r\n\t\t\t\t\t--select2-opt-group: #5d576f;\r\n\t\t\t\t\t--input-box-outline: #222;\r\n\t\t\t\t\t--mute-button-normal: #dda85d;\r\n\t\t\t\t\t--mute-button-mod: #886eae;\r\n\t\t\t\t\t--mod-label-primary: #282840;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(87, 86, 120);\r\n\t\t\t\t\t--mod-label-primary-text: white;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 83.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 100;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 25;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 6.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 0;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 0;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 192;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 192;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 192;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 45;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 192;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"forest\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #010c03;\r\n\t\t\t\t\t--editor-background: #010c03;\r\n\t\t\t\t\t--hover-preview: #efe;\r\n\t\t\t\t\t--playhead: rgba(232, 255, 232, 0.9);\r\n\t\t\t\t\t--primary-text: #efe;\r\n\t\t\t\t\t--secondary-text: #70A070;\r\n\t\t\t\t\t--inverted-text: #280228;\r\n\t\t\t\t\t--text-selection: rgba(255,68,199,0.99);\r\n\t\t\t\t\t--box-selection-fill: #267aa3;\r\n\t\t\t\t\t--loop-accent: #ffe845;\r\n\t\t\t\t\t--link-accent: #9f8;\r\n\t\t\t\t\t--ui-widget-background: #203829;\r\n\t\t\t\t\t--ui-widget-focus: #487860;\r\n\t\t\t\t\t--pitch-background: #203829;\r\n\t\t\t\t\t--tonic: #2b8d20;\r\n\t\t\t\t\t--fifth-note: #385840;\r\n\t\t\t\t\t--white-piano-key: #bda;\r\n\t\t\t\t\t--black-piano-key: #573;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #254820;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #102819;\r\n\t\t\t\t\t--track-editor-bg-noise: #304050;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #102030;\r\n\t\t\t\t\t--track-editor-bg-mod: #506030;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #2a300a;\r\n\t\t\t\t\t--multiplicative-mod-slider: #205c8f;\r\n\t\t\t\t\t--overwriting-mod-slider: #20ac6f;\r\n\t\t\t\t\t--indicator-primary: #dcd866;\r\n\t\t\t\t\t--indicator-secondary: #203829;\r\n\t\t\t\t\t--select2-opt-group: #1a6f5a;\r\n\t\t\t\t\t--input-box-outline: #242;\r\n\t\t\t\t\t--mute-button-normal: #49e980;\r\n\t\t\t\t\t--mute-button-mod: #c2e502;\r\n\t\t\t\t\t--mod-label-primary: #133613;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(27, 126, 40);\r\n\t\t\t\t\t--mod-label-primary-text: #efe;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 120;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 59;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 50;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 120;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 86;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 70;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 120;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 85;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 30;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.04;\r\n\t\t\t\t\t--pitch-primary-note-hue: 120;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 80;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 200;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 22;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 200;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-primary-channel-sat: 48;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 65;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 200;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 33;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 200;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 1.1;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 64;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 40;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 44;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 40;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-primary-channel-sat: 60;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 40;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-secondary-note-sat: 62;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 55;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 40;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.8;\r\n\t\t\t\t\t--mod-primary-note-sat: 66;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 85;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"canyon\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t--page-margin: #0a0000;\r\n\t\t\t\t\t--editor-background: #0a0000;\r\n\t\t\t\t\t--hover-preview: white;\r\n\t\t\t\t\t--playhead: rgba(247, 172, 196, 0.9);\r\n\t\t\t\t\t--primary-text: #f5d6bf;\r\n\t\t\t\t\t--secondary-text: #934050;\r\n\t\t\t\t\t--inverted-text: #290505;\r\n\t\t\t\t\t--text-selection: rgba(255, 208, 68, 0.99);\r\n\t\t\t\t\t--box-selection-fill: #94044870;\r\n\t\t\t\t\t--loop-accent: #ff1e1e;\r\n\t\t\t\t\t--link-accent: #da7b76;\r\n\t\t\t\t\t--ui-widget-background: #533137;\r\n\t\t\t\t\t--ui-widget-focus: #743e4b;\r\n\t\t\t\t\t--pitch-background: #4f3939;\r\n\t\t\t\t\t--tonic: #9e4145;\r\n\t\t\t\t\t--fifth-note: #5b3e6b;\r\n\t\t\t\t\t--white-piano-key: #d89898;\r\n\t\t\t\t\t--black-piano-key: #572b29;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #5e3a41;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #281d1c;\r\n\t\t\t\t\t--track-editor-bg-noise: #3a3551;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #272732;\r\n\t\t\t\t\t--track-editor-bg-mod: #552045;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #3e1442;\r\n\t\t\t\t\t--multiplicative-mod-slider: #9f6095;\r\n\t\t\t\t\t--overwriting-mod-slider: #b55050;\r\n\t\t\t\t\t--indicator-primary: #f2f764;\r\n\t\t\t\t\t--indicator-secondary: #4f3939;\r\n\t\t\t\t\t--select2-opt-group: #673030;\r\n\t\t\t\t\t--input-box-outline: #443131;\r\n\t\t\t\t\t--mute-button-normal: #d81833;\r\n\t\t\t\t\t--mute-button-mod: #9e2691;\r\n\t\t\t\t\t--mod-label-primary: #5f2b39;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(158, 66, 122);\r\n\t\t\t\t\t--mod-label-primary-text: #e6caed;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 73.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 40;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 90;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 67.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 83.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 35;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 11.8;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 85.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 60;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-hue: 60;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-hue: 60;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-hue: 60;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 222;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 50;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 222;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 222;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 54;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 222;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 75;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t\t\"midnight\" :  `\r\n\t\t:root {\r\n\t\t\t--page-margin: #000;\r\n\t\t\t--editor-background: #000;\r\n\t\t\t--hover-preview: #757575;\r\n\t\t\t--playhead: #fff;\r\n\t\t\t--primary-text: #fff;\r\n\t\t\t--secondary-text: #acacac;\r\n\t\t\t--inverted-text: #290505;\r\n\t\t\t--text-selection: rgba(155, 155, 155, 0.99);\r\n\t\t\t--box-selection-fill: #79797970;\r\n\t\t\t--loop-accent: #646464;\r\n\t\t\t--link-accent: #707070;\r\n\t\t\t--ui-widget-background: #353535;\r\n\t\t\t--ui-widget-focus: #464646;\r\n\t\t\t--pitch-background: #222121;\r\n\t\t\t--tonic: #1a1818;\r\n\t\t\t--fifth-note: #555955;\r\n\t\t\t--white-piano-key: #a89e9e;\r\n\t\t\t--black-piano-key: #2d2424;\r\n\t\t\t--use-color-formula: true;\r\n\t\t\t--track-editor-bg-pitch: #373737;\r\n\t\t\t--track-editor-bg-pitch-dim: #131313;\r\n\t\t\t--track-editor-bg-noise: #484848;\r\n\t\t\t--track-editor-bg-noise-dim: #131313;\r\n\t\t\t--track-editor-bg-mod: #373737;\r\n\t\t\t--track-editor-bg-mod-dim: #131313;\r\n\t\t\t--multiplicative-mod-slider: #555;\r\n\t\t\t--overwriting-mod-slider: #464545;\r\n\t\t\t--indicator-primary: #e0e0e0;\r\n\t\t\t--indicator-secondary: #404040;\r\n\t\t\t--select2-opt-group: #3c3b3b;\r\n\t\t\t--input-box-outline: #757575;\r\n\t\t\t--mute-button-normal: #8e8d8d;\r\n\t\t\t--mute-button-mod: #ddd;\r\n\t\t\t--mod-label-primary: #262526;\r\n\t\t\t--mod-label-secondary-text: rgb(227, 222, 225);\r\n\t\t\t--mod-label-primary-text: #b9b9b9;\r\n\t\t\t--pitch-secondary-channel-hue: 240;\r\n\t\t\t--pitch-secondary-channel-hue-scale: 228;\r\n\t\t\t--pitch-secondary-channel-sat: 73.3;\r\n\t\t\t--pitch-secondary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-channel-lum: 25;\r\n\t\t\t--pitch-secondary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-channel-hue: 240;\r\n\t\t\t--pitch-primary-channel-hue-scale: 228;\r\n\t\t\t--pitch-primary-channel-sat: 80;\r\n\t\t\t--pitch-primary-channel-sat-scale: 0.1;\r\n\t\t\t--pitch-primary-channel-lum: 60.5;\r\n\t\t\t--pitch-primary-channel-lum-scale: 0.05;\r\n\t\t\t--pitch-secondary-note-hue: 240;\r\n\t\t\t--pitch-secondary-note-hue-scale: 228;\r\n\t\t\t--pitch-secondary-note-sat: 73.9;\r\n\t\t\t--pitch-secondary-note-sat-scale: 0.1;\r\n\t\t\t--pitch-secondary-note-lum: 32;\r\n\t\t\t--pitch-secondary-note-lum-scale: 0.05;\r\n\t\t\t--pitch-primary-note-hue: 240;\r\n\t\t\t--pitch-primary-note-hue-scale: 228;\r\n\t\t\t--pitch-primary-note-sat: 90;\r\n\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t--pitch-primary-note-lum: 80.6;\r\n\t\t\t--pitch-primary-note-lum-scale: 0.025;\r\n\t\t\t--noise-secondary-channel-hue: 160;\r\n\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t--noise-secondary-channel-lum: 42;\r\n\t\t\t--noise-secondary-channel-lum-scale: 0;\r\n\t\t\t--noise-primary-channel-hue: 160;\r\n\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t--noise-primary-channel-sat: 33;\r\n\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t--noise-primary-channel-lum: 63.5;\r\n\t\t\t--noise-primary-channel-lum-scale: 0;\r\n\t\t\t--noise-secondary-note-hue: 160;\r\n\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t--noise-secondary-note-sat: 33.5;\r\n\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t--noise-secondary-note-lum: 55;\r\n\t\t\t--noise-secondary-note-lum-scale: 0;\r\n\t\t\t--noise-primary-note-hue: 160;\r\n\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t--noise-primary-note-sat: 46.5;\r\n\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t--noise-primary-note-lum: 74;\r\n\t\t\t--noise-primary-note-lum-scale: 0;\r\n\t\t\t--mod-secondary-channel-hue: 62;\r\n\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t--mod-secondary-channel-lum: 30;\r\n\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t--mod-primary-channel-hue: 62;\r\n\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t--mod-primary-channel-sat: 96;\r\n\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t--mod-primary-channel-lum: 80;\r\n\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t--mod-secondary-note-hue: 62;\r\n\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t--mod-secondary-note-lum: 34;\r\n\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t--mod-primary-note-hue: 62;\r\n\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t--mod-primary-note-lum: 75;\r\n\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t}\r\n\t`,\r\n\t\t\"jummbox light\": `\r\n\t\t\t\t:root {\r\n\t\t\t\t\t-webkit-text-stroke-width: 0.5px;\r\n\t\t\t\t\t--page-margin: #fefdff;\r\n\t\t\t\t\t--editor-background: #fefdff;\r\n\t\t\t\t\t--hover-preview: #302880;\r\n\t\t\t\t\t--playhead: rgba(62, 32, 120, 0.9);\r\n\t\t\t\t\t--primary-text: #401890;\r\n\t\t\t\t\t--secondary-text: #8769af;\r\n\t\t\t\t\t--inverted-text: #fefdff;\r\n\t\t\t\t\t--text-selection: rgba(255,160,235,0.99);\r\n\t\t\t\t\t--box-selection-fill: rgba(30,62,220,0.5);\r\n\t\t\t\t\t--loop-accent: #4c35d4;\r\n\t\t\t\t\t--link-accent: #7af;\r\n\t\t\t\t\t--ui-widget-background: #bf9cec;\r\n\t\t\t\t\t--ui-widget-focus: #e9c4ff;\r\n\t\t\t\t\t--pitch-background: #e2d9f9;\r\n\t\t\t\t\t--tonic: #c288cc;\r\n\t\t\t\t\t--fifth-note: #d8c9fd;\r\n\t\t\t\t\t--white-piano-key: #e2e2ff;\r\n\t\t\t\t\t--black-piano-key: #66667a;\r\n\t\t\t\t\t--use-color-formula: true;\r\n\t\t\t\t\t--track-editor-bg-pitch: #d9e5ec;\r\n\t\t\t\t\t--track-editor-bg-pitch-dim: #eaeef5;\r\n\t\t\t\t\t--track-editor-bg-noise: #ffc3ae;\r\n\t\t\t\t\t--track-editor-bg-noise-dim: #ffe0cf;\r\n\t\t\t\t\t--track-editor-bg-mod: #c9accc;\r\n\t\t\t\t\t--track-editor-bg-mod-dim: #ebe3ef;\r\n\t\t\t\t\t--multiplicative-mod-slider: #807caf;\r\n\t\t\t\t\t--overwriting-mod-slider: #909cdf;\r\n\t\t\t\t\t--indicator-primary: #ae38ff;\r\n\t\t\t\t\t--indicator-secondary: #bbd4ec;\r\n\t\t\t\t\t--select2-opt-group: #c1b7f1;\r\n\t\t\t\t\t--input-box-outline: #bbb;\r\n\t\t\t\t\t--mute-button-normal: #e9b752;\r\n\t\t\t\t\t--mute-button-mod: #9558ee;\r\n\t\t\t\t\t--mod-label-primary: #ececff;\r\n\t\t\t\t\t--mod-label-secondary-text: rgb(197, 145, 247);\r\n\t\t\t\t\t--mod-label-primary-text: #302880;\r\n\t\t\t\t\t--pitch-secondary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-channel-sat: 53.3;\r\n\t\t\t\t\t--pitch-secondary-channel-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-secondary-channel-lum: 72;\r\n\t\t\t\t\t--pitch-secondary-channel-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-primary-channel-hue: 0;\r\n\t\t\t\t\t--pitch-primary-channel-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-channel-sat: 97;\r\n\t\t\t\t\t--pitch-primary-channel-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-primary-channel-lum: 45.5;\r\n\t\t\t\t\t--pitch-primary-channel-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-secondary-note-hue: 0;\r\n\t\t\t\t\t--pitch-secondary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-secondary-note-sat: 93.9;\r\n\t\t\t\t\t--pitch-secondary-note-sat-scale: -0.1;\r\n\t\t\t\t\t--pitch-secondary-note-lum: 95;\r\n\t\t\t\t\t--pitch-secondary-note-lum-scale: -0.05;\r\n\t\t\t\t\t--pitch-primary-note-hue: 0;\r\n\t\t\t\t\t--pitch-primary-note-hue-scale: 8.1;\r\n\t\t\t\t\t--pitch-primary-note-sat: 100;\r\n\t\t\t\t\t--pitch-primary-note-sat-scale: 0.05;\r\n\t\t\t\t\t--pitch-primary-note-lum: 43.6;\r\n\t\t\t\t\t--pitch-primary-note-lum-scale: -0.025;\r\n\t\t\t\t\t--noise-secondary-channel-hue: 220;\r\n\t\t\t\t\t--noise-secondary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-channel-sat: 25;\r\n\t\t\t\t\t--noise-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-channel-lum: 62;\r\n\t\t\t\t\t--noise-secondary-channel-lum-scale: -0.1;\r\n\t\t\t\t\t--noise-primary-channel-hue: 220;\r\n\t\t\t\t\t--noise-primary-channel-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-channel-sat: 53;\r\n\t\t\t\t\t--noise-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-channel-lum: 53.5;\r\n\t\t\t\t\t--noise-primary-channel-lum-scale: -0.1;\r\n\t\t\t\t\t--noise-secondary-note-hue: 220;\r\n\t\t\t\t\t--noise-secondary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-secondary-note-sat: 58.5;\r\n\t\t\t\t\t--noise-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-secondary-note-lum: 85;\r\n\t\t\t\t\t--noise-secondary-note-lum-scale: -1;\r\n\t\t\t\t\t--noise-primary-note-hue: 220;\r\n\t\t\t\t\t--noise-primary-note-hue-scale: 2;\r\n\t\t\t\t\t--noise-primary-note-sat: 56.5;\r\n\t\t\t\t\t--noise-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--noise-primary-note-lum: 54;\r\n\t\t\t\t\t--noise-primary-note-lum-scale: -1;\r\n\t\t\t\t\t--mod-secondary-channel-hue: 90;\r\n\t\t\t\t\t--mod-secondary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-channel-sat: 88;\r\n\t\t\t\t\t--mod-secondary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-channel-lum: 60;\r\n\t\t\t\t\t--mod-secondary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-hue: 90;\r\n\t\t\t\t\t--mod-primary-channel-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-channel-sat: 100;\r\n\t\t\t\t\t--mod-primary-channel-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-channel-lum: 65;\r\n\t\t\t\t\t--mod-primary-channel-lum-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-hue: 90;\r\n\t\t\t\t\t--mod-secondary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-secondary-note-sat: 92;\r\n\t\t\t\t\t--mod-secondary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-secondary-note-lum: 95;\r\n\t\t\t\t\t--mod-secondary-note-lum-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-hue: 90;\r\n\t\t\t\t\t--mod-primary-note-hue-scale: 1.5;\r\n\t\t\t\t\t--mod-primary-note-sat: 96;\r\n\t\t\t\t\t--mod-primary-note-sat-scale: 0;\r\n\t\t\t\t\t--mod-primary-note-lum: 55;\r\n\t\t\t\t\t--mod-primary-note-lum-scale: 0;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.beepboxEditor button, .beepboxEditor select {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\r\n\t\t\t\t.select2-selection__rendered {\r\n\t\t\t\t\tbox-shadow: inset 0 0 0 1px var(--secondary-text);\r\n\t\t\t\t}\r\n\t\t\t`,\r\n\t};\r\n\r\n\tpublic static readonly pageMargin: string = \"var(--page-margin)\";\r\n\tpublic static readonly editorBackground: string = \"var(--editor-background)\";\r\n\tpublic static readonly hoverPreview: string = \"var(--hover-preview)\";\r\n\tpublic static readonly playhead: string = \"var(--playhead)\";\r\n\tpublic static readonly primaryText: string = \"var(--primary-text)\";\r\n\tpublic static readonly secondaryText: string = \"var(--secondary-text)\";\r\n\tpublic static readonly invertedText: string = \"var(--inverted-text)\";\r\n\tpublic static readonly textSelection: string = \"var(--text-selection)\";\r\n\tpublic static readonly boxSelectionFill: string = \"var(--box-selection-fill)\";\r\n\tpublic static readonly loopAccent: string = \"var(--loop-accent)\";\r\n\tpublic static readonly linkAccent: string = \"var(--link-accent)\";\r\n\tpublic static readonly uiWidgetBackground: string = \"var(--ui-widget-background)\";\r\n\tpublic static readonly uiWidgetFocus: string = \"var(--ui-widget-focus)\";\r\n\tpublic static readonly pitchBackground: string = \"var(--pitch-background)\";\r\n\tpublic static readonly tonic: string = \"var(--tonic)\";\r\n\tpublic static readonly fifthNote: string = \"var(--fifth-note)\";\r\n\tpublic static readonly whitePianoKey: string = \"var(--white-piano-key)\";\r\n\tpublic static readonly blackPianoKey: string = \"var(--black-piano-key)\";\r\n\tpublic static readonly useColorFormula: string = \"var(--use-color-formula)\";\r\n\tpublic static readonly pitchSecondaryChannelHue: string = \"var(--pitch-secondary-channel-hue)\";\r\n\tpublic static readonly pitchSecondaryChannelHueScale: string = \"var(--pitch-secondary-channel-hue-scale)\";\r\n\tpublic static readonly pitchSecondaryChannelSat: string = \"var(--pitch-secondary-channel-sat)\";\r\n\tpublic static readonly pitchSecondaryChannelSatScale: string = \"var(--pitch-secondary-channel-sat-scale)\";\r\n\tpublic static readonly pitchSecondaryChannelLum: string = \"var(--pitch-secondary-channel-lum)\";\r\n\tpublic static readonly pitchSecondaryChannelLumScale: string = \"var(--pitch-secondary-channel-lum-scale)\";\r\n\tpublic static readonly pitchPrimaryChannelHue: string = \"var(--pitch-primary-channel-hue)\";\r\n\tpublic static readonly pitchPrimaryChannelHueScale: string = \"var(--pitch-primary-channel-hue-scale)\";\r\n\tpublic static readonly pitchPrimaryChannelSat: string = \"var(--pitch-primary-channel-sat)\";\r\n\tpublic static readonly pitchPrimaryChannelSatScale: string = \"var(--pitch-primary-channel-sat-scale)\";\r\n\tpublic static readonly pitchPrimaryChannelLum: string = \"var(--pitch-primary-channel-lum)\";\r\n\tpublic static readonly pitchPrimaryChannelLumScale: string = \"var(--pitch-primary-channel-lum-scale)\";\r\n\tpublic static readonly pitchSecondaryNoteHue: string = \"var(--pitch-secondary-note-hue)\";\r\n\tpublic static readonly pitchSecondaryNoteHueScale: string = \"var(--pitch-secondary-note-hue-scale)\";\r\n\tpublic static readonly pitchSecondaryNoteSat: string = \"var(--pitch-secondary-note-sat)\";\r\n\tpublic static readonly pitchSecondaryNoteSatScale: string = \"var(--pitch-secondary-note-sat-scale)\";\r\n\tpublic static readonly pitchSecondaryNoteLum: string = \"var(--pitch-secondary-note-lum)\";\r\n\tpublic static readonly pitchSecondaryNoteLumScale: string = \"var(--pitch-secondary-note-lum-scale)\";\r\n\tpublic static readonly pitchPrimaryNoteHue: string = \"var(--pitch-primary-note-hue)\";\r\n\tpublic static readonly pitchPrimaryNoteHueScale: string = \"var(--pitch-primary-note-hue-scale)\";\r\n\tpublic static readonly pitchPrimaryNoteSat: string = \"var(--pitch-primary-note-sat)\";\r\n\tpublic static readonly pitchPrimaryNoteSatScale: string = \"var(--pitch-primary-note-sat-scale)\";\r\n\tpublic static readonly pitchPrimaryNoteLum: string = \"var(--pitch-primary-note-lum)\";\r\n\tpublic static readonly pitchPrimaryNoteLumScale: string = \"var(--pitch-primary-note-lum-scale)\";\r\n\tpublic static readonly modSecondaryChannelHue: string = \"var(--mod-secondary-channel-hue)\";\r\n\tpublic static readonly modSecondaryChannelHueScale: string = \"var(--mod-secondary-channel-hue-scale)\";\r\n\tpublic static readonly modSecondaryChannelSat: string = \"var(--mod-secondary-channel-sat)\";\r\n\tpublic static readonly modSecondaryChannelSatScale: string = \"var(--mod-secondary-channel-sat-scale)\";\r\n\tpublic static readonly modSecondaryChannelLum: string = \"var(--mod-secondary-channel-lum)\";\r\n\tpublic static readonly modSecondaryChannelLumScale: string = \"var(--mod-secondary-channel-lum-scale)\";\r\n\tpublic static readonly modPrimaryChannelHue: string = \"var(--mod-primary-channel-hue)\";\r\n\tpublic static readonly modPrimaryChannelHueScale: string = \"var(--mod-primary-channel-hue-scale)\";\r\n\tpublic static readonly modPrimaryChannelSat: string = \"var(--mod-primary-channel-sat)\";\r\n\tpublic static readonly modPrimaryChannelSatScale: string = \"var(--mod-primary-channel-sat-scale)\";\r\n\tpublic static readonly modPrimaryChannelLum: string = \"var(--mod-primary-channel-lum)\";\r\n\tpublic static readonly modPrimaryChannelLumScale: string = \"var(--mod-primary-channel-lum-scale)\";\r\n\tpublic static readonly modSecondaryNoteHue: string = \"var(--mod-secondary-note-hue)\";\r\n\tpublic static readonly modSecondaryNoteHueScale: string = \"var(--mod-secondary-note-hue-scale)\";\r\n\tpublic static readonly modSecondaryNoteSat: string = \"var(--mod-secondary-note-sat)\";\r\n\tpublic static readonly modSecondaryNoteSatScale: string = \"var(--mod-secondary-note-sat-scale)\";\r\n\tpublic static readonly modSecondaryNoteLum: string = \"var(--mod-secondary-note-lum)\";\r\n\tpublic static readonly modSecondaryNoteLumScale: string = \"var(--mod-secondary-note-lum-scale)\";\r\n\tpublic static readonly modPrimaryNoteHue: string = \"var(--mod-primary-note-hue)\";\r\n\tpublic static readonly modPrimaryNoteHueScale: string = \"var(--mod-primary-note-hue-scale)\";\r\n\tpublic static readonly modPrimaryNoteSat: string = \"var(--mod-primary-note-sat)\";\r\n\tpublic static readonly modPrimaryNoteSatScale: string = \"var(--mod-primary-note-sat-scale)\";\r\n\tpublic static readonly modPrimaryNoteLum: string = \"var(--mod-primary-note-lum)\";\r\n\tpublic static readonly modPrimaryNoteLumScale: string = \"var(--mod-primary-note-lum-scale)\";\r\n\tpublic static readonly noiseSecondaryChannelHue: string = \"var(--noise-secondary-channel-hue)\";\r\n\tpublic static readonly noiseSecondaryChannelHueScale: string = \"var(--noise-secondary-channel-hue-scale)\";\r\n\tpublic static readonly noiseSecondaryChannelSat: string = \"var(--noise-secondary-channel-sat)\";\r\n\tpublic static readonly noiseSecondaryChannelSatScale: string = \"var(--noise-secondary-channel-sat-scale)\";\r\n\tpublic static readonly noiseSecondaryChannelLum: string = \"var(--noise-secondary-channel-lum)\";\r\n\tpublic static readonly noiseSecondaryChannelLumScale: string = \"var(--noise-secondary-channel-lum-scale)\";\r\n\tpublic static readonly noisePrimaryChannelHue: string = \"var(--noise-primary-channel-hue)\";\r\n\tpublic static readonly noisePrimaryChannelHueScale: string = \"var(--noise-primary-channel-hue-scale)\";\r\n\tpublic static readonly noisePrimaryChannelSat: string = \"var(--noise-primary-channel-sat)\";\r\n\tpublic static readonly noisePrimaryChannelSatScale: string = \"var(--noise-primary-channel-sat-scale)\";\r\n\tpublic static readonly noisePrimaryChannelLum: string = \"var(--noise-primary-channel-lum)\";\r\n\tpublic static readonly noisePrimaryChannelLumScale: string = \"var(--noise-primary-channel-lum-scale)\";\r\n\tpublic static readonly noiseSecondaryNoteHue: string = \"var(--noise-secondary-note-hue)\";\r\n\tpublic static readonly noiseSecondaryNoteHueScale: string = \"var(--noise-secondary-note-hue-scale)\";\r\n\tpublic static readonly noiseSecondaryNoteSat: string = \"var(--noise-secondary-note-sat)\";\r\n\tpublic static readonly noiseSecondaryNoteSatScale: string = \"var(--noise-secondary-note-sat-scale)\";\r\n\tpublic static readonly noiseSecondaryNoteLum: string = \"var(--noise-secondary-note-lum)\";\r\n\tpublic static readonly noiseSecondaryNoteLumScale: string = \"var(--noise-secondary-note-lum-scale)\";\r\n\tpublic static readonly noisePrimaryNoteHue: string = \"var(--noise-primary-note-hue)\";\r\n\tpublic static readonly noisePrimaryNoteHueScale: string = \"var(--noise-primary-note-hue-scale)\";\r\n\tpublic static readonly noisePrimaryNoteSat: string = \"var(--noise-primary-note-sat)\";\r\n\tpublic static readonly noisePrimaryNoteSatScale: string = \"var(--noise-primary-note-sat-scale)\";\r\n\tpublic static readonly noisePrimaryNoteLum: string = \"var(--noise-primary-note-lum)\";\r\n\tpublic static readonly noisePrimaryNoteLumScale: string = \"var(--noise-primary-note-lum-scale)\";\r\n\tpublic static readonly trackEditorBgPitch: string = \"var(--track-editor-bg-pitch)\";\r\n\tpublic static readonly trackEditorBgPitchDim: string = \"var(--track-editor-bg-pitch-dim)\";\r\n\tpublic static readonly trackEditorBgNoise: string = \"var(--track-editor-bg-noise)\";\r\n\tpublic static readonly trackEditorBgNoiseDim: string = \"var(--track-editor-bg-noise-dim)\";\r\n\tpublic static readonly trackEditorBgMod: string = \"var(--track-editor-bg-mod)\";\r\n\tpublic static readonly trackEditorBgModDim: string = \"var(--track-editor-bg-mod-dim)\";\r\n\tpublic static readonly multiplicativeModSlider: string = \"var(--multiplicative-mod-slider)\";\r\n\tpublic static readonly overwritingModSlider: string = \"var(--overwriting-mod-slider)\";\r\n\tpublic static readonly indicatorPrimary: string = \"var(--indicator-primary)\";\r\n\tpublic static readonly indicatorSecondary: string = \"var(--indicator-secondary)\";\r\n\tpublic static readonly select2OptGroup: string = \"var(--select2-opt-group)\";\r\n\tpublic static readonly inputBoxOutline: string = \"var(--input-box-outline)\";\r\n\tpublic static readonly muteButtonNormal: string = \"var(--mute-button-normal)\";\r\n\tpublic static readonly muteButtonMod: string = \"var(--mute-button-mod)\";\r\n\tpublic static readonly modLabelPrimary: string = \"var(--mod-label-primary)\";\r\n\tpublic static readonly modLabelSecondaryText: string = \"var(--mod-label-secondary-text)\";\r\n\tpublic static readonly modLabelPrimaryText: string = \"var(--mod-label-primary-text)\";\r\n\r\n\tpublic static readonly pitchChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"pitch1\", // cyan\r\n\t\t\tsecondaryChannel: \"var(--pitch1-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch1-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch1-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch1-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch2\", // yellow\r\n\t\t\tsecondaryChannel: \"var(--pitch2-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch2-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch2-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch2-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch3\", // orange\r\n\t\t\tsecondaryChannel: \"var(--pitch3-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch3-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch3-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch3-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch4\", // green\r\n\t\t\tsecondaryChannel: \"var(--pitch4-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch4-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch4-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch4-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch5\", // purple\r\n\t\t\tsecondaryChannel: \"var(--pitch5-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch5-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch5-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch5-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch6\", // blue\r\n\t\t\tsecondaryChannel: \"var(--pitch6-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch6-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch6-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch6-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch7\", // blue\r\n\t\t\tsecondaryChannel: \"var(--pitch7-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch7-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch7-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch7-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch8\", // blue\r\n\t\t\tsecondaryChannel: \"var(--pitch8-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch8-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch8-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch8-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch9\", // blue\r\n\t\t\tsecondaryChannel: \"var(--pitch9-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch9-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch9-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch9-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"pitch10\", // blue\r\n\t\t\tsecondaryChannel: \"var(--pitch10-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--pitch10-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--pitch10-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--pitch10-primary-note)\",\r\n\t\t},\r\n\t]);\r\n\tpublic static readonly noiseChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"noise1\", // gray\r\n\t\t\tsecondaryChannel: \"var(--noise1-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--noise1-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--noise1-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--noise1-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"noise2\", // brown\r\n\t\t\tsecondaryChannel: \"var(--noise2-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--noise2-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--noise2-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--noise2-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"noise3\", // azure\r\n\t\t\tsecondaryChannel: \"var(--noise3-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--noise3-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--noise3-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--noise3-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"noise4\",\r\n\t\t\tsecondaryChannel: \"var(--noise4-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--noise4-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--noise4-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--noise4-primary-note)\",\r\n\t\t},\r\n\t]);\r\n\tpublic static readonly modChannels: DictionaryArray<ChannelColors> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"mod1\",\r\n\t\t\tsecondaryChannel: \"var(--mod1-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--mod1-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--mod1-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--mod1-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"mod2\",\r\n\t\t\tsecondaryChannel: \"var(--mod2-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--mod2-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--mod2-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--mod2-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"mod3\",\r\n\t\t\tsecondaryChannel: \"var(--mod3-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--mod3-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--mod3-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--mod3-primary-note)\",\r\n\t\t}, {\r\n\t\t\tname: \"mod4\",\r\n\t\t\tsecondaryChannel: \"var(--mod4-secondary-channel)\",\r\n\t\t\tprimaryChannel: \"var(--mod4-primary-channel)\",\r\n\t\t\tsecondaryNote: \"var(--mod4-secondary-note)\",\r\n\t\t\tprimaryNote: \"var(--mod4-primary-note)\",\r\n\t\t},\r\n\t]);\r\n\r\n\tpublic static resetColors() {\r\n\t\tthis.colorLookup.clear();\r\n\t}\r\n\r\n\t// Same as below, but won't return var colors\r\n\tpublic static getComputedChannelColor(song: Song, channel: number): ChannelColors {\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"false\") {\r\n\t\t\tlet base: ChannelColors = ColorConfig.getChannelColor(song, channel);\r\n\t\t\t// Trim away \"var(...)\"\r\n\t\t\tvar regex = /\\(([^)]+)\\)/;\r\n\t\t\tlet newChannelSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryChannel) as RegExpExecArray)[1] as string);\r\n\t\t\tlet newChannelPrimary: string = ColorConfig.getComputed((regex.exec(base.primaryChannel) as RegExpExecArray)[1] as string);\r\n\t\t\tlet newNoteSecondary: string = ColorConfig.getComputed((regex.exec(base.secondaryNote) as RegExpExecArray)[1] as string);\r\n\t\t\tlet newNotePrimary: string = ColorConfig.getComputed((regex.exec(base.primaryNote) as RegExpExecArray)[1] as string);\r\n\t\t\treturn <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn ColorConfig.getChannelColor(song, channel);\r\n\t\t}\r\n\t};\r\n\r\n\tpublic static getChannelColor(song: Song, channel: number): ChannelColors {\r\n\t\tif (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"false\") {\r\n\t\t\t// Set colors, not defined by formula\r\n\t\t\tif (channel < song.pitchChannelCount) {\r\n\t\t\t\treturn ColorConfig.pitchChannels[channel % ColorConfig.pitchChannels.length];\r\n\t\t\t} else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\r\n\t\t\t\treturn ColorConfig.noiseChannels[(channel - song.pitchChannelCount) % ColorConfig.noiseChannels.length];\r\n\t\t\t} else {\r\n\t\t\t\treturn ColorConfig.modChannels[(channel - song.pitchChannelCount - song.noiseChannelCount) % ColorConfig.modChannels.length];\r\n\t\t\t}\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Determine if color is cached\r\n\t\t\tif (ColorConfig.colorLookup.has(channel)) {\r\n\t\t\t\treturn ColorConfig.colorLookup.get(channel) as ChannelColors;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t// Formulaic color definition\r\n\t\t\t\tif (channel < song.pitchChannelCount) {\r\n\t\t\t\t\t// Pitch formula\r\n\t\t\t\t\tconst pitchSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue\");\r\n\t\t\t\t\tconst pitchSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue-scale\");\r\n\t\t\t\t\tconst pitchSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat\");\r\n\t\t\t\t\tconst pitchSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat-scale\");\r\n\t\t\t\t\tconst pitchSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum\");\r\n\t\t\t\t\tconst pitchSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum-scale\");\r\n\t\t\t\t\tconst pitchPrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue\");\r\n\t\t\t\t\tconst pitchPrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue-scale\");\r\n\t\t\t\t\tconst pitchPrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat\");\r\n\t\t\t\t\tconst pitchPrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat-scale\");\r\n\t\t\t\t\tconst pitchPrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum\");\r\n\t\t\t\t\tconst pitchPrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum-scale\");\r\n\t\t\t\t\tconst pitchSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue\");\r\n\t\t\t\t\tconst pitchSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue-scale\");\r\n\t\t\t\t\tconst pitchSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat\");\r\n\t\t\t\t\tconst pitchSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat-scale\");\r\n\t\t\t\t\tconst pitchSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum\");\r\n\t\t\t\t\tconst pitchSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum-scale\");\r\n\t\t\t\t\tconst pitchPrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue\");\r\n\t\t\t\t\tconst pitchPrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue-scale\");\r\n\t\t\t\t\tconst pitchPrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat\");\r\n\t\t\t\t\tconst pitchPrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat-scale\");\r\n\t\t\t\t\tconst pitchPrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum\");\r\n\t\t\t\t\tconst pitchPrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum-scale\");\r\n\r\n\t\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((+pitchSecondaryChannelHue + (channel * +pitchSecondaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+pitchSecondaryChannelSat * (1 - (+pitchSecondaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n\t\t\t\t\t\t+ (+pitchSecondaryChannelLum * (1 - (+pitchSecondaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((+pitchPrimaryChannelHue + (channel * +pitchPrimaryChannelHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+pitchPrimaryChannelSat * (1 - (+pitchPrimaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n\t\t\t\t\t\t+ (+pitchPrimaryChannelLum * (1 - (+pitchPrimaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((+pitchSecondaryNoteHue + (channel * +pitchSecondaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+pitchSecondaryNoteSat * (1 - (+pitchSecondaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n\t\t\t\t\t\t+ (+pitchSecondaryNoteLum * (1 - (+pitchSecondaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((+pitchPrimaryNoteHue + (channel * +pitchPrimaryNoteHueScale / Config.pitchChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+pitchPrimaryNoteSat * (1 - (+pitchPrimaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\r\n\t\t\t\t\t\t+ (+pitchPrimaryNoteLum * (1 - (+pitchPrimaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\r\n\r\n\t\t\t\t\tlet newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n\t\t\t\t\tColorConfig.colorLookup.set(channel, newChannelColors);\r\n\t\t\t\t\treturn newChannelColors;\r\n\r\n\t\t\t\t}\r\n\t\t\t\telse if (channel < song.pitchChannelCount + song.noiseChannelCount) {\r\n\t\t\t\t\t// Noise formula\r\n\t\t\t\t\tconst noiseSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue\");\r\n\t\t\t\t\tconst noiseSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue-scale\");\r\n\t\t\t\t\tconst noiseSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat\");\r\n\t\t\t\t\tconst noiseSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat-scale\");\r\n\t\t\t\t\tconst noiseSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum\");\r\n\t\t\t\t\tconst noiseSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum-scale\");\r\n\t\t\t\t\tconst noisePrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue\");\r\n\t\t\t\t\tconst noisePrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue-scale\");\r\n\t\t\t\t\tconst noisePrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat\");\r\n\t\t\t\t\tconst noisePrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat-scale\");\r\n\t\t\t\t\tconst noisePrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum\");\r\n\t\t\t\t\tconst noisePrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum-scale\");\r\n\t\t\t\t\tconst noiseSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue\");\r\n\t\t\t\t\tconst noiseSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue-scale\");\r\n\t\t\t\t\tconst noiseSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat\");\r\n\t\t\t\t\tconst noiseSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat-scale\");\r\n\t\t\t\t\tconst noiseSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum\");\r\n\t\t\t\t\tconst noiseSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum-scale\");\r\n\t\t\t\t\tconst noisePrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue\");\r\n\t\t\t\t\tconst noisePrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue-scale\");\r\n\t\t\t\t\tconst noisePrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat\");\r\n\t\t\t\t\tconst noisePrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat-scale\");\r\n\t\t\t\t\tconst noisePrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum\");\r\n\t\t\t\t\tconst noisePrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum-scale\");\r\n\r\n\t\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((+noiseSecondaryChannelHue + (((channel - song.pitchChannelCount) * +noiseSecondaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+noiseSecondaryChannelSat + channel * +noiseSecondaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+noiseSecondaryChannelLum + channel * +noiseSecondaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((+noisePrimaryChannelHue + (((channel - song.pitchChannelCount) * +noisePrimaryChannelHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+noisePrimaryChannelSat + channel * +noisePrimaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+noisePrimaryChannelLum + channel * +noisePrimaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((+noiseSecondaryNoteHue + (((channel - song.pitchChannelCount) * +noiseSecondaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+noiseSecondaryNoteSat + channel * +noiseSecondaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+noiseSecondaryNoteLum + channel * +noiseSecondaryNoteLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((+noisePrimaryNoteHue + (((channel - song.pitchChannelCount) * +noisePrimaryNoteHueScale) / Config.noiseChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+noisePrimaryNoteSat + channel * +noisePrimaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+noisePrimaryNoteLum + channel * +noisePrimaryNoteLumScale) + \"%)\";\r\n\r\n\t\t\t\t\tlet newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n\t\t\t\t\tColorConfig.colorLookup.set(channel, newChannelColors);\r\n\t\t\t\t\treturn newChannelColors;\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t// Mod formula\r\n\t\t\t\t\tconst modSecondaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue\");\r\n\t\t\t\t\tconst modSecondaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue-scale\");\r\n\t\t\t\t\tconst modSecondaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat\");\r\n\t\t\t\t\tconst modSecondaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat-scale\");\r\n\t\t\t\t\tconst modSecondaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum\");\r\n\t\t\t\t\tconst modSecondaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum-scale\");\r\n\t\t\t\t\tconst modPrimaryChannelHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue\");\r\n\t\t\t\t\tconst modPrimaryChannelHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue-scale\");\r\n\t\t\t\t\tconst modPrimaryChannelSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat\");\r\n\t\t\t\t\tconst modPrimaryChannelSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat-scale\");\r\n\t\t\t\t\tconst modPrimaryChannelLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum\");\r\n\t\t\t\t\tconst modPrimaryChannelLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum-scale\");\r\n\t\t\t\t\tconst modSecondaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue\");\r\n\t\t\t\t\tconst modSecondaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue-scale\");\r\n\t\t\t\t\tconst modSecondaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat\");\r\n\t\t\t\t\tconst modSecondaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat-scale\");\r\n\t\t\t\t\tconst modSecondaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum\");\r\n\t\t\t\t\tconst modSecondaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum-scale\");\r\n\t\t\t\t\tconst modPrimaryNoteHue: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue\");\r\n\t\t\t\t\tconst modPrimaryNoteHueScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue-scale\");\r\n\t\t\t\t\tconst modPrimaryNoteSat: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat\");\r\n\t\t\t\t\tconst modPrimaryNoteSatScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat-scale\");\r\n\t\t\t\t\tconst modPrimaryNoteLum: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum\");\r\n\t\t\t\t\tconst modPrimaryNoteLumScale: number = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum-scale\");\r\n\r\n\t\t\t\t\tlet newChannelSecondary: string = \"hsl(\" + ((+modSecondaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modSecondaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+modSecondaryChannelSat + channel * +modSecondaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+modSecondaryChannelLum + channel * +modSecondaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newChannelPrimary: string = \"hsl(\" + ((+modPrimaryChannelHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modPrimaryChannelHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+modPrimaryChannelSat + channel * +modPrimaryChannelSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+modPrimaryChannelLum + channel * +modPrimaryChannelLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNoteSecondary: string = \"hsl(\" + ((+modSecondaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modSecondaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+modSecondaryNoteSat + channel * +modSecondaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+modSecondaryNoteLum + channel * +modSecondaryNoteLumScale) + \"%)\";\r\n\t\t\t\t\tlet newNotePrimary: string = \"hsl(\" + ((+modPrimaryNoteHue + (((channel - song.pitchChannelCount - song.noiseChannelCount) * +modPrimaryNoteHueScale) / Config.modChannelCountMax) * 256) % 256) + \",\"\r\n\t\t\t\t\t\t+ (+modPrimaryNoteSat + channel * +modPrimaryNoteSatScale) + \"%,\"\r\n\t\t\t\t\t\t+ (+modPrimaryNoteLum + channel * +modPrimaryNoteLumScale) + \"%)\";\r\n\r\n\t\t\t\t\tlet newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\r\n\t\t\t\t\tColorConfig.colorLookup.set(channel, newChannelColors);\r\n\t\t\t\t\treturn newChannelColors;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate static readonly _styleElement: HTMLStyleElement = document.head.appendChild(HTML.style({ type: \"text/css\" }));\r\n\r\n\tpublic static setTheme(name: string): void {\r\n\t\tthis._styleElement.textContent = this.themes[name];\r\n\t\tconst themeColor = <HTMLMetaElement>document.querySelector(\"meta[name='theme-color']\");\r\n\t\tif (themeColor != null) {\r\n\t\t\tthemeColor.setAttribute(\"content\", getComputedStyle(document.documentElement).getPropertyValue('--ui-widget-background'));\r\n\t\t}\r\n\r\n\t\tthis.resetColors();\r\n\t}\r\n\r\n\tpublic static getComputed(name: string): string {\r\n\t\treturn getComputedStyle(this._styleElement).getPropertyValue(name);\r\n\t}\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap } from \"../synth/SynthConfig\";\r\n\r\n//namespace beepbox {\r\nexport interface PresetCategory extends BeepBoxOption {\r\n\treadonly presets: DictionaryArray<Preset>;\r\n}\r\n\r\nexport interface Preset extends BeepBoxOption {\r\n\treadonly isNoise?: boolean;\r\n\treadonly isMod?: boolean;\r\n\treadonly generalMidi?: boolean;\r\n\treadonly midiProgram?: number;\r\n\treadonly midiSubharmonicOctaves?: number;\r\n\treadonly customType?: InstrumentType;\r\n\treadonly settings?: any;\r\n}\r\n\r\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\nexport function prettyNumber(value: number): string {\r\n\treturn value.toFixed(2).replace(/\\.?0*$/, \"\");\r\n}\r\n\r\nexport class EditorConfig {\r\n\tpublic static readonly version: string = \"2.3\"; // Not using patch versions in display right now, maybe someday.\r\n\tpublic static readonly versionDisplayName: string = \"JummBox \" + EditorConfig.version;\r\n\r\n\tpublic static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"chip wave\", customType: InstrumentType.chip },\r\n\t\t\t\t{ name: \"FM (expert)\", customType: InstrumentType.fm },\r\n\t\t\t\t{ name: \"basic noise\", customType: InstrumentType.noise },\r\n\t\t\t\t{ name: \"spectrum\", customType: InstrumentType.spectrum },\r\n\t\t\t\t{ name: \"drumset\", customType: InstrumentType.drumset },\r\n\t\t\t\t{ name: \"harmonics\", customType: InstrumentType.harmonics },\r\n\t\t\t\t{ name: \"pulse width\", customType: InstrumentType.pwm },\r\n\t\t\t\t{ name: \"custom chip\", customType: InstrumentType.customChipWave },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"triangle\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\r\n\t\t\t\t{ name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\r\n\t\t\t\t{ name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\r\n\t\t\t\t{ name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\r\n\t\t\t\t{ name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\r\n\t\t\t\t{ name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57] } },\r\n\t\t\t\t{ name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 86, 86, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"wave\": \"1/8 pulse\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"interval\": \"honky tonk\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 43, 43, 43, 43, 43, 29, 43, 43, 43, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"interval\": \"shimmer\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0] } },\r\n\t\t\t\t{ name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 14, 14, 14, 14, 14, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14] } },\r\n\t\t\t\t{ name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\r\n\t\t\t\t{ name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }, { \"frequency\": \"~2×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 2, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 1\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"pulseWidth\": 18, \"pulseEnvelope\": \"punch\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"distorted synth 2\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 3\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 4\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 50, \"pulseEnvelope\": \"swell 1\", \"vibrato\": \"delayed\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"transition\": \"slide\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t\t{ name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14] } },\r\n\t\t\t\t{ name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0] } },\r\n\t\t\t\t{ name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"flare 3\" }] } },\r\n\t\t\t\t{ name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"swell 2\" }, { \"frequency\": \"11×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 3\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"octave\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"tremolo1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 5, \"envelope\": \"twang 3\" }, { \"frequency\": \"11×\", \"amplitude\": 8, \"envelope\": \"tremolo5\" }] } },\r\n\t\t\t\t{ name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"tremolo1\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\r\n\t\t\t\t{ name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"flare 1\" }, { \"frequency\": \"3×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }] } },\r\n\t\t\t\t{ name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 3, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [0, 0, 0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0] } },\r\n\t\t\t\t{ name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 57, \"filterEnvelope\": \"swell 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\r\n\t\t\t\t{ name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"interval\": \"hum\", \"vibrato\": \"heavy\", \"harmonics\": [0, 0, 14, 100, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"tremolo1\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\r\n\t\t\t\t{ name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 4, \"pulseEnvelope\": \"tremolo6\", \"vibrato\": \"shaky\" } },\r\n\t\t\t\t{ name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\r\n\t\t\t\t{ name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\r\n\t\t\t\t{ name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"heavy\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t]);\r\n\r\n\tpublic static valueToPreset(presetValue: number): Preset | null {\r\n\t\tconst categoryIndex: number = presetValue >> 6;\r\n\t\tconst presetIndex: number = presetValue & 0x3F;\r\n\t\treturn EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\r\n\t}\r\n\tpublic static midiProgramToPresetValue(program: number): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic static nameToPresetValue(presetName: string): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\ninterface NumberArray {\r\n\tlength: number;\r\n\t[index: number]: number;\r\n}\r\n\r\n// A basic FFT operation scales the overall magnitude of elements by the\r\n// square root of the length of the array, √N. Performing a forward FFT and\r\n// then an inverse FFT results in the original array, but multiplied by N.\r\n// This helper function can be used to compensate for that. \r\nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tarray[i] *= factor;\r\n\t}\r\n}\r\n\r\nfunction isPowerOf2(n: number): boolean {\r\n\treturn !!n && !(n & (n - 1));\r\n}\r\n\r\nfunction countBits(n: number): number {\r\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\treturn Math.round(Math.log(n) / Math.log(2));\r\n}\r\n\r\n// Rearranges the elements of the array, swapping the element at an index\r\n// with an element at an index that is the bitwise reverse of the first\r\n// index in base 2. Useful for computing the FFT.\r\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\r\n\tconst bitCount: number = countBits(fullArrayLength);\r\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\tconst finalShift: number = 16 - bitCount;\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\tlet j: number;\r\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\tj = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;\r\n\t\tif (j > i) {\r\n\t\t\tlet temp: number = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Provided for educational purposes. Easier to read than\r\n// fastFourierTransform(), but computes the same result.\r\n// Takes two parallel arrays representing the real and imaginary elements,\r\n// respectively, and returns an array containing two new arrays, which\r\n// contain the complex result of the transform.\r\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\tconst realOut: number[] = [];\r\n\tconst imagOut: number[] = [];\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\trealOut[i] = 0.0;\r\n\t\timagOut[i] = 0.0;\r\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t}\r\n\t}\r\n\treturn [realOut, imagOut];\r\n}\r\n\r\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n// input real and imaginary arrays. Can be used for both forward and inverse\r\n// transforms: swap the order of the arguments for the inverse.\r\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\r\n\treverseIndexBits(realArray, fullArrayLength);\r\n\treverseIndexBits(imagArray, fullArrayLength);\r\n\r\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\tconst startIndex1: number = startIndex + 1;\r\n\t\tconst startIndex2: number = startIndex + 2;\r\n\t\tconst startIndex3: number = startIndex + 3;\r\n\t\tconst real0: number = realArray[startIndex];\r\n\t\tconst real1: number = realArray[startIndex1];\r\n\t\tconst real2: number = realArray[startIndex2];\r\n\t\tconst real3: number = realArray[startIndex3];\r\n\t\tconst imag0: number = imagArray[startIndex];\r\n\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\tconst realTemp0: number = real0 + real1;\r\n\t\tconst realTemp1: number = real0 - real1;\r\n\t\tconst realTemp2: number = real2 + real3;\r\n\t\tconst realTemp3: number = real2 - real3;\r\n\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\trealArray[startIndex] = realTemp0 + realTemp2;\r\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\timagArray[startIndex] = imagTemp0 + imagTemp2;\r\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t}\r\n\r\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\tconst halfLength: number = stride >>> 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tlet c: number = 1.0;\r\n\t\t\tlet s: number = 0.0;\r\n\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the Fourier transform from an array of real-valued time-domain\r\n// samples. The output is specially formatted for space efficieny: elements\r\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n// descending frequency. Overwrites the input array.\r\nexport function forwardRealFourierTransform(array: NumberArray): void {\r\n\tconst fullArrayLength: number = array.length;\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n\r\n\t// First and second pass.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\t// no imaginary elements yet since the input is fully real.\r\n\t\tconst tempA: number = real0 + real1;\r\n\t\tconst tempB: number = real2 + real3;\r\n\t\tarray[index] = tempA + tempB;\r\n\t\tarray[index1] = real0 - real1;\r\n\t\tarray[index2] = tempA - tempB;\r\n\t\tarray[index3] = real2 - real3;\r\n\t}\r\n\r\n\t// Third pass.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst imag3: number = array[index3];\r\n\t\tconst real4: number = array[index4];\r\n\t\tconst real5: number = array[index5];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\tarray[index] = real0 + real4;\r\n\t\tarray[index1] = real1 + tempA;\r\n\t\tarray[index3] = real1 - tempA;\r\n\t\tarray[index4] = real0 - real4;\r\n\t\tarray[index5] = tempB - imag3;\r\n\t\tarray[index7] = tempB + imag3;\r\n\t}\r\n\r\n\t// Handle remaining passes.\r\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\tarray[indexB0] = -imag0 - tempB;\r\n\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the inverse Fourier transform from a specially formatted array of\r\n// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n// the corresponding complex elements, representing cosine wave amplitudes in\r\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n// imaginary values, representing sine wave amplitudes in descending frequency.\r\n// Generates real-valued time-domain samples. Overwrites the input array.\r\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\t// Perform all but the last few passes in reverse.\r\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\tarray[midIndexA] *= 2;\r\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\tarray[midIndexB] *= 2;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// Commented out this block (and compensated with an extra pass above)\r\n\t// because it's slower in my testing so far.\r\n\t// Pass with stride 8.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index6: number = index + 6;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\tconst imag4: number = array[index4];\r\n\t\tconst imag5: number = array[index5];\r\n\t\tconst imag6: number = array[index6];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = real1 - real3;\r\n\t\tconst tempB: number = imag5 + imag7;\r\n\t\tarray[index ] = real0 + imag4;\r\n\t\tarray[index1] = real1 + real3;\r\n\t\tarray[index2] = real2 * 2;\r\n\t\tarray[index3] = imag7 - imag5;\r\n\t\tarray[index4] = real0 - imag4;\r\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\tarray[index6] = imag6 * 2;\r\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t}\r\n\t*/\r\n\t// The final passes with strides 4 and 2, combined into one loop.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1] * 2;\r\n\t\tconst imag2: number = array[index2];\r\n\t\tconst imag3: number = array[index3] * 2;\r\n\t\tconst tempA: number = real0 + imag2;\r\n\t\tconst tempB: number = real0 - imag2;\r\n\t\tarray[index] = tempA + real1;\r\n\t\tarray[index1] = tempA - real1;\r\n\t\tarray[index2] = tempB + imag3;\r\n\t\tarray[index3] = tempB - imag3;\r\n\t}\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}\r\n//}\r\n\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex } from \"./SynthConfig\";\r\nimport { EditorConfig } from \"../editor/EditorConfig\";\r\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\r\nimport { Deque } from \"./Deque\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        AudioContext: any;\r\n        webkitAudioContext: any;\r\n    }\r\n}\r\n\r\n//namespace beepbox {\r\n// For performance debugging:\r\n//let samplesAccumulated: number = 0;\r\n//let samplePerformance: number = 0;\r\n\r\nconst enum CharCode {\r\n    SPACE = 32,\r\n    HASH = 35,\r\n    PERCENT = 37,\r\n    AMPERSAND = 38,\r\n    PLUS = 43,\r\n    DASH = 45,\r\n    DOT = 46,\r\n    NUM_0 = 48,\r\n    NUM_1 = 49,\r\n    NUM_2 = 50,\r\n    NUM_3 = 51,\r\n    NUM_4 = 52,\r\n    NUM_5 = 53,\r\n    NUM_6 = 54,\r\n    NUM_7 = 55,\r\n    NUM_8 = 56,\r\n    NUM_9 = 57,\r\n    EQUALS = 61,\r\n    A = 65,\r\n    B = 66,\r\n    C = 67,\r\n    D = 68,\r\n    E = 69,\r\n    F = 70,\r\n    G = 71,\r\n    H = 72,\r\n    I = 73,\r\n    J = 74,\r\n    K = 75,\r\n    L = 76,\r\n    M = 77,\r\n    N = 78,\r\n    O = 79,\r\n    P = 80,\r\n    Q = 81,\r\n    R = 82,\r\n    S = 83,\r\n    T = 84,\r\n    U = 85,\r\n    V = 86,\r\n    W = 87,\r\n    X = 88,\r\n    Y = 89,\r\n    Z = 90,\r\n    UNDERSCORE = 95,\r\n    a = 97,\r\n    b = 98,\r\n    c = 99,\r\n    d = 100,\r\n    e = 101,\r\n    f = 102,\r\n    g = 103,\r\n    h = 104,\r\n    i = 105,\r\n    j = 106,\r\n    k = 107,\r\n    l = 108,\r\n    m = 109,\r\n    n = 110,\r\n    o = 111,\r\n    p = 112,\r\n    q = 113,\r\n    r = 114,\r\n    s = 115,\r\n    t = 116,\r\n    u = 117,\r\n    v = 118,\r\n    w = 119,\r\n    x = 120,\r\n    y = 121,\r\n    z = 122,\r\n    LEFT_CURLY_BRACE = 123,\r\n    RIGHT_CURLY_BRACE = 125,\r\n}\r\n\r\nconst enum SongTagCode {\r\n    beatCount = CharCode.a,\r\n    bars = CharCode.b,\r\n    vibrato = CharCode.c,\r\n    transition = CharCode.d,\r\n    loopEnd = CharCode.e,\r\n    filterCutoff = CharCode.f,\r\n    barCount = CharCode.g,\r\n    interval = CharCode.h,\r\n    instrumentCount = CharCode.i,\r\n    patternCount = CharCode.j,\r\n    key = CharCode.k,\r\n    loopStart = CharCode.l,\r\n    reverb = CharCode.m,\r\n    channelCount = CharCode.n,\r\n    channelOctave = CharCode.o,\r\n    patterns = CharCode.p,\r\n    effects = CharCode.q,\r\n    rhythm = CharCode.r,\r\n    scale = CharCode.s,\r\n    tempo = CharCode.t,\r\n    preset = CharCode.u,\r\n    volume = CharCode.v,\r\n    wave = CharCode.w,\r\n\r\n    filterResonance = CharCode.y,\r\n    filterEnvelope = CharCode.z,\r\n    algorithm = CharCode.A,\r\n    feedbackAmplitude = CharCode.B,\r\n    chord = CharCode.C,\r\n    detune = CharCode.D,\r\n    operatorEnvelopes = CharCode.E,\r\n    feedbackType = CharCode.F,\r\n    arpeggioSpeed = CharCode.G,\r\n    harmonics = CharCode.H,\r\n\r\n    squareDuty = CharCode.K,\r\n    panning = CharCode.L,\r\n    customChipWave = CharCode.M,\r\n    songTitle = CharCode.N,\r\n    limiterSettings = CharCode.O,\r\n    operatorAmplitudes = CharCode.P,\r\n    operatorFrequencies = CharCode.Q,\r\n\r\n    spectrum = CharCode.S,\r\n    startInstrument = CharCode.T,\r\n    channelNames = CharCode.U,\r\n    feedbackEnvelope = CharCode.V,\r\n    pulseWidth = CharCode.W,\r\n}\r\n\r\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\r\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\r\nclass BitFieldReader {\r\n    private _bits: number[] = [];\r\n    private _readIndex: number = 0;\r\n\r\n    constructor(source: string, startIndex: number, stopIndex: number) {\r\n        for (let i: number = startIndex; i < stopIndex; i++) {\r\n            const value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n            this._bits.push((value >> 5) & 0x1);\r\n            this._bits.push((value >> 4) & 0x1);\r\n            this._bits.push((value >> 3) & 0x1);\r\n            this._bits.push((value >> 2) & 0x1);\r\n            this._bits.push((value >> 1) & 0x1);\r\n            this._bits.push(value & 0x1);\r\n        }\r\n    }\r\n\r\n    public read(bitCount: number): number {\r\n        let result: number = 0;\r\n        while (bitCount > 0) {\r\n            result = result << 1;\r\n            result += this._bits[this._readIndex++];\r\n            bitCount--;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readLongTail(minValue: number, minBits: number): number {\r\n        let result: number = minValue;\r\n        let numBits: number = minBits;\r\n        while (this._bits[this._readIndex++]) {\r\n            result += 1 << numBits;\r\n            numBits++;\r\n        }\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            if (this._bits[this._readIndex++]) {\r\n                result += 1 << numBits;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readPartDuration(): number {\r\n        return this.readLongTail(1, 3);\r\n    }\r\n\r\n    public readLegacyPartDuration(): number {\r\n        return this.readLongTail(1, 2);\r\n    }\r\n\r\n    public readPinCount(): number {\r\n        return this.readLongTail(1, 0);\r\n    }\r\n\r\n    public readPitchInterval(): number {\r\n        if (this.read(1)) {\r\n            return -this.readLongTail(1, 3);\r\n        } else {\r\n            return this.readLongTail(1, 3);\r\n        }\r\n    }\r\n}\r\n\r\nclass BitFieldWriter {\r\n    private _index: number = 0;\r\n    private _bits: number[] = [];\r\n\r\n    public clear() {\r\n        this._index = 0;\r\n    }\r\n\r\n    public write(bitCount: number, value: number): void {\r\n        bitCount--;\r\n        while (bitCount >= 0) {\r\n            this._bits[this._index++] = (value >>> bitCount) & 1;\r\n            bitCount--;\r\n        }\r\n    }\r\n\r\n    public writeLongTail(minValue: number, minBits: number, value: number): void {\r\n        if (value < minValue) throw new Error(\"value out of bounds\");\r\n        value -= minValue;\r\n        let numBits: number = minBits;\r\n        while (value >= (1 << numBits)) {\r\n            this._bits[this._index++] = 1;\r\n            value -= 1 << numBits;\r\n            numBits++;\r\n        }\r\n        this._bits[this._index++] = 0;\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            this._bits[this._index++] = (value >>> numBits) & 1;\r\n        }\r\n    }\r\n\r\n    public writePartDuration(value: number): void {\r\n        this.writeLongTail(1, 3, value);\r\n    }\r\n\r\n    public writePinCount(value: number): void {\r\n        this.writeLongTail(1, 0, value);\r\n    }\r\n\r\n    public writePitchInterval(value: number): void {\r\n        if (value < 0) {\r\n            this.write(1, 1); // sign\r\n            this.writeLongTail(1, 3, -value);\r\n        } else {\r\n            this.write(1, 0); // sign\r\n            this.writeLongTail(1, 3, value);\r\n        }\r\n    }\r\n\r\n    public concat(other: BitFieldWriter): void {\r\n        for (let i: number = 0; i < other._index; i++) {\r\n            this._bits[this._index++] = other._bits[i];\r\n        }\r\n    }\r\n\r\n    public encodeBase64(buffer: number[]): number[] {\r\n\r\n        for (let i: number = 0; i < this._index; i += 6) {\r\n            const value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\r\n            buffer.push(base64IntToCharCode[value]);\r\n        }\r\n        return buffer;\r\n    }\r\n\r\n    public lengthBase64(): number {\r\n        return Math.ceil(this._index / 6);\r\n    }\r\n}\r\n\r\nexport interface NotePin {\r\n    interval: number;\r\n    time: number;\r\n    volume: number;\r\n}\r\n\r\nexport function makeNotePin(interval: number, time: number, volume: number): NotePin {\r\n    return { interval: interval, time: time, volume: volume };\r\n}\r\n\r\nfunction clamp(min: number, max: number, val: number): number {\r\n    max = max - 1;\r\n    if (val <= max) {\r\n        if (val >= min) return val;\r\n        else return min;\r\n    } else {\r\n        return max;\r\n    }\r\n}\r\n\r\nfunction validateRange(min: number, max: number, val: number): number {\r\n    if (min <= val && val <= max) return val;\r\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\r\n}\r\n\r\nexport class Note {\r\n    public pitches: number[];\r\n    public pins: NotePin[];\r\n    public start: number;\r\n    public end: number;\r\n\r\n    public constructor(pitch: number, start: number, end: number, volume: number, fadeout: boolean = false) {\r\n        this.pitches = [pitch];\r\n        this.pins = [makeNotePin(0, 0, volume), makeNotePin(0, end - start, fadeout ? 0 : volume)];\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n\r\n    public pickMainInterval(): number {\r\n        let longestFlatIntervalDuration: number = 0;\r\n        let mainInterval: number = 0;\r\n        for (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\r\n            const pinA: NotePin = this.pins[pinIndex - 1];\r\n            const pinB: NotePin = this.pins[pinIndex];\r\n            if (pinA.interval == pinB.interval) {\r\n                const duration: number = pinB.time - pinA.time;\r\n                if (longestFlatIntervalDuration < duration) {\r\n                    longestFlatIntervalDuration = duration;\r\n                    mainInterval = pinA.interval;\r\n                }\r\n            }\r\n        }\r\n        if (longestFlatIntervalDuration == 0) {\r\n            let loudestVolume: number = 0;\r\n            for (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\r\n                const pin: NotePin = this.pins[pinIndex];\r\n                if (loudestVolume < pin.volume) {\r\n                    loudestVolume = pin.volume;\r\n                    mainInterval = pin.interval;\r\n                }\r\n            }\r\n        }\r\n        return mainInterval;\r\n    }\r\n\r\n    public clone(): Note {\r\n        const newNote: Note = new Note(-1, this.start, this.end, 6);\r\n        newNote.pitches = this.pitches.concat();\r\n        newNote.pins = [];\r\n        for (const pin of this.pins) {\r\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.volume));\r\n        }\r\n        return newNote;\r\n    }\r\n}\r\n\r\nexport class Pattern {\r\n    public notes: Note[] = [];\r\n    public instrument: number = 0;\r\n\r\n    public cloneNotes(): Note[] {\r\n        const result: Note[] = [];\r\n        for (const note of this.notes) {\r\n            result.push(note.clone());\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.notes.length = 0;\r\n        this.instrument = 0;\r\n    }\r\n}\r\n\r\nexport class Operator {\r\n    public frequency: number = 0;\r\n    public amplitude: number = 0;\r\n    public envelope: number = 0;\r\n\r\n    constructor(index: number) {\r\n        this.reset(index);\r\n    }\r\n\r\n    public reset(index: number): void {\r\n        this.frequency = 0;\r\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n        this.envelope = (index == 0) ? 0 : 1;\r\n    }\r\n\r\n    public copy(other: Operator): void {\r\n        this.frequency = other.frequency;\r\n        this.amplitude = other.amplitude;\r\n        this.envelope = other.envelope;\r\n    }\r\n}\r\n\r\nexport class SpectrumWave {\r\n    public spectrum: number[] = [];\r\n    private _wave: Float32Array | null = null;\r\n    private _waveIsReady: boolean = false;\r\n\r\n    constructor(isNoiseChannel: boolean) {\r\n        this.reset(isNoiseChannel);\r\n    }\r\n\r\n    public reset(isNoiseChannel: boolean): void {\r\n        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n            if (isNoiseChannel) {\r\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\r\n            } else {\r\n                const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\r\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\r\n            }\r\n        }\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public getCustomWave(lowestOctave: number): Float32Array {\r\n        if (!this._waveIsReady || this._wave == null) {\r\n            let waveLength: number = Config.chipNoiseLength;\r\n\r\n            if (this._wave == null || this._wave.length != waveLength + 1) {\r\n                this._wave = new Float32Array(waveLength + 1);\r\n            }\r\n            const wave: Float32Array = this._wave;\r\n\r\n            for (let i: number = 0; i < waveLength; i++) {\r\n                wave[i] = 0;\r\n            }\r\n\r\n            const highestOctave: number = 14;\r\n            const falloffRatio: number = 0.25;\r\n            // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\r\n            const pitchTweak: number[] = [0, 1 / 7, Math.log(5 / 4) / Math.LN2, 3 / 7, Math.log(3 / 2) / Math.LN2, 5 / 7, 6 / 7];\r\n            function controlPointToOctave(point: number): number {\r\n                return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\r\n            }\r\n\r\n            let combinedAmplitude: number = 1;\r\n            for (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\r\n                const value1: number = (i <= 0) ? 0 : this.spectrum[i - 1];\r\n                const value2: number = (i >= Config.spectrumControlPoints) ? this.spectrum[Config.spectrumControlPoints - 1] : this.spectrum[i];\r\n                const octave1: number = controlPointToOctave(i - 1);\r\n                let octave2: number = controlPointToOctave(i);\r\n                if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\r\n                if (value1 == 0 && value2 == 0) continue;\r\n\r\n                combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\r\n            }\r\n            if (this.spectrum[Config.spectrumControlPoints - 1] > 0) {\r\n                combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, this.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\r\n            }\r\n\r\n            inverseRealFourierTransform(wave, waveLength);\r\n            scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\r\n\r\n            // Duplicate the first sample at the end for easier wrap-around interpolation.\r\n            wave[waveLength] = wave[0];\r\n\r\n            this._waveIsReady = true;\r\n        }\r\n        return this._wave;\r\n    }\r\n}\r\n\r\nexport class HarmonicsWave {\r\n    public harmonics: number[] = [];\r\n    private _wave: Float32Array | null = null;\r\n    private _waveIsReady: boolean = false;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n            this.harmonics[i] = 0;\r\n        }\r\n        this.harmonics[0] = Config.harmonicsMax;\r\n        this.harmonics[3] = Config.harmonicsMax;\r\n        this.harmonics[6] = Config.harmonicsMax;\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public getCustomWave(): Float32Array {\r\n        if (!this._waveIsReady || this._wave == null) {\r\n            let waveLength: number = Config.harmonicsWavelength;\r\n            const retroWave: Float32Array = getDrumWave(0);\r\n\r\n            if (this._wave == null || this._wave.length != waveLength + 1) {\r\n                this._wave = new Float32Array(waveLength + 1);\r\n            }\r\n            const wave: Float32Array = this._wave;\r\n\r\n            for (let i: number = 0; i < waveLength; i++) {\r\n                wave[i] = 0;\r\n            }\r\n\r\n            const overallSlope: number = -0.25;\r\n            let combinedControlPointAmplitude: number = 1;\r\n\r\n            for (let harmonicIndex: number = 0; harmonicIndex < Config.harmonicsRendered; harmonicIndex++) {\r\n                const harmonicFreq: number = harmonicIndex + 1;\r\n                let controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? this.harmonics[harmonicIndex] : this.harmonics[Config.harmonicsControlPoints - 1];\r\n                if (harmonicIndex >= Config.harmonicsControlPoints) {\r\n                    controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (Config.harmonicsRendered - Config.harmonicsControlPoints);\r\n                }\r\n                const normalizedValue: number = controlValue / Config.harmonicsMax;\r\n                let amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\r\n                if (harmonicIndex < Config.harmonicsControlPoints) {\r\n                    combinedControlPointAmplitude += amplitude;\r\n                }\r\n                amplitude *= Math.pow(harmonicFreq, overallSlope);\r\n\r\n                // Multiple all the sine wave amplitudes by 1 or -1 based on the LFSR\r\n                // retro wave (effectively random) to avoid egregiously tall spikes.\r\n                amplitude *= retroWave[harmonicIndex + 589];\r\n\r\n                wave[waveLength - harmonicFreq] = amplitude;\r\n            }\r\n\r\n            inverseRealFourierTransform(wave, waveLength);\r\n\r\n            // Limit the maximum wave amplitude.\r\n            const mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\r\n\r\n            // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n            let cumulative: number = 0;\r\n            let wavePrev: number = 0;\r\n            for (let i: number = 0; i < wave.length; i++) {\r\n                cumulative += wavePrev;\r\n                wavePrev = wave[i] * mult;\r\n                wave[i] = cumulative;\r\n            }\r\n            // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n            wave[waveLength] = wave[0];\r\n\r\n            this._waveIsReady = true;\r\n        }\r\n        return this._wave;\r\n    }\r\n}\r\n\r\nexport class Instrument {\r\n    public type: InstrumentType = InstrumentType.chip;\r\n    public preset: number = 0;\r\n    public chipWave: number = 2;\r\n    public chipNoise: number = 1;\r\n    public filterCutoff: number = 12;\r\n    public filterResonance: number = 0;\r\n    public filterEnvelope: number = 1;\r\n    public transition: number = 1;\r\n    public vibrato: number = 0;\r\n    public vibratoDepth: number = 0;\r\n    public vibratoSpeed: number = 10;\r\n    public vibratoDelay: number = 0;\r\n    public vibratoType: number = 0;\r\n    public interval: number = 0;\r\n    public effects: number = 0;\r\n    public chord: number = 1;\r\n    public volume: number = 0;\r\n    public pan: number = Config.panCenter;\r\n    public panDelay: number = 10;\r\n    public arpeggioSpeed: number = 12;\r\n    public fastTwoNoteArp: boolean = false;\r\n    public tieNoteTransition: boolean = false;\r\n    public clicklessTransition: boolean = false;\r\n    public detune: number = 0;\r\n    public pulseWidth: number = Config.pulseWidthRange;\r\n    public pulseEnvelope: number = 1;\r\n    public algorithm: number = 0;\r\n    public feedbackType: number = 0;\r\n    public feedbackAmplitude: number = 0;\r\n    public feedbackEnvelope: number = 1;\r\n    public LFOtime: number = 0;\r\n    public nextLFOtime: number = 0;\r\n    public arpTime: number = 0;\r\n    public customChipWave: Float64Array = new Float64Array(64);\r\n    public customChipWaveIntegral: Float64Array = new Float64Array(65); // One extra element for wrap-around in chipSynth.\r\n    public readonly operators: Operator[] = [];\r\n    public readonly spectrumWave: SpectrumWave;\r\n    public readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\r\n    public readonly drumsetEnvelopes: number[] = [];\r\n    public readonly drumsetSpectrumWaves: SpectrumWave[] = [];\r\n    public modChannels: number[] = [];\r\n    public modStatuses: ModStatus[] = [];\r\n    public modInstruments: number[] = [];\r\n    public modSettings: ModSetting[] = [];\r\n\r\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\r\n\r\n        if (isModChannel) {\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                this.modChannels.push(0);\r\n                this.modStatuses.push(ModStatus.msNone);\r\n                this.modInstruments.push(0);\r\n                this.modSettings.push(ModSetting.mstNone);\r\n            }\r\n        }\r\n\r\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            this.operators[i] = new Operator(i);\r\n        }\r\n        for (let i: number = 0; i < Config.drumCount; i++) {\r\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n        }\r\n\r\n        for (let i = 0; i < 64; i++) {\r\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\r\n        }\r\n\r\n        let sum: number = 0.0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            sum += this.customChipWave[i];\r\n        }\r\n        const average: number = sum / this.customChipWave.length;\r\n\r\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n        let cumulative: number = 0;\r\n        let wavePrev: number = 0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            cumulative += wavePrev;\r\n            wavePrev = this.customChipWave[i] - average;\r\n            this.customChipWaveIntegral[i] = cumulative;\r\n        }\r\n\r\n        // 65th, last sample is for anti-aliasing\r\n        this.customChipWaveIntegral[64] = 0.0;\r\n\r\n    }\r\n\r\n    public setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n        // Mod channels are forced to one type.\r\n        if (isModChannel) type = InstrumentType.mod;\r\n        this.type = type;\r\n        this.preset = type;\r\n        this.volume = 0;\r\n        this.pan = Config.panCenter;\r\n        this.panDelay = 10;\r\n        this.arpeggioSpeed = 12;\r\n        this.detune = 0;\r\n        this.tieNoteTransition = false;\r\n        this.clicklessTransition = false;\r\n        switch (type) {\r\n            case InstrumentType.chip:\r\n                this.chipWave = 2;\r\n                this.filterCutoff = 6;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 2;\r\n                break;\r\n            case InstrumentType.customChipWave:\r\n                this.chipWave = 2;\r\n                this.filterCutoff = 6;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 2;\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n                break;\r\n            case InstrumentType.fm:\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.effects = 1;\r\n                this.chord = 3;\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = 1;\r\n                this.algorithm = 0;\r\n                this.feedbackType = 0;\r\n                this.feedbackAmplitude = 0;\r\n                this.feedbackEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                for (let i: number = 0; i < this.operators.length; i++) {\r\n                    this.operators[i].reset(i);\r\n                }\r\n                break;\r\n            case InstrumentType.noise:\r\n                this.chipNoise = 1;\r\n                this.transition = 1;\r\n                this.effects = 0;\r\n                this.chord = 2;\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                break;\r\n            case InstrumentType.spectrum:\r\n                this.transition = 1;\r\n                this.effects = 1;\r\n                this.chord = 0;\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.spectrumWave.reset(isNoiseChannel);\r\n                break;\r\n            case InstrumentType.drumset:\r\n                this.effects = 0;\r\n                for (let i: number = 0; i < Config.drumCount; i++) {\r\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\r\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n                    }\r\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\r\n                }\r\n                break;\r\n            case InstrumentType.harmonics:\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 0;\r\n                this.harmonicsWave.reset();\r\n                break;\r\n            case InstrumentType.pwm:\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 2;\r\n                this.pulseWidth = Config.pulseWidthRange;\r\n                this.pulseEnvelope = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                break;\r\n            case InstrumentType.mod:\r\n                this.transition = 0;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 0;\r\n                this.chord = 0;\r\n                this.modChannels = [];\r\n                this.modStatuses = [];\r\n                this.modInstruments = [];\r\n                this.modSettings = [];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels.push(0);\r\n                    this.modStatuses.push(ModStatus.msNone);\r\n                    this.modInstruments.push(0);\r\n                    this.modSettings.push(ModSetting.mstNone);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Unrecognized instrument type: \" + type);\r\n        }\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const instrumentObject: any = {\r\n            \"type\": Config.instrumentTypeNames[this.type],\r\n            \"volume\": this.volume,\r\n            \"pan\": (this.pan - Config.panCenter) * 100 / Config.panCenter,\r\n            \"panDelay\": this.panDelay,\r\n            \"arpeggioSpeed\": this.arpeggioSpeed,\r\n            \"fastTwoNoteArp\": this.fastTwoNoteArp,\r\n            \"tieNoteTransition\": this.tieNoteTransition,\r\n            \"clicklessTransition\": this.clicklessTransition,\r\n            \"vibrato\": this.vibrato,\r\n            \"vibratoDepth\": this.vibratoDepth,\r\n            \"vibratoDelay\": this.vibratoDelay,\r\n            \"vibratoSpeed\": this.vibratoSpeed,\r\n            \"vibratoType\": this.vibratoType,\r\n            \"detune\": this.detune,\r\n            \"effects\": Config.effectsNames[this.effects],\r\n        };\r\n\r\n        if (this.preset != this.type) {\r\n            instrumentObject[\"preset\"] = this.preset;\r\n        }\r\n\r\n        if (this.type != InstrumentType.drumset) {\r\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\r\n            instrumentObject[\"chord\"] = this.getChord().name;\r\n            instrumentObject[\"filterCutoffHz\"] = Math.round(Config.filterCutoffMaxHz * Math.pow(2.0, this.getFilterCutoffOctaves()));\r\n            instrumentObject[\"filterResonance\"] = Math.round(100 * this.filterResonance / (Config.filterResonanceRange - 1));\r\n            instrumentObject[\"filterEnvelope\"] = this.getFilterEnvelope().name;\r\n        }\r\n\r\n        if (this.type == InstrumentType.noise) {\r\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            instrumentObject[\"spectrum\"] = [];\r\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\r\n            }\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            instrumentObject[\"drums\"] = [];\r\n            for (let j: number = 0; j < Config.drumCount; j++) {\r\n                const spectrum: number[] = [];\r\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\r\n                }\r\n                instrumentObject[\"drums\"][j] = {\r\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\r\n                    \"spectrum\": spectrum,\r\n                };\r\n            }\r\n        } else if (this.type == InstrumentType.chip) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            instrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n        } else if (this.type == InstrumentType.customChipWave) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            instrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\r\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\r\n            for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\r\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\r\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\r\n            }\r\n\r\n            instrumentObject[\"customChipWaveIntegral\"][64] = 0;\r\n        } else if (this.type == InstrumentType.pwm) {\r\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n            instrumentObject[\"pulseEnvelope\"] = Config.envelopes[this.pulseEnvelope].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            instrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"harmonics\"] = [];\r\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\r\n            }\r\n        } else if (this.type == InstrumentType.fm) {\r\n            const operatorArray: Object[] = [];\r\n            for (const operator of this.operators) {\r\n                operatorArray.push({\r\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\r\n                    \"amplitude\": operator.amplitude,\r\n                    \"envelope\": Config.envelopes[operator.envelope].name,\r\n                });\r\n            }\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\r\n            instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\r\n            instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n            instrumentObject[\"feedbackEnvelope\"] = Config.envelopes[this.feedbackEnvelope].name;\r\n            instrumentObject[\"operators\"] = operatorArray;\r\n        } else if (this.type == InstrumentType.mod) {\r\n            instrumentObject[\"modChannels\"] = [];\r\n            instrumentObject[\"modInstruments\"] = [];\r\n            instrumentObject[\"modSettings\"] = [];\r\n            instrumentObject[\"modStatuses\"] = [];\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\r\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\r\n                instrumentObject[\"modSettings\"][mod] = this.modSettings[mod];\r\n                instrumentObject[\"modStatuses\"][mod] = this.modStatuses[mod];\r\n            }\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type\");\r\n        }\r\n        return instrumentObject;\r\n    }\r\n\r\n    public fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean): void {\r\n        if (instrumentObject == undefined) instrumentObject = {};\r\n\r\n        let type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\r\n//         if (type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip); // TODO: a\r\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\r\n\r\n        if (instrumentObject[\"preset\"] != undefined) {\r\n            this.preset = instrumentObject[\"preset\"] >>> 0;\r\n        }\r\n\r\n        if (instrumentObject[\"volume\"] != undefined) {\r\n            this.volume = clamp(-Config.volumeRange / 2, Config.volumeRange / 2, instrumentObject[\"volume\"] | 0);\r\n        } else {\r\n            this.volume = 0;\r\n        }\r\n\r\n        if (instrumentObject[\"pan\"] != undefined) {\r\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\r\n        } else {\r\n            this.pan = Config.panCenter;\r\n        }\r\n\r\n        if (instrumentObject[\"panDelay\"] != undefined) {\r\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\r\n        } else {\r\n            this.panDelay = 10;\r\n        }\r\n\r\n        if (instrumentObject[\"detune\"] != undefined) {\r\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\r\n        }\r\n        else {\r\n            this.detune = 0;\r\n        }\r\n\r\n        const oldTransitionNames: Dictionary<number> = { \"binary\": 0, \"sudden\": 1, \"smooth\": 2 };\r\n        const transitionObject = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so try that too.\r\n        this.transition = oldTransitionNames[transitionObject] != undefined ? oldTransitionNames[transitionObject] : Config.transitions.findIndex(transition => transition.name == transitionObject);\r\n        if (this.transition == -1) this.transition = 1;\r\n\r\n        this.effects = Config.effectsNames.indexOf(instrumentObject[\"effects\"]);\r\n        if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\r\n\r\n        if (instrumentObject[\"filterCutoffHz\"] != undefined) {\r\n            this.filterCutoff = clamp(0, Config.filterCutoffRange, Math.round((Config.filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / Config.filterCutoffMaxHz) / Math.LN2));\r\n        } else {\r\n            this.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\r\n        }\r\n        if (instrumentObject[\"filterResonance\"] != undefined) {\r\n            this.filterResonance = clamp(0, Config.filterResonanceRange, Math.round((Config.filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\r\n        } else {\r\n            this.filterResonance = 0;\r\n        }\r\n        this.filterEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"filterEnvelope\"]);\r\n        if (this.filterEnvelope == -1) this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\r\n        if (instrumentObject[\"filter\"] != undefined) {\r\n            const legacyToCutoff: number[] = [20, 12, 6, 0, 16, 10, 4];\r\n            const legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n            const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n            const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\r\n            let legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\r\n            if (legacyFilter == -1) legacyFilter = 0;\r\n            this.filterCutoff = legacyToCutoff[legacyFilter];\r\n            this.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n            this.filterResonance = 0;\r\n        }\r\n\r\n        const legacyEffectNames: ReadonlyArray<string> = [\"none\", \"vibrato light\", \"vibrato delayed\", \"vibrato heavy\"];\r\n        if (this.type == InstrumentType.noise) {\r\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            if (this.chipNoise == -1) this.chipNoise = 1;\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 2;\r\n\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            if (instrumentObject[\"spectrum\"] != undefined) {\r\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                    this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\r\n                }\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 0;\r\n\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            if (instrumentObject[\"drums\"] != undefined) {\r\n                for (let j: number = 0; j < Config.drumCount; j++) {\r\n                    const drum: any = instrumentObject[\"drums\"][j];\r\n                    if (drum == undefined) continue;\r\n\r\n                    if (drum[\"filterEnvelope\"] != undefined) {\r\n                        this.drumsetEnvelopes[j] = Config.envelopes.findIndex(envelope => envelope.name == drum[\"filterEnvelope\"]);\r\n                        if (this.drumsetEnvelopes[j] == -1) this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                    }\r\n                    if (drum[\"spectrum\"] != undefined) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            if (instrumentObject[\"harmonics\"] != undefined) {\r\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                    this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\r\n                }\r\n            }\r\n\r\n            if (instrumentObject[\"interval\"] != undefined) {\r\n                this.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 0;\r\n        } else if (this.type == InstrumentType.pwm) {\r\n            if (instrumentObject[\"pulseWidth\"] != undefined) {\r\n                this.pulseWidth = clamp(0, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\r\n            } else {\r\n                this.pulseWidth = Config.pulseWidthRange;\r\n            }\r\n\r\n            if (instrumentObject[\"pulseEnvelope\"] != undefined) {\r\n                this.pulseEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"pulseEnvelope\"]);\r\n                if (this.pulseEnvelope == -1) this.pulseEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 0;\r\n        } else if (this.type == InstrumentType.chip) {\r\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\r\n            this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            if (this.chipWave == -1) this.chipWave = 1;\r\n\r\n            if (instrumentObject[\"interval\"] != undefined) {\r\n                this.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            } else if (instrumentObject[\"chorus\"] != undefined) {\r\n                const legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n                this.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            } else if (instrumentObject[\"effect\"] != undefined) {\r\n                this.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n                if (this.vibrato == -1) this.vibrato = 0;\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 2;\r\n\r\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n            if (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n                this.interval = 2;\r\n                this.chord = 3;\r\n            }\r\n        } else if (this.type == InstrumentType.fm) {\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            } else if (instrumentObject[\"effect\"] != undefined) {\r\n                this.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n                if (this.vibrato == -1) this.vibrato = 0;\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 3;\r\n\r\n            this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\r\n            if (this.algorithm == -1) this.algorithm = 0;\r\n            this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\r\n            if (this.feedbackType == -1) this.feedbackType = 0;\r\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\r\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\r\n            } else {\r\n                this.feedbackAmplitude = 0;\r\n            }\r\n\r\n            const legacyEnvelopeNames: Dictionary<number> = { \"pluck 1\": 6, \"pluck 2\": 7, \"pluck 3\": 8 };\r\n            this.feedbackEnvelope = legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] != undefined ? legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"feedbackEnvelope\"]);\r\n            if (this.feedbackEnvelope == -1) this.feedbackEnvelope = 0;\r\n\r\n            for (let j: number = 0; j < Config.operatorCount; j++) {\r\n                const operator: Operator = this.operators[j];\r\n                let operatorObject: any = undefined;\r\n                if (instrumentObject[\"operators\"]) operatorObject = instrumentObject[\"operators\"][j];\r\n                if (operatorObject == undefined) operatorObject = {};\r\n\r\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\r\n                if (operator.frequency == -1) operator.frequency = 0;\r\n                if (operatorObject[\"amplitude\"] != undefined) {\r\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\r\n                } else {\r\n                    operator.amplitude = 0;\r\n                }\r\n                operator.envelope = legacyEnvelopeNames[operatorObject[\"envelope\"]] != undefined ? legacyEnvelopeNames[operatorObject[\"envelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == operatorObject[\"envelope\"]);\r\n                if (operator.envelope == -1) operator.envelope = 0;\r\n            }\r\n        } else if (this.type == InstrumentType.customChipWave) {\r\n            if (instrumentObject[\"interval\"] != undefined) {\r\n                this.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            } else if (instrumentObject[\"chorus\"] != undefined) {\r\n                const legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n                this.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            } else if (instrumentObject[\"effect\"] != undefined) {\r\n                this.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n                if (this.vibrato == -1) this.vibrato = 0;\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 2;\r\n\r\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n            if (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n                this.interval = 2;\r\n                this.chord = 3;\r\n            }\r\n\r\n            if (instrumentObject[\"customChipWave\"]) {\r\n\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\r\n                }\r\n\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n            }\r\n\r\n        } else if (this.type == InstrumentType.mod) {\r\n            if (instrumentObject[\"modChannels\"] != undefined) {\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\r\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\r\n                    this.modSettings[mod] = instrumentObject[\"modSettings\"][mod];\r\n                    this.modStatuses[mod] = instrumentObject[\"modStatuses\"][mod];\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type.\");\r\n        }\r\n\r\n        if (this.type != InstrumentType.mod) {\r\n            // Arpeggio speed\r\n            if (this.chord == 2 && instrumentObject[\"arpeggioSpeed\"] != undefined) {\r\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\r\n            }\r\n            else {\r\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\r\n            }\r\n\r\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\r\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\r\n            }\r\n            else {\r\n                this.fastTwoNoteArp = useFastTwoNoteArp;\r\n            }\r\n\r\n            if (instrumentObject[\"tieNoteTransition\"] != undefined) {\r\n                this.tieNoteTransition = instrumentObject[\"tieNoteTransition\"];\r\n            }\r\n            else {\r\n                this.tieNoteTransition = false;\r\n            }\r\n\r\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\r\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\r\n            }\r\n            else {\r\n                this.clicklessTransition = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static frequencyFromPitch(pitch: number): number {\r\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\r\n    }\r\n\r\n    public static drumsetIndexReferenceDelta(index: number): number {\r\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\r\n    }\r\n\r\n    private static _drumsetIndexToSpectrumOctave(index: number) {\r\n        return 15 + Math.log(Instrument.drumsetIndexReferenceDelta(index)) / Math.LN2;\r\n    }\r\n\r\n    public warmUp(): void {\r\n        this.LFOtime = 0;\r\n        this.nextLFOtime = 0;\r\n        this.arpTime = 0;\r\n        if (this.type == InstrumentType.noise) {\r\n            getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            this.harmonicsWave.getCustomWave();\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            this.spectrumWave.getCustomWave(8);\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            for (let i: number = 0; i < Config.drumCount; i++) {\r\n                this.drumsetSpectrumWaves[i].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    public getDrumWave(): Float32Array {\r\n        if (this.type == InstrumentType.noise) {\r\n            return getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            return this.spectrumWave.getCustomWave(8);\r\n        } else {\r\n            throw new Error(\"Unhandled instrument type in getDrumWave\");\r\n        }\r\n    }\r\n\r\n    public getDrumsetWave(pitch: number): Float32Array {\r\n        if (this.type == InstrumentType.drumset) {\r\n            return this.drumsetSpectrumWaves[pitch].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(pitch));\r\n        } else {\r\n            throw new Error(\"Unhandled instrument type in getDrumWave\");\r\n        }\r\n    }\r\n\r\n    public getTransition(): Transition {\r\n        return this.type == InstrumentType.drumset ? Config.transitions.dictionary[\"hard fade\"] :\r\n            this.type == InstrumentType.mod ? Config.transitions.dictionary[\"seamless\"] : Config.transitions[this.transition];\r\n    }\r\n    public getChord(): Chord {\r\n        return this.type == InstrumentType.drumset ? Config.chords.dictionary[\"harmony\"] : Config.chords[this.chord];\r\n    }\r\n    public getFilterCutoffOctaves(): number {\r\n        return this.type == InstrumentType.drumset ? 0 : (this.filterCutoff - (Config.filterCutoffRange - 1)) * 0.5;\r\n    }\r\n    public getFilterIsFirstOrder(): boolean {\r\n        return this.type == InstrumentType.drumset ? false : this.filterResonance == 0;\r\n    }\r\n    public getFilterResonance(): number {\r\n        return this.type == InstrumentType.drumset ? 1 : this.filterResonance;\r\n    }\r\n    public getFilterEnvelope(): Envelope {\r\n        if (this.type == InstrumentType.drumset) throw new Error(\"Can't getFilterEnvelope() for drumset.\");\r\n        return Config.envelopes[this.filterEnvelope];\r\n    }\r\n    public getDrumsetEnvelope(pitch: number): Envelope {\r\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\r\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\r\n    }\r\n}\r\n\r\nexport enum ModStatus {\r\n    msForPitch = 0,\r\n    msForNoise = 1,\r\n    msForSong = 2,\r\n    msNone = 3,\r\n}\r\n\r\nexport enum ModSetting {\r\n    mstNone = 0,\r\n    mstSongVolume = 1,\r\n    mstTempo = 2,\r\n    mstReverb = 3,\r\n    mstNextBar = 4,\r\n    mstInsVolume = 5,\r\n    mstPan = 6,\r\n    mstFilterCut = 7,\r\n    mstFilterPeak = 8,\r\n    mstFMSlider1 = 9,\r\n    mstFMSlider2 = 10,\r\n    mstFMSlider3 = 11,\r\n    mstFMSlider4 = 12,\r\n    mstFMFeedback = 13,\r\n    mstPulseWidth = 14,\r\n    mstDetune = 15,\r\n    mstVibratoDepth = 16,\r\n    mstSongDetune = 17,\r\n    mstVibratoSpeed = 18,\r\n    mstVibratoDelay = 19,\r\n    mstArpeggioSpeed = 20,\r\n    mstPanDelay = 21,\r\n    mstResetArpeggio = 22,\r\n    mstMaxValue = 23,\r\n}\r\n\r\nexport class Channel {\r\n    public octave: number = 0;\r\n    public readonly instruments: Instrument[] = [];\r\n    public readonly patterns: Pattern[] = [];\r\n    public readonly bars: number[] = [];\r\n    public muted: boolean = false;\r\n    public name: string = \"\";\r\n}\r\n\r\nexport class Song {\r\n    private static readonly _format: string = \"BeepBox\";\r\n    private static readonly _oldestBeepboxVersion: number = 2;\r\n    private static readonly _latestBeepboxVersion: number = 8;\r\n    private static readonly _oldestJummBoxVersion: number = 1;\r\n    private static readonly _latestJummBoxVersion: number = 4;\r\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox.\r\n    private static readonly _variant = 0x6A; //\"j\" ~ jummbox\r\n\r\n    public title: string;\r\n    public scale: number;\r\n    public key: number;\r\n    public tempo: number;\r\n    public reverb: number;\r\n    public beatsPerBar: number;\r\n    public barCount: number;\r\n    public patternsPerChannel: number;\r\n    public rhythm: number;\r\n    public instrumentsPerChannel: number;\r\n    public loopStart: number;\r\n    public loopLength: number;\r\n    public pitchChannelCount: number;\r\n    public noiseChannelCount: number;\r\n    public modChannelCount: number;\r\n    public readonly channels: Channel[] = [];\r\n    public limitDecay: number = 4.0;\r\n    public limitRise: number = 4000.0;\r\n    public compressionThreshold: number = 1.0;\r\n    public limitThreshold: number = 1.0;\r\n    public compressionRatio: number = 1.0;\r\n    public limitRatio: number = 1.0;\r\n    public masterGain: number = 1.0;\r\n    public inVolumeCap: number = 0.0;\r\n    public outVolumeCap: number = 0.0;\r\n\r\n    // Maximum value possible for the mod (total number of possible positions)\r\n    public mstMaxVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n        [ModSetting.mstNone, 6],\r\n        [ModSetting.mstSongVolume, 100],\r\n        [ModSetting.mstTempo, Config.tempoMax - Config.tempoMin],\r\n        [ModSetting.mstReverb, Config.reverbRange - 1],\r\n        [ModSetting.mstNextBar, 1],\r\n        [ModSetting.mstInsVolume, Config.volumeRange],\r\n        [ModSetting.mstPan, Config.panMax],\r\n        [ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n        [ModSetting.mstFilterPeak, Config.filterResonanceRange - 1],\r\n        [ModSetting.mstFMSlider1, 15],\r\n        [ModSetting.mstFMSlider2, 15],\r\n        [ModSetting.mstFMSlider3, 15],\r\n        [ModSetting.mstFMSlider4, 15],\r\n        [ModSetting.mstFMFeedback, 15],\r\n        [ModSetting.mstPulseWidth, Config.pulseWidthRange],\r\n        [ModSetting.mstDetune, Config.detuneMax - Config.detuneMin],\r\n        [ModSetting.mstVibratoDepth, 50],\r\n        [ModSetting.mstSongDetune, Config.songDetuneMax - Config.songDetuneMin],\r\n        [ModSetting.mstVibratoSpeed, 30],\r\n        [ModSetting.mstVibratoDelay, 50],\r\n        [ModSetting.mstArpeggioSpeed, 50],\r\n        [ModSetting.mstPanDelay, 20],\r\n        [ModSetting.mstResetArpeggio, 1],\r\n        [ModSetting.mstMaxValue, 6],\r\n    ]\r\n    );\r\n\r\n    // When creating a new note, this is the value to set a mod note to (generally the most \"neutral\" value possible)\r\n    public mstNewNoteVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n        [ModSetting.mstNone, 6],\r\n        [ModSetting.mstSongVolume, 100],\r\n        [ModSetting.mstTempo, Math.ceil((Config.tempoMax - Config.tempoMin) / 2)],\r\n        [ModSetting.mstReverb, 0],\r\n        [ModSetting.mstNextBar, 1],\r\n        [ModSetting.mstInsVolume, Math.ceil(Config.volumeRange / 2)],\r\n        [ModSetting.mstPan, Math.ceil(Config.panMax / 2)],\r\n        [ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n        [ModSetting.mstFilterPeak, 0],\r\n        [ModSetting.mstFMSlider1, 15],\r\n        [ModSetting.mstFMSlider2, 15],\r\n        [ModSetting.mstFMSlider3, 15],\r\n        [ModSetting.mstFMSlider4, 15],\r\n        [ModSetting.mstFMFeedback, 15],\r\n        [ModSetting.mstPulseWidth, Math.ceil(Config.pulseWidthRange)],\r\n        [ModSetting.mstDetune, Math.ceil((Config.detuneMax - Config.detuneMin) / 2)],\r\n        [ModSetting.mstVibratoDepth, 0],\r\n        [ModSetting.mstSongDetune, Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2)],\r\n        [ModSetting.mstVibratoSpeed, 0],\r\n        [ModSetting.mstVibratoDelay, 0],\r\n        [ModSetting.mstArpeggioSpeed, 10],\r\n        [ModSetting.mstPanDelay, 10],\r\n        [ModSetting.mstResetArpeggio, 1],\r\n        [ModSetting.mstMaxValue, 6],\r\n    ])\r\n\r\n    constructor(string?: string) {\r\n        if (string != undefined) {\r\n            this.fromBase64String(string);\r\n        } else {\r\n            this.initToDefault(true);\r\n        }\r\n    }\r\n\r\n    public modValueToReal(value: number, setting: ModSetting): number {\r\n        switch (setting) {\r\n            case ModSetting.mstTempo:\r\n                value += Config.tempoMin;\r\n                break;\r\n            case ModSetting.mstInsVolume:\r\n                value -= Config.volumeRange / 2.0;\r\n                break;\r\n            case ModSetting.mstDetune:\r\n                value += Config.detuneMin;\r\n                break;\r\n            case ModSetting.mstSongDetune:\r\n                value += Config.songDetuneMin;\r\n                break;\r\n            case ModSetting.mstFilterCut:\r\n            case ModSetting.mstFilterPeak:\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstPan:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstNextBar:\r\n            case ModSetting.mstFMSlider1:\r\n            case ModSetting.mstFMSlider2:\r\n            case ModSetting.mstFMSlider3:\r\n            case ModSetting.mstFMSlider4:\r\n            case ModSetting.mstFMFeedback:\r\n            case ModSetting.mstPulseWidth:\r\n            case ModSetting.mstVibratoDepth:\r\n            case ModSetting.mstVibratoSpeed:\r\n            case ModSetting.mstVibratoDelay:\r\n            case ModSetting.mstArpeggioSpeed:\r\n            case ModSetting.mstPanDelay:\r\n            case ModSetting.mstResetArpeggio:\r\n            case ModSetting.mstNone:\r\n            default:\r\n                break;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public isSettingForSong(setting: ModSetting): boolean {\r\n        switch (setting) {\r\n            case ModSetting.mstTempo:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstNextBar:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    public realToModValue(value: number, setting: ModSetting): number {\r\n        switch (setting) {\r\n            case ModSetting.mstTempo:\r\n                value -= Config.tempoMin;\r\n                break;\r\n            case ModSetting.mstInsVolume:\r\n                value += Config.volumeRange / 2.0;\r\n                break;\r\n            case ModSetting.mstDetune:\r\n                value -= Config.detuneMin;\r\n                break;\r\n            case ModSetting.mstSongDetune:\r\n                value -= Config.songDetuneMin;\r\n                break;\r\n            case ModSetting.mstFilterCut:\r\n            case ModSetting.mstFilterPeak:\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstPan:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstNextBar:\r\n            case ModSetting.mstFMSlider1:\r\n            case ModSetting.mstFMSlider2:\r\n            case ModSetting.mstFMSlider3:\r\n            case ModSetting.mstFMSlider4:\r\n            case ModSetting.mstFMFeedback:\r\n            case ModSetting.mstPulseWidth:\r\n            case ModSetting.mstVibratoDepth:\r\n            case ModSetting.mstVibratoSpeed:\r\n            case ModSetting.mstVibratoDelay:\r\n            case ModSetting.mstArpeggioSpeed:\r\n            case ModSetting.mstPanDelay:\r\n            case ModSetting.mstResetArpeggio:\r\n            case ModSetting.mstNone:\r\n            default:\r\n                break;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    // Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\r\n    public getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let cap: number | undefined = this.mstNewNoteVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n            \r\n            // For tempo, actually use user defined tempo\r\n            if (this.channels[modChannel].instruments[modInstrument].modSettings[modCount] == ModSetting.mstTempo) {\r\n                cap = this.realToModValue(this.tempo, ModSetting.mstTempo);\r\n            }\r\n            \r\n            if (cap != undefined)\r\n                return cap;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n\r\n    public getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let cap: number | undefined = this.mstMaxVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n            if (cap != undefined)\r\n                return cap;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n    public getVolumeCapForSetting = (isMod: boolean, modSetting: ModSetting): number => {\r\n        if (!isMod)\r\n            return 6;\r\n        else {\r\n            let cap: number | undefined = this.mstMaxVols.get(modSetting);\r\n            if (cap != undefined)\r\n                return cap;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n    public getChannelCount(): number {\r\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\r\n    }\r\n\r\n    public getChannelIsNoise(channel: number): boolean {\r\n        return (channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public getChannelIsMod(channel: number): boolean {\r\n        return (channel >= this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public initToDefault(andResetChannels: boolean = true): void {\r\n        this.scale = 0;\r\n        this.key = 0;\r\n        this.loopStart = 0;\r\n        this.loopLength = 4;\r\n        this.tempo = 150;\r\n        this.reverb = 0;\r\n        this.beatsPerBar = 8;\r\n        this.barCount = 16;\r\n        this.patternsPerChannel = 8;\r\n        this.rhythm = 1;\r\n        this.instrumentsPerChannel = 1;\r\n\r\n        this.title = \"Unnamed\";\r\n        document.title = EditorConfig.versionDisplayName;\r\n\r\n        if (andResetChannels) {\r\n            this.pitchChannelCount = 3;\r\n            this.noiseChannelCount = 1;\r\n            this.modChannelCount = 0;\r\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                if (this.channels.length <= channelIndex) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                const channel: Channel = this.channels[channelIndex];\r\n                channel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0, 0, ...]; Descending octaves with drums at zero in last channel and onward.\r\n\r\n                for (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\r\n                    if (channel.patterns.length <= pattern) {\r\n                        channel.patterns[pattern] = new Pattern();\r\n                    } else {\r\n                        channel.patterns[pattern].reset();\r\n                    }\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n                const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n                for (let instrument = 0; instrument < this.instrumentsPerChannel; instrument++) {\r\n                    if (channel.instruments.length <= instrument) {\r\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\r\n                    }\r\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\r\n                }\r\n                channel.instruments.length = this.instrumentsPerChannel;\r\n\r\n                for (let bar = 0; bar < this.barCount; bar++) {\r\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n            }\r\n            this.channels.length = this.getChannelCount();\r\n        }\r\n    }\r\n\r\n    public toBase64String(): string {\r\n        let bits: BitFieldWriter;\r\n        let buffer: number[] = [];\r\n\r\n        buffer.push(Song._variant);\r\n        buffer.push(base64IntToCharCode[Song._latestJummBoxVersion]);\r\n\r\n        buffer.push(SongTagCode.songTitle);\r\n\r\n        // Length of the song name string\r\n        var encodedSongTitle: string = encodeURIComponent(this.title);\r\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\r\n\r\n        // Actual encoded string follows\r\n        for (let i: number = 0; i < encodedSongTitle.length; i++) {\r\n            buffer.push(encodedSongTitle.charCodeAt(i));\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\r\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key]);\r\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\r\n        buffer.push(SongTagCode.reverb, base64IntToCharCode[this.reverb]);\r\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[this.instrumentsPerChannel - 1]);\r\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\r\n\r\n        // Push limiter settings, but only if they aren't the default!\r\n        buffer.push(SongTagCode.limiterSettings);\r\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\r\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\r\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\r\n        }\r\n        else {\r\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelNames);\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            // Length of the channel name string\r\n            var encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\r\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\r\n\r\n            // Actual encoded string follows\r\n            for (let i: number = 0; i < encodedChannelName.length; i++) {\r\n                buffer.push(encodedChannelName.charCodeAt(i));\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelOctave);\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            buffer.push(base64IntToCharCode[this.channels[channel].octave]);\r\n        }\r\n\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                const instrument: Instrument = this.channels[channel].instruments[i];\r\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\r\n                buffer.push(SongTagCode.panning, base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\r\n                buffer.push(base64IntToCharCode[instrument.panDelay]); // Piggybacks after panning to reduce song tag code usage :P\r\n                buffer.push(SongTagCode.detune, base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3f]);\r\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\r\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects]);\r\n\r\n\r\n                if (instrument.type != InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n                    // Transition info follows transition song tag\r\n                    buffer.push(base64IntToCharCode[+instrument.tieNoteTransition]);\r\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\r\n                    buffer.push(SongTagCode.filterCutoff, base64IntToCharCode[instrument.filterCutoff]);\r\n                    buffer.push(SongTagCode.filterResonance, base64IntToCharCode[instrument.filterResonance]);\r\n                    buffer.push(SongTagCode.filterEnvelope, base64IntToCharCode[instrument.filterEnvelope]);\r\n                    buffer.push(SongTagCode.chord, base64IntToCharCode[instrument.chord]);\r\n                }\r\n\r\n                if (instrument.type == InstrumentType.chip) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.fm) {\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                    buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n                    buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n                    buffer.push(SongTagCode.feedbackEnvelope, base64IntToCharCode[instrument.feedbackEnvelope]);\r\n\r\n                    buffer.push(SongTagCode.operatorFrequencies);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorAmplitudes);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorEnvelopes);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].envelope]);\r\n                    }\r\n                } else if (instrument.type == InstrumentType.customChipWave) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n                    buffer.push(SongTagCode.customChipWave);\r\n                    // Push custom wave values\r\n                    for (let j: number = 0; j < 64; j++) {\r\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\r\n                    }\r\n                } else if (instrument.type == InstrumentType.noise) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.spectrum) {\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.filterEnvelope);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\r\n                    }\r\n\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\r\n                        }\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.harmonics) {\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n                    buffer.push(SongTagCode.harmonics);\r\n                    const harmonicsBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\r\n                    }\r\n                    harmonicsBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.pwm) {\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth], base64IntToCharCode[instrument.pulseEnvelope]);\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.mod) {\r\n                    // Handled down below. Could be moved, but meh.\r\n                }\r\n                else {\r\n                    throw new Error(\"Unknown instrument type.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.bars);\r\n        bits = new BitFieldWriter();\r\n        let neededBits: number = 0;\r\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) for (let i: number = 0; i < this.barCount; i++) {\r\n            bits.write(neededBits, this.channels[channel].bars[i]);\r\n        }\r\n        bits.encodeBase64(buffer);\r\n\r\n        buffer.push(SongTagCode.patterns);\r\n        bits = new BitFieldWriter();\r\n        const shapeBits: BitFieldWriter = new BitFieldWriter();\r\n        let neededInstrumentBits: number = 0;\r\n        while ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n            const isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n            // Some info about modulator settings immediately follows in mod channels.\r\n            if (isModChannel) {\r\n                for (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n                    let instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        const modStatus: ModStatus = instrument.modStatuses[mod];\r\n                        const modChannel: number = instrument.modChannels[mod];\r\n                        const modInstrument: number = instrument.modInstruments[mod];\r\n                        const modSetting: number = instrument.modSettings[mod];\r\n\r\n                        bits.write(2, modStatus);\r\n\r\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n                        if (modStatus == ModStatus.msForPitch || modStatus == ModStatus.msForNoise) {\r\n                            bits.write(8, modChannel);\r\n                            bits.write(neededInstrumentBits, modInstrument);\r\n                        }\r\n\r\n                        // Mod setting is only used if the status isn't \"none\".\r\n                        if (modStatus != ModStatus.msNone) {\r\n                            bits.write(6, modSetting);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * 12;\r\n            let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : 12) + octaveOffset;\r\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n            const recentShapes: any[] = [];\r\n\r\n            for (let i: number = 0; i < recentPitches.length; i++) {\r\n                recentPitches[i] += octaveOffset;\r\n            }\r\n            for (const pattern of this.channels[channel].patterns) {\r\n                bits.write(neededInstrumentBits, pattern.instrument);\r\n\r\n                if (pattern.notes.length > 0) {\r\n                    bits.write(1, 1);\r\n\r\n                    let curPart: number = 0;\r\n                    for (const note of pattern.notes) {\r\n\r\n                        // For mod channels, a negative offset may be necessary.\r\n                        if (note.start < curPart && isModChannel) {\r\n                            bits.write(2, 0); // rest, then...\r\n                            bits.write(1, 1); // negative offset\r\n                            bits.writePartDuration(curPart - note.start);\r\n                        }\r\n\r\n                        if (note.start > curPart) {\r\n                            bits.write(2, 0); // rest, then...\r\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\r\n                            bits.writePartDuration(note.start - curPart);\r\n                        }\r\n\r\n                        shapeBits.clear();\r\n\r\n                        // Old format was:\r\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n                        // New format is:\r\n                        //      0: 1 pitch\r\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                        if (note.pitches.length == 1) {\r\n                            shapeBits.write(1, 0);\r\n                        } else {\r\n                            shapeBits.write(1, 1);\r\n                            shapeBits.write(3, note.pitches.length - 2);\r\n                        }\r\n\r\n                        shapeBits.writePinCount(note.pins.length - 1);\r\n\r\n                        if (!isModChannel) {\r\n                            shapeBits.write(3, note.pins[0].volume); // volume\r\n                        }\r\n                        else {\r\n                            shapeBits.write(9, note.pins[0].volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n                        }\r\n\r\n                        let shapePart: number = 0;\r\n                        let startPitch: number = note.pitches[0];\r\n                        let currentPitch: number = startPitch;\r\n                        const pitchBends: number[] = [];\r\n                        for (let i: number = 1; i < note.pins.length; i++) {\r\n                            const pin: NotePin = note.pins[i];\r\n                            const nextPitch: number = startPitch + pin.interval;\r\n                            if (currentPitch != nextPitch) {\r\n                                shapeBits.write(1, 1);\r\n                                pitchBends.push(nextPitch);\r\n                                currentPitch = nextPitch;\r\n                            } else {\r\n                                shapeBits.write(1, 0);\r\n                            }\r\n                            shapeBits.writePartDuration(pin.time - shapePart);\r\n                            shapePart = pin.time;\r\n\r\n                            if (!isModChannel) {\r\n                                shapeBits.write(3, pin.volume); // volume\r\n                            }\r\n                            else {\r\n                                shapeBits.write(9, pin.volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n                            }\r\n                        }\r\n\r\n                        const shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\r\n                        const shapeIndex: number = recentShapes.indexOf(shapeString);\r\n                        if (shapeIndex == -1) {\r\n                            bits.write(2, 1); // new shape\r\n                            bits.concat(shapeBits);\r\n                        } else {\r\n                            bits.write(1, 1); // old shape\r\n                            bits.writeLongTail(0, 0, shapeIndex);\r\n                            recentShapes.splice(shapeIndex, 1);\r\n                        }\r\n                        recentShapes.unshift(shapeString);\r\n                        if (recentShapes.length > 10) recentShapes.pop();\r\n\r\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\r\n                        for (let i: number = 0; i < allPitches.length; i++) {\r\n                            const pitch: number = allPitches[i];\r\n                            const pitchIndex: number = recentPitches.indexOf(pitch);\r\n                            if (pitchIndex == -1) {\r\n                                let interval: number = 0;\r\n                                let pitchIter: number = lastPitch;\r\n                                if (pitchIter < pitch) {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter++;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n                                    }\r\n                                } else {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter--;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n                                    }\r\n                                }\r\n                                bits.write(1, 0);\r\n                                bits.writePitchInterval(interval);\r\n                            } else {\r\n                                bits.write(1, 1);\r\n                                bits.write(4, pitchIndex);\r\n                                recentPitches.splice(pitchIndex, 1);\r\n                            }\r\n                            recentPitches.unshift(pitch);\r\n                            if (recentPitches.length > 16) recentPitches.pop();\r\n\r\n                            if (i == note.pitches.length - 1) {\r\n                                lastPitch = note.pitches[0];\r\n                            } else {\r\n                                lastPitch = pitch;\r\n                            }\r\n                        }\r\n                        curPart = note.end;\r\n                    }\r\n\r\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n                        bits.write(2, 0); // rest, then...\r\n                        if (isModChannel) bits.write(1, 0); // positive offset\r\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\r\n                    }\r\n                } else {\r\n                    bits.write(1, 0);\r\n                }\r\n\r\n            }\r\n        }\r\n        let stringLength: number = bits.lengthBase64();\r\n        let digits: number[] = [];\r\n        while (stringLength > 0) {\r\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n            stringLength = stringLength >> 6;\r\n        }\r\n        buffer.push(base64IntToCharCode[digits.length]);\r\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n        bits.encodeBase64(buffer);\r\n\r\n        const maxApplyArgs: number = 64000;\r\n        if (buffer.length < maxApplyArgs) {\r\n            // Note: Function.apply may break for long argument lists.\r\n            return String.fromCharCode.apply(null, buffer);\r\n        } else {\r\n            let result: string = \"\";\r\n            for (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\r\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    public fromBase64String(compressed: string): void {\r\n        if (compressed == null || compressed == \"\") {\r\n            this.initToDefault(true);\r\n            return;\r\n        }\r\n        let charIndex: number = 0;\r\n        // skip whitespace.\r\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n        // skip hash mark.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n        // if it starts with curly brace, treat it as JSON.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\r\n            return;\r\n        }\r\n\r\n        const variantTest: number = compressed.charCodeAt(charIndex);\r\n        var variant: string = \"beepbox\";\r\n\r\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n        if (variantTest == 0x6A) { //\"j\"\r\n            variant = \"jummbox\";\r\n            charIndex++;\r\n        }\r\n\r\n        const version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n        if (variant == \"beepbox\" && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n        if (variant == \"jummbox\" && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\r\n\r\n        const beforeTwo: boolean = version < 2;\r\n        const beforeThree: boolean = version < 3;\r\n        const beforeFour: boolean = version < 4;\r\n        const beforeFive: boolean = version < 5;\r\n        const beforeSix: boolean = version < 6;\r\n        const beforeSeven: boolean = version < 7;\r\n        const beforeEight: boolean = version < 8;\r\n        this.initToDefault(variant == \"beepbox\" && beforeSix);\r\n\r\n        if (beforeThree && variant == \"beepbox\") {\r\n            // Originally, the only instrument transition was \"seamless\" and the only drum wave was \"retro\".\r\n            for (const channel of this.channels) channel.instruments[0].transition = 0;\r\n            this.channels[3].instruments[0].chipNoise = 0;\r\n        }\r\n\r\n        let instrumentChannelIterator: number = 0;\r\n        let instrumentIndexIterator: number = -1;\r\n        let toSetOctaves: number[] = [];\r\n        let command: number;\r\n        let channel: number;\r\n        let useSlowerArpSpeed: boolean = false;\r\n        let useFastTwoNoteArp: boolean = false;\r\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\r\n            case SongTagCode.songTitle: {\r\n                // Length of song name string\r\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n                charIndex += songNameLength;\r\n            } break;\r\n            case SongTagCode.channelCount: {\r\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                if (variant == \"beepbox\" || beforeTwo) {\r\n                    // No mod channel support before jummbox v2\r\n                    this.modChannelCount = 0;\r\n                }\r\n                else {\r\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\r\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\r\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\r\n\r\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                this.channels.length = this.getChannelCount();\r\n            } break;\r\n            case SongTagCode.scale: {\r\n                this.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                // All the scales were jumbled around by Jummbox. Just convert to free.\r\n                if (variant == \"beepbox\") this.scale = 0;\r\n            } break;\r\n            case SongTagCode.key: {\r\n                if (beforeSeven && variant == \"beepbox\") {\r\n                    this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else {\r\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.loopStart: {\r\n                if (beforeFive && variant == \"beepbox\") {\r\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n            } break;\r\n            case SongTagCode.loopEnd: {\r\n                if (beforeFive && variant == \"beepbox\") {\r\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n            } break;\r\n            case SongTagCode.tempo: {\r\n                if (beforeFour && variant == \"beepbox\") {\r\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\r\n            } break;\r\n            case SongTagCode.reverb: {\r\n                if (variant == \"beepbox\") {\r\n                    this.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 8;\r\n                    this.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n                }\r\n                else {\r\n                    this.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n                }\r\n            } break;\r\n            case SongTagCode.beatCount: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n            } break;\r\n            case SongTagCode.barCount: {\r\n                const barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\r\n                for (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n                    for (let bar = this.channels[channel].bars.length; bar < this.barCount; bar++) {\r\n                        this.channels[channel].bars[bar] = (bar < 4) ? 1 : 0;\r\n                    }\r\n                    this.channels[channel].bars.length = this.barCount;\r\n                }\r\n            } break;\r\n            case SongTagCode.patternCount: {\r\n                if (variant == \"beepbox\" && beforeEight) {\r\n                    this.patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                } else {\r\n                    this.patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, this.patternsPerChannel);\r\n                for (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n                    for (let pattern = this.channels[channel].patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n                        this.channels[channel].patterns[pattern] = new Pattern();\r\n                    }\r\n                    this.channels[channel].patterns.length = this.patternsPerChannel;\r\n                }\r\n            } break;\r\n            case SongTagCode.instrumentCount: {\r\n                const instrumentsPerChannel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                this.instrumentsPerChannel = validateRange(Config.instrumentsPerChannelMin, Config.instrumentsPerChannelMax, instrumentsPerChannel);\r\n                for (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n                    const isNoiseChannel: boolean = channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount;\r\n                    const isModChannel: boolean = channel >= this.pitchChannelCount + this.noiseChannelCount;\r\n                    for (let instrumentIndex = this.channels[channel].instruments.length; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n                        this.channels[channel].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\r\n                    }\r\n                    this.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n                    if (beforeSix && variant == \"beepbox\") {\r\n                        for (let instrumentIndex = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n                            this.channels[channel].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\r\n                        }\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.rhythm: {\r\n                this.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                // Port all arpeggio speeds over to match what they were, before arpeggio speed was decoupled from rhythm.\r\n                if (variant == \"jummbox\" && beforeThree || variant == \"beepbox\") {\r\n                    // These are all the rhythms that had 4 ticks/arpeggio instead of 3.\r\n                    if (this.rhythm == 0 || this.rhythm == 2) {\r\n                        useSlowerArpSpeed = true;\r\n                    }\r\n                    // Use faster two note arp on these rhythms\r\n                    if (this.rhythm >= 2) {\r\n                        useFastTwoNoteArp = true;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.channelOctave: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    // Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n                    this.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    toSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n                } else {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        // Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n                        this.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        toSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.startInstrument: {\r\n                instrumentIndexIterator++;\r\n                if (instrumentIndexIterator >= this.instrumentsPerChannel) {\r\n                    instrumentChannelIterator++;\r\n                    instrumentIndexIterator = 0;\r\n                }\r\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const instrumentType: number = clamp(0, InstrumentType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\r\n                if (useSlowerArpSpeed) {\r\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\r\n                }\r\n                if (useFastTwoNoteArp) {\r\n                    instrument.fastTwoNoteArp = true;\r\n                }\r\n            } break;\r\n            case SongTagCode.preset: {\r\n                const presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\r\n            } break;\r\n            case SongTagCode.wave: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    const channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channel].instruments[0].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            if (channel >= this.pitchChannelCount) {\r\n                                this.channels[channel].instruments[i].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            } else {\r\n                                this.channels[channel].instruments[i].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                    }\r\n                } else {\r\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.filterCutoff: {\r\n                if (beforeSeven && variant == \"beepbox\") {\r\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n                    const legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\r\n                    if (beforeThree && variant == \"beepbox\") {\r\n                        channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const instrument: Instrument = this.channels[channel].instruments[0];\r\n                        const legacyFilter: number = [1, 3, 4, 5][clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        instrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n                        instrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n                        instrument.filterResonance = 0;\r\n                    } else if (beforeSix && variant == \"beepbox\") {\r\n                        for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                            for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                                const instrument: Instrument = this.channels[channel].instruments[i];\r\n                                const legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                                if (channel < this.pitchChannelCount) {\r\n                                    instrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n                                    instrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n                                    instrument.filterResonance = 0;\r\n                                } else {\r\n                                    instrument.filterCutoff = 10;\r\n                                    instrument.filterEnvelope = 1;\r\n                                    instrument.filterResonance = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        const legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n                        instrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n                        instrument.filterResonance = 0;\r\n                    }\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.filterCutoff = clamp(0, Config.filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.filterResonance: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].filterResonance = clamp(0, Config.filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.filterEnvelope: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.drumset) {\r\n                    for (let i: number = 0; i < Config.drumCount; i++) {\r\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                } else {\r\n                    instrument.filterEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.pulseWidth: {\r\n                if (variant == \"beepbox\") {\r\n                    // Convert back from beepbox's weird pulse width storage formula, rounding. The \"7\" in there is the old\r\n                    // piece of the formula \"beepbox.Config.pulseWidthRange - 1\".\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pulseWidth = Math.round(clamp(0, Config.pulseWidthRange + 1, Math.pow(0.5, (7 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 0.5) * 50));\r\n                    instrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pulseWidth = clamp(0, Config.pulseWidthRange + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.transition: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channel].instruments[0].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            this.channels[channel].instruments[i].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                } else if (beforeFour || variant == \"beepbox\") {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].tieNoteTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                }\r\n            } break;\r\n            case SongTagCode.vibrato: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    const legacyEffects: number[] = [0, 3, 2, 0];\r\n                    const legacyEnvelopes: number[] = [1, 1, 1, 13];\r\n                    const channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument: Instrument = this.channels[channel].instruments[0];\r\n                    instrument.vibrato = legacyEffects[effect];\r\n                    instrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n                        ? legacyEnvelopes[effect]\r\n                        : instrument.filterEnvelope;\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                    const legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[channel].instruments[i];\r\n                            instrument.vibrato = legacyEffects[effect];\r\n                            instrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n                                ? legacyEnvelopes[effect]\r\n                                : instrument.filterEnvelope;\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                    const legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.vibrato = legacyEffects[effect];\r\n                    instrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n                        ? legacyEnvelopes[effect]\r\n                        : instrument.filterEnvelope;\r\n                } else {\r\n                    const vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.vibrato = vibrato;\r\n                    // Custom vibrato\r\n                    if (vibrato == Config.vibratos.length) {\r\n                        instrument.vibratoDepth = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDepth)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\r\n                        instrument.vibratoSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.vibratoDelay = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDelay)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    // Enforce standard vibrato settings\r\n                    else {\r\n                        instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n                        instrument.vibratoSpeed = 10; // Normal speed\r\n                        instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayParts;\r\n                        instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n                    }\r\n                }\r\n\r\n            } break;\r\n            case SongTagCode.arpeggioSpeed: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                instrument.arpeggioSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstArpeggioSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\r\n            } break;\r\n            case SongTagCode.interval: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channel].instruments[0].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            let interval: number = clamp(0, Config.intervals.length, originalValue);\r\n                            if (originalValue == 8) {\r\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                                interval = 2;\r\n                                this.channels[channel].instruments[i].chord = 3;\r\n                            }\r\n                            this.channels[channel].instruments[i].interval = interval;\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    let interval: number = clamp(0, Config.intervals.length, originalValue);\r\n                    if (originalValue == 8) {\r\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                        interval = 2;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\r\n                    }\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = interval;\r\n                } else {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.chord: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.effects: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].effects = clamp(0, Config.effectsNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.volume: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const instrument: Instrument = this.channels[channel].instruments[0];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            const instrument: Instrument = this.channels[channel].instruments[i];\r\n                            instrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (variant == \"beepbox\") {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    // Beepbox v7's volume range is 0-7 (0 is max, 7 is mute)\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\r\n                }\r\n                else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    // Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\r\n                }\r\n            } break;\r\n            case SongTagCode.panning: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                if (variant == \"beepbox\") {\r\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n                    instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\r\n                }\r\n                else {\r\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n\r\n                // Now, pan delay follows on new versions of jummbox.\r\n                if (variant == \"jummbox\" && !beforeThree)\r\n                    instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n            } break;\r\n            case SongTagCode.detune: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) + Config.detuneMin);\r\n            } break;\r\n            case SongTagCode.customChipWave: {\r\n                let instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                // Pop custom wave values\r\n                for (let j: number = 0; j < 64; j++) {\r\n                    instrument.customChipWave[j]\r\n                        = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    sum += instrument.customChipWave[i];\r\n                }\r\n                const average: number = sum / instrument.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = instrument.customChipWave[i] - average;\r\n                    instrument.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                instrument.customChipWaveIntegral[64] = 0.0;\r\n\r\n            } break;\r\n            case SongTagCode.limiterSettings: {\r\n                let nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                // Check if limiter settings are used... if not, restore to default\r\n                if (nextValue == 0x3f) {\r\n                    // Limiter isn't used\r\n                    this.compressionRatio = 1.0;\r\n                    this.limitRatio = 1.0;\r\n                    this.limitRise = 4000.0;\r\n                    this.limitDecay = 4.0;\r\n                    this.limitThreshold = 1.0;\r\n                    this.compressionThreshold = 1.0;\r\n                    this.masterGain = 1.0;\r\n                }\r\n                else {\r\n                    // Limiter is used, grab values\r\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\r\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\r\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\r\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\r\n                }\r\n            } break;\r\n            case SongTagCode.channelNames: {\r\n                for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\r\n                    var channelNameLength;\r\n                    if (beforeFour)\r\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\r\n                    else\r\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\r\n\r\n                    charIndex += channelNameLength;\r\n                }\r\n            } break;\r\n            case SongTagCode.algorithm: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackType: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackAmplitude: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackEnvelope: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.operatorFrequencies: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorAmplitudes: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorEnvelopes: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].envelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.spectrum: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.spectrum) {\r\n                    const byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                    }\r\n                    instrument.spectrumWave.markCustomWaveDirty();\r\n                    charIndex += byteCount;\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    const byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                        }\r\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n                    }\r\n                    charIndex += byteCount;\r\n                } else {\r\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\r\n                }\r\n            } break;\r\n            case SongTagCode.harmonics: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\r\n                }\r\n                instrument.harmonicsWave.markCustomWaveDirty();\r\n                charIndex += byteCount;\r\n            } break;\r\n            case SongTagCode.bars: {\r\n                let subStringLength: number;\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    subStringLength = Math.ceil(barCount * 0.5);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let i: number = 0; i < barCount; i++) {\r\n                        this.channels[channel].bars[i] = bits.read(3) + 1;\r\n                    }\r\n                } else if (beforeFive && variant == \"beepbox\") {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channel].bars[i] = bits.read(neededBits) + 1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channel].bars[i] = bits.read(neededBits);\r\n                        }\r\n                    }\r\n                }\r\n                charIndex += subStringLength;\r\n            } break;\r\n            case SongTagCode.patterns: {\r\n                let bitStringLength: number = 0;\r\n                let channel: number;\r\n                let largerChords: boolean = !((beforeFour && variant == \"jummbox\") || variant == \"beepbox\");\r\n                let recentPitchBitLength: number = ( largerChords ? 4 : 3 );\r\n                let recentPitchLength: number = ( largerChords ? 16 : 8 );\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default.\r\n                    charIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    bitStringLength = bitStringLength << 6;\r\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    channel = 0;\r\n                    let bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    while (bitStringLengthLength > 0) {\r\n                        bitStringLength = bitStringLength << 6;\r\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        bitStringLengthLength--;\r\n                    }\r\n                }\r\n\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\r\n                charIndex += bitStringLength;\r\n\r\n                let neededInstrumentBits: number = 0;\r\n                while ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n                while (true) {\r\n                    const isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n                    const isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n                    // Some info about modulator settings immediately follows in mod channels.\r\n                    if (isModChannel) {\r\n                        for (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n                            let instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                instrument.modStatuses[mod] = bits.read(2);\r\n\r\n                                // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n                                if (instrument.modStatuses[mod] == ModStatus.msForPitch || instrument.modStatuses[mod] == ModStatus.msForNoise) {\r\n\r\n                                    // Clamp to pitch/noise max\r\n                                    if (instrument.modStatuses[mod] == ModStatus.msForPitch) {\r\n                                        instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + 1, bits.read(8));\r\n                                    }\r\n                                    else {\r\n                                        instrument.modChannels[mod] = clamp(0, this.noiseChannelCount + 1, bits.read(8));\r\n                                    }\r\n\r\n                                    instrument.modInstruments[mod] = clamp(0, this.instrumentsPerChannel + 1, bits.read(neededInstrumentBits));\r\n                                }\r\n\r\n                                // Mod setting is only used if the status isn't \"none\".\r\n                                if (instrument.modStatuses[mod] != ModStatus.msNone) {\r\n                                    instrument.modSettings[mod] = bits.read(6);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * 12;\r\n                    let note: Note | null = null;\r\n                    let pin: NotePin | null = null;\r\n                    let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : 12) + octaveOffset;\r\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n                    const recentShapes: any[] = [];\r\n                    for (let i: number = 0; i < recentPitches.length; i++) {\r\n                        recentPitches[i] += octaveOffset;\r\n                    }\r\n                    for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                        const newPattern: Pattern = this.channels[channel].patterns[i];\r\n                        newPattern.reset();\r\n                        newPattern.instrument = bits.read(neededInstrumentBits);\r\n\r\n                        if (!(variant == \"beepbox\" && beforeThree) && bits.read(1) == 0) continue;\r\n\r\n                        let curPart: number = 0;\r\n                        const newNotes: Note[] = newPattern.notes;\r\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\r\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\r\n                            const useOldShape: boolean = bits.read(1) == 1;\r\n                            let newNote: boolean = false;\r\n                            let shapeIndex: number = 0;\r\n                            if (useOldShape) {\r\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\r\n                            } else {\r\n                                newNote = bits.read(1) == 1;\r\n                            }\r\n\r\n                            if (!useOldShape && !newNote) {\r\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\r\n                                if (isModChannel) {\r\n                                    const isBackwards: boolean = bits.read(1) == 1;\r\n                                    const restLength: number = bits.readPartDuration();\r\n                                    if (isBackwards) {\r\n                                        curPart -= restLength;\r\n                                    }\r\n                                    else {\r\n                                        curPart += restLength;\r\n                                    }\r\n                                } else {\r\n                                    const restLength: number = (beforeSeven && variant == \"beepbox\")\r\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                        : bits.readPartDuration();\r\n                                    curPart += restLength;\r\n\r\n                                }\r\n                            } else {\r\n                                let shape: any;\r\n                                let pinObj: any;\r\n                                let pitch: number;\r\n                                if (useOldShape) {\r\n                                    shape = recentShapes[shapeIndex];\r\n                                    recentShapes.splice(shapeIndex, 1);\r\n                                } else {\r\n                                    shape = {};\r\n\r\n                                    if (!largerChords) {\r\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\r\n                                        shape.pitchCount = 1;\r\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n                                    }\r\n                                    else {\r\n                                        // New format is:\r\n                                        //      0: 1 pitch\r\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                                        if (bits.read(1) == 1) {\r\n                                            shape.pitchCount = bits.read(3) + 2;\r\n                                        }\r\n                                        else {\r\n                                            shape.pitchCount = 1;\r\n                                        }\r\n                                    }\r\n                                    shape.pinCount = bits.readPinCount();\r\n\r\n                                    if (variant == \"beepbox\") {\r\n                                        shape.initialVolume = bits.read(2) * 2;\r\n                                    } else if (!isModChannel) {\r\n                                        shape.initialVolume = bits.read(3);\r\n                                    } else {\r\n                                        shape.initialVolume = bits.read(9);\r\n                                    }\r\n\r\n                                    shape.pins = [];\r\n                                    shape.length = 0;\r\n                                    shape.bendCount = 0;\r\n                                    for (let j: number = 0; j < shape.pinCount; j++) {\r\n                                        pinObj = {};\r\n                                        pinObj.pitchBend = bits.read(1) == 1;\r\n                                        if (pinObj.pitchBend) shape.bendCount++;\r\n                                        shape.length += (beforeSeven && variant == \"beepbox\")\r\n                                            ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                            : bits.readPartDuration();\r\n                                        pinObj.time = shape.length;\r\n\r\n                                        if (variant == \"beepbox\") {\r\n                                            pinObj.volume = bits.read(2) * 2;\r\n                                        } else if (!isModChannel) {\r\n                                            pinObj.volume = bits.read(3);\r\n                                        }\r\n                                        else {\r\n                                            pinObj.volume = bits.read(9);\r\n                                        }\r\n                                        shape.pins.push(pinObj);\r\n                                    }\r\n                                }\r\n                                recentShapes.unshift(shape);\r\n                                if (recentShapes.length > 10) recentShapes.pop();\r\n\r\n                                note = new Note(0, curPart, curPart + shape.length, shape.initialVolume);\r\n                                note.pitches = [];\r\n                                note.pins.length = 1;\r\n                                const pitchBends: number[] = [];\r\n                                for (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n                                    const useOldPitch: boolean = bits.read(1) == 1;\r\n                                    if (!useOldPitch) {\r\n                                        const interval: number = bits.readPitchInterval();\r\n                                        pitch = lastPitch;\r\n                                        let intervalIter: number = interval;\r\n                                        while (intervalIter > 0) {\r\n                                            pitch++;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\r\n                                            intervalIter--;\r\n                                        }\r\n                                        while (intervalIter < 0) {\r\n                                            pitch--;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\r\n                                            intervalIter++;\r\n                                        }\r\n                                    } else {\r\n                                        const pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\r\n                                        pitch = recentPitches[pitchIndex];\r\n                                        recentPitches.splice(pitchIndex, 1);\r\n                                    }\r\n\r\n                                    recentPitches.unshift(pitch);\r\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\r\n\r\n                                    if (j < shape.pitchCount) {\r\n                                        note.pitches.push(pitch);\r\n                                    } else {\r\n                                        pitchBends.push(pitch);\r\n                                    }\r\n\r\n                                    if (j == shape.pitchCount - 1) {\r\n                                        lastPitch = note.pitches[0];\r\n                                    } else {\r\n                                        lastPitch = pitch;\r\n                                    }\r\n                                }\r\n\r\n                                pitchBends.unshift(note.pitches[0]);\r\n\r\n                                for (const pinObj of shape.pins) {\r\n                                    if (pinObj.pitchBend) pitchBends.shift();\r\n                                    pin = makeNotePin(pitchBends[0] - note.pitches[0], pinObj.time, pinObj.volume);\r\n                                    note.pins.push(pin);\r\n                                }\r\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\r\n                                newNotes.push(note);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (beforeThree && variant == \"beepbox\") {\r\n                        break;\r\n                    } else {\r\n                        channel++;\r\n                        if (channel >= this.getChannelCount()) break;\r\n                    }\r\n                } // while (true)\r\n            } break;\r\n            default: {\r\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1));\r\n            } break;\r\n        }\r\n\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            if (toSetOctaves[channel] != null) {\r\n                this.channels[channel].octave = toSetOctaves[channel];\r\n            }\r\n        }\r\n    }\r\n\r\n    public toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n        const channelArray: Object[] = [];\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            const instrumentArray: Object[] = [];\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n            const isModChannel: boolean = this.getChannelIsMod(channel);\r\n            for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                instrumentArray.push(this.channels[channel].instruments[i].toJsonObject());\r\n            }\r\n\r\n            const patternArray: Object[] = [];\r\n            for (const pattern of this.channels[channel].patterns) {\r\n                const noteArray: Object[] = [];\r\n                for (const note of pattern.notes) {\r\n                    let volumeCap: number = this.getVolumeCapForSetting(isModChannel, this.channels[channel].instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n                    const pointArray: Object[] = [];\r\n                    for (const pin of note.pins) {\r\n                        let useVol: number = isModChannel ? Math.round(pin.volume) : Math.round(pin.volume * 100 / volumeCap);\r\n                        pointArray.push({\r\n                            \"tick\": (pin.time + note.start) * Config.rhythms[this.rhythm].stepsPerBeat / Config.partsPerBeat,\r\n                            \"pitchBend\": pin.interval,\r\n                            \"volume\": useVol,\r\n                            \"forMod\": isModChannel,\r\n                        });\r\n                    }\r\n\r\n                    noteArray.push({\r\n                        \"pitches\": note.pitches,\r\n                        \"points\": pointArray,\r\n                    });\r\n                }\r\n\r\n                patternArray.push({\r\n                    \"instrument\": pattern.instrument + 1,\r\n                    \"notes\": noteArray,\r\n                });\r\n            }\r\n\r\n            const sequenceArray: number[] = [];\r\n            if (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n                sequenceArray.push(this.channels[channel].bars[i]);\r\n            }\r\n            for (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n                sequenceArray.push(this.channels[channel].bars[i]);\r\n            }\r\n            if (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n                sequenceArray.push(this.channels[channel].bars[i]);\r\n            }\r\n\r\n            channelArray.push({\r\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\r\n                \"octaveScrollBar\": this.channels[channel].octave,\r\n                \"instruments\": instrumentArray,\r\n                \"patterns\": patternArray,\r\n                \"sequence\": sequenceArray,\r\n            });\r\n        }\r\n\r\n        return {\r\n            \"name\": this.title,\r\n            \"format\": Song._format,\r\n            \"version\": Song._latestJummBoxVersion,\r\n            \"scale\": Config.scales[this.scale].name,\r\n            \"key\": Config.keys[this.key].name,\r\n            \"introBars\": this.loopStart,\r\n            \"loopBars\": this.loopLength,\r\n            \"beatsPerBar\": this.beatsPerBar,\r\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\r\n            \"beatsPerMinute\": this.tempo,\r\n            \"reverb\": this.reverb,\r\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\r\n            //\"instrumentsPerChannel\": this.instrumentsPerChannel, //derive this from instrument arrays?\r\n            \"channels\": channelArray,\r\n        };\r\n    }\r\n\r\n    public fromJsonObject(jsonObject: any): void {\r\n        this.initToDefault(true);\r\n        if (!jsonObject) return;\r\n\r\n        //const version: number = jsonObject[\"version\"] | 0;\r\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\r\n\r\n        if (jsonObject[\"name\"] != undefined) {\r\n            this.title = jsonObject[\"name\"];\r\n        }\r\n\r\n        this.scale = 0; // default to free.\r\n        if (jsonObject[\"scale\"] != undefined) {\r\n            const oldScaleNames: Dictionary<string> = {\r\n                \"romani :)\": \"dbl harmonic :)\",\r\n                \"romani :(\": \"dbl harmonic :(\",\r\n                \"enigma\": \"strange\",\r\n            };\r\n            const scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\r\n            const scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\r\n            if (scale != -1) this.scale = scale;\r\n        }\r\n\r\n        if (jsonObject[\"key\"] != undefined) {\r\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\r\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\r\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\r\n                const key: string = jsonObject[\"key\"];\r\n                const letter: string = key.charAt(0).toUpperCase();\r\n                const symbol: string = key.charAt(1).toLowerCase();\r\n                const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\r\n                const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\r\n                let index: number | undefined = letterMap[letter];\r\n                const offset: number | undefined = accidentalMap[symbol];\r\n                if (index != undefined) {\r\n                    if (offset != undefined) index += offset;\r\n                    if (index < 0) index += 12;\r\n                    index = index % 12;\r\n                    this.key = index;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\r\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"reverb\"] != undefined) {\r\n            this.reverb = clamp(0, Config.reverbRange, jsonObject[\"reverb\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\r\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\r\n        }\r\n\r\n        let importedPartsPerBeat: number = 4;\r\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\r\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\r\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\r\n            if (this.rhythm == -1) {\r\n                this.rhythm = 1;\r\n            }\r\n        }\r\n\r\n        let maxInstruments: number = 1;\r\n        let maxPatterns: number = 1;\r\n        let maxBars: number = 1;\r\n        if (jsonObject[\"channels\"]) {\r\n            for (const channelObject of jsonObject[\"channels\"]) {\r\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\r\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\r\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\r\n            }\r\n        }\r\n\r\n        this.instrumentsPerChannel = Math.min(maxInstruments, Config.instrumentsPerChannelMax);\r\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\r\n        this.barCount = Math.min(maxBars, Config.barCountMax);\r\n\r\n        if (jsonObject[\"introBars\"] != undefined) {\r\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\r\n        }\r\n        if (jsonObject[\"loopBars\"] != undefined) {\r\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\r\n        }\r\n\r\n        const newPitchChannels: Channel[] = [];\r\n        const newNoiseChannels: Channel[] = [];\r\n        const newModChannels: Channel[] = [];\r\n        if (jsonObject[\"channels\"]) {\r\n            for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n                let channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n\r\n                const channel: Channel = new Channel();\r\n\r\n                let isNoiseChannel: boolean = false;\r\n                let isModChannel: boolean = false;\r\n                if (channelObject[\"type\"] != undefined) {\r\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\r\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\r\n                } else {\r\n                    // for older files, assume drums are channel 3.\r\n                    isNoiseChannel = (channelIndex >= 3);\r\n                }\r\n                if (isNoiseChannel) {\r\n                    newNoiseChannels.push(channel);\r\n                } else if (isModChannel) {\r\n                    newModChannels.push(channel);\r\n                }\r\n                else {\r\n                    newPitchChannels.push(channel);\r\n                }\r\n\r\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\r\n                    channel.octave = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, channelObject[\"octaveScrollBar\"] | 0);\r\n                }\r\n\r\n                for (let i: number = channel.instruments.length; i < this.instrumentsPerChannel; i++) {\r\n                    channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\r\n                }\r\n                channel.instruments.length = this.instrumentsPerChannel;\r\n\r\n                for (let i: number = channel.patterns.length; i < this.patternsPerChannel; i++) {\r\n                    channel.patterns[i] = new Pattern();\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                for (let i: number = 0; i < this.barCount; i++) {\r\n                    channel.bars[i] = 1;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n\r\n                for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                    const instrument: Instrument = channel.instruments[i];\r\n                    instrument.fromJsonObject(channelObject[\"instruments\"][i], isNoiseChannel, isModChannel, this.rhythm == 0 || this.rhythm == 2, this.rhythm >= 2);\r\n                }\r\n\r\n                for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                    const pattern: Pattern = channel.patterns[i];\r\n\r\n                    let patternObject: any = undefined;\r\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\r\n                    if (patternObject == undefined) continue;\r\n\r\n                    pattern.instrument = clamp(0, this.instrumentsPerChannel, (patternObject[\"instrument\"] | 0) - 1);\r\n\r\n                    if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\r\n                        const maxNoteCount: number = Math.min(this.beatsPerBar * Config.partsPerBeat, patternObject[\"notes\"].length >>> 0);\r\n\r\n                        //let tickClock: number = 0;\r\n                        for (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\r\n                            if (j >= maxNoteCount) break;\r\n\r\n                            const noteObject = patternObject[\"notes\"][j];\r\n                            if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\r\n                                continue;\r\n                            }\r\n\r\n                            const note: Note = new Note(0, 0, 0, 0);\r\n                            note.pitches = [];\r\n                            note.pins = [];\r\n\r\n                            for (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\r\n                                const pitch: number = noteObject[\"pitches\"][k] | 0;\r\n                                if (note.pitches.indexOf(pitch) != -1) continue;\r\n                                note.pitches.push(pitch);\r\n                                if (note.pitches.length >= Config.maxChordSize) break;\r\n                            }\r\n                            if (note.pitches.length < 1) continue;\r\n\r\n                            //let noteClock: number = tickClock;\r\n                            let startInterval: number = 0;\r\n                            for (let k: number = 0; k < noteObject[\"points\"].length; k++) {\r\n                                const pointObject: any = noteObject[\"points\"][k];\r\n                                if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\r\n                                const interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\r\n\r\n                                const time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\r\n\r\n                                let volumeCap: number = this.getVolumeCapForSetting(isModChannel, channel.instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\r\n                                // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\r\n                                // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\r\n                                let volume: number;\r\n                                if (pointObject[\"volume\"] == undefined) {\r\n                                    volume = volumeCap;\r\n                                } else if (pointObject[\"forMod\"] == undefined) {\r\n                                    volume = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                                }\r\n                                else {\r\n                                    volume = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                                }\r\n\r\n                                if (time > this.beatsPerBar * Config.partsPerBeat) continue;\r\n                                if (note.pins.length == 0) {\r\n                                    //if (time < noteClock) continue;\r\n                                    note.start = time;\r\n                                    startInterval = interval;\r\n                                } else {\r\n                                    //if (time <= noteClock) continue;\r\n                                }\r\n                                //noteClock = time;\r\n\r\n                                note.pins.push(makeNotePin(interval - startInterval, time - note.start, volume));\r\n                            }\r\n                            if (note.pins.length < 2) continue;\r\n\r\n                            note.end = note.pins[note.pins.length - 1].time + note.start;\r\n\r\n                            const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\r\n                            let lowestPitch: number = maxPitch;\r\n                            let highestPitch: number = 0;\r\n                            for (let k: number = 0; k < note.pitches.length; k++) {\r\n                                note.pitches[k] += startInterval;\r\n                                if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n                                    note.pitches.splice(k, 1);\r\n                                    k--;\r\n                                }\r\n                                if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n                                if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n                            }\r\n                            if (note.pitches.length < 1) continue;\r\n\r\n                            for (let k: number = 0; k < note.pins.length; k++) {\r\n                                const pin: NotePin = note.pins[k];\r\n                                if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n                                if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n                                if (k >= 2) {\r\n                                    if (pin.interval == note.pins[k - 1].interval &&\r\n                                        pin.interval == note.pins[k - 2].interval &&\r\n                                        pin.volume == note.pins[k - 1].volume &&\r\n                                        pin.volume == note.pins[k - 2].volume) {\r\n                                        note.pins.splice(k - 1, 1);\r\n                                        k--;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            pattern.notes.push(note);\r\n                            //tickClock = note.end;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (let i: number = 0; i < this.barCount; i++) {\r\n                    channel.bars[i] = channelObject[\"sequence\"] ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\r\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\r\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\r\n        this.pitchChannelCount = newPitchChannels.length;\r\n        this.noiseChannelCount = newNoiseChannels.length;\r\n        this.modChannelCount = newModChannels.length;\r\n        this.channels.length = 0;\r\n        Array.prototype.push.apply(this.channels, newPitchChannels);\r\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\r\n        Array.prototype.push.apply(this.channels, newModChannels);\r\n    }\r\n\r\n    public getPattern(channel: number, bar: number): Pattern | null {\r\n        if (bar < 0 || bar >= this.barCount) return null;\r\n        const patternIndex: number = this.channels[channel].bars[bar];\r\n        if (patternIndex == 0) return null;\r\n        return this.channels[channel].patterns[patternIndex - 1];\r\n    }\r\n\r\n    public getPatternInstrument(channel: number, bar: number): number {\r\n        const pattern: Pattern | null = this.getPattern(channel, bar);\r\n        return pattern == null ? 0 : pattern.instrument;\r\n    }\r\n\r\n    public getBeatsPerMinute(): number {\r\n        return this.tempo;\r\n    }\r\n\r\n}\r\n\r\nclass Tone {\r\n    public instrument: Instrument;\r\n    public readonly pitches: number[] = [0, 0, 0, 0];\r\n    public pitchCount: number = 0;\r\n    public chordSize: number = 0;\r\n    public drumsetPitch: number = 0;\r\n    public note: Note | null = null;\r\n    public prevNote: Note | null = null;\r\n    public nextNote: Note | null = null;\r\n    public prevNotePitchIndex: number = 0;\r\n    public nextNotePitchIndex: number = 0;\r\n    public active: boolean = false;\r\n    public noteStart: number = 0;\r\n    public noteEnd: number = 0;\r\n    public noteLengthTicks: number = 0;\r\n    public ticksSinceReleased: number = 0;\r\n    public liveInputSamplesHeld: number = 0;\r\n    public lastInterval: number = 0;\r\n    public lastVolume: number = 0;\r\n    public stereoVolume1: number = 0.0;\r\n    public stereoVolume2: number = 0.0;\r\n    public stereoOffset: number = 0.0;\r\n    public stereoDelay: number = 0.0;\r\n    public sample: number = 0.0;\r\n    public readonly phases: number[] = [];\r\n    public readonly phaseDeltas: number[] = [];\r\n    public readonly volumeStarts: number[] = [];\r\n    public readonly volumeDeltas: number[] = [];\r\n    public volumeStart: number = 0.0;\r\n    public volumeDelta: number = 0.0;\r\n    public phaseDeltaScale: number = 0.0;\r\n    public pulseWidth: number = 0.0;\r\n    public pulseWidthDelta: number = 0.0;\r\n    public filter: number = 0.0;\r\n    public filterScale: number = 0.0;\r\n    public filterSample0: number = 0.0;\r\n    public filterSample1: number = 0.0;\r\n    public vibratoScale: number = 0.0;\r\n    public intervalMult: number = 0.0;\r\n    public intervalVolumeMult: number = 1.0;\r\n    public feedbackOutputs: number[] = [];\r\n    public feedbackMult: number = 0.0;\r\n    public feedbackDelta: number = 0.0;\r\n    public stereoVolumeLStart: number = 0.0;\r\n    public stereoVolumeRStart: number = 0.0;\r\n    public stereoVolumeLDelta: number = 0.0;\r\n    public stereoVolumeRDelta: number = 0.0;\r\n    public stereoDelayStart: number = 0.0;\r\n    public stereoDelayEnd: number = 0.0;\r\n    public stereoDelayDelta: number = 0.0;\r\n    public customVolumeStart: number = 0.0;\r\n    public customVolumeEnd: number = 0.0;\r\n    public filterResonanceStart: number = 0.0;\r\n    public filterResonanceDelta: number = 0.0;\r\n    public isFirstOrder: boolean = false;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            this.phases[i] = 0.0;\r\n            this.feedbackOutputs[i] = 0.0;\r\n        }\r\n        this.sample = 0.0;\r\n        this.filterSample0 = 0.0;\r\n        this.filterSample1 = 0.0;\r\n        this.liveInputSamplesHeld = 0.0;\r\n    }\r\n\r\n}\r\n\r\nexport class Synth {\r\n\r\n    public warmUpSynthesizer(song: Song | null): void {\r\n        // Don't bother to generate the drum waves unless the song actually\r\n        // uses them, since they may require a lot of computation.\r\n        if (song != null) {\r\n            for (let channel: number = 0; channel < song.getChannelCount(); channel++) {\r\n                for (let instrument: number = 0; instrument < song.instrumentsPerChannel; instrument++) {\r\n                    Synth.getInstrumentSynthFunction(song.channels[channel].instruments[instrument]);\r\n                    song.channels[channel].instruments[instrument].warmUp();\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public computeLatestModValues(): void {\r\n\r\n        if (this.song != null && this.song.modChannelCount > 0) {\r\n\r\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\r\n            let latestModTimes: (number | null)[] = [];\r\n            let latestModInsTimes: (number | null)[][][] = [];\r\n            this.modValues = [];\r\n            this.nextModValues = [];\r\n            this.modInsValues = [];\r\n            this.nextModInsValues = [];\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                latestModInsTimes[channel] = [];\r\n                this.modInsValues[channel] = [];\r\n                this.nextModInsValues[channel] = [];\r\n                for (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n                    this.modInsValues[channel][instrument] = [];\r\n                    this.nextModInsValues[channel][instrument] = [];\r\n                    latestModInsTimes[channel][instrument] = [];\r\n                }\r\n            }\r\n\r\n            // Find out where we're at in the fraction of the current bar.\r\n            let currentPart: number = this.beat * Config.partsPerBeat + this.part;\r\n\r\n            // For mod channels, calculate last set value for each mod\r\n            for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                if (!(this.song.channels[channel].muted)) {\r\n\r\n                    let pattern: Pattern | null;\r\n\r\n                    for (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\r\n                        pattern = this.song.getPattern(channel, currentBar);\r\n\r\n                        if (pattern != null) {\r\n                            let instrumentIdx: number = this.song.getPatternInstrument(channel, currentBar);\r\n                            let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                            let latestPinParts: number[] = [];\r\n                            let latestPinValues: number[] = [];\r\n\r\n                            let partsInBar: number = (currentBar == this.bar)\r\n                                ? currentPart\r\n                                : this.findPartsInBar(currentBar);\r\n\r\n                            for (const note of pattern.notes) {\r\n                                if (note.start < partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\r\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].volume;\r\n                                    }\r\n                                    else {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            // Set modulator value, if it wasn't set in another pattern already scanned\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                if (latestPinParts[mod] != null) {\r\n                                    if (instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                                        if (latestModTimes[instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modSettings[mod]] as number)) {\r\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n                                            latestModTimes[instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                        }\r\n                                    }\r\n                                    else if (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] as number)) {\r\n                                        this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n                                        latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static operatorAmplitudeCurve(amplitude: number): number {\r\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n    }\r\n\r\n    public samplesPerSecond: number = 44100;\r\n\r\n    public song: Song | null = null;\r\n    public liveInputDuration: number = 0;\r\n    public liveInputStarted: boolean = false;\r\n    public liveInputPitches: number[] = [];\r\n    public liveInputChannel: number = 0;\r\n    public loopRepeatCount: number = -1;\r\n    public volume: number = 1.0;\r\n\r\n    private wantToSkip: boolean = false;\r\n    private playheadInternal: number = 0.0;\r\n    private bar: number = 0;\r\n    private beat: number = 0;\r\n    private part: number = 0;\r\n    private tick: number = 0;\r\n    private tickSampleCountdown: number = 0;\r\n    private modValues: (number | null)[];\r\n    private modInsValues: (number | null)[][][];\r\n    private nextModValues: (number | null)[];\r\n    private nextModInsValues: (number | null)[][][];\r\n    private isPlayingSong: boolean = false;\r\n    private liveInputEndTime: number = 0.0;\r\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\r\n    private readonly activeTones: Array<Deque<Tone>> = [];\r\n    private tyingOver: number[] = [];\r\n    private readonly activeModTones: Array<Array<Deque<Tone>>> = [];\r\n    //private readonly releasedModTones: Array<Array<Deque<Tone>>> = [];\r\n    private readonly releasedTones: Array<Deque<Tone>> = [];\r\n    private readonly liveInputTones: Deque<Tone> = new Deque<Tone>();\r\n\r\n    //private highpassInput: number = 0.0;\r\n    //private highpassOutput: number = 0.0;\r\n    private limit: number = 0.0;\r\n\r\n    private stereoBufferIndex: number = 0;\r\n    private samplesForNone: Float32Array | null = null;\r\n    private samplesForReverb: Float32Array | null = null;\r\n    private samplesForChorus: Float32Array | null = null;\r\n    private samplesForChorusReverb: Float32Array | null = null;\r\n\r\n    private chorusDelayLine: Float32Array = new Float32Array(2048);\r\n    private chorusDelayPos: number = 0;\r\n    private chorusPhase: number = 0;\r\n\r\n    private reverbDelayLine: Float32Array = new Float32Array(16384);\r\n    private reverbDelayPos: number = 0;\r\n    private reverbFeedback0: number = 0.0;\r\n    private reverbFeedback1: number = 0.0;\r\n    private reverbFeedback2: number = 0.0;\r\n    private reverbFeedback3: number = 0.0;\r\n\r\n    private audioCtx: any | null = null;\r\n    private scriptNode: any | null = null;\r\n\r\n    public get playing(): boolean {\r\n        return this.isPlayingSong;\r\n    }\r\n\r\n    public get playhead(): number {\r\n        return this.playheadInternal;\r\n    }\r\n\r\n    public set playhead(value: number) {\r\n        if (this.song != null) {\r\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n            let remainder: number = this.playheadInternal;\r\n            this.bar = Math.floor(remainder);\r\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\r\n            this.beat = Math.floor(remainder);\r\n            remainder = Config.partsPerBeat * (remainder - this.beat);\r\n            this.part = Math.floor(remainder);\r\n            remainder = Config.ticksPerPart * (remainder - this.part);\r\n            this.tick = Math.floor(remainder);\r\n            const samplesPerTick: number = this.getSamplesPerTick();\r\n            remainder = samplesPerTick * (remainder - this.tick);\r\n            this.tickSampleCountdown = samplesPerTick - remainder;\r\n        }\r\n    }\r\n\r\n    public getSamplesPerBar(): number {\r\n        if (this.song == null) throw new Error();\r\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\r\n    }\r\n\r\n    // Calculate the total number of parts that will be played in the current bar before any next bar mods trigger.\r\n    private findPartsInBar(bar: number): number {\r\n        if (this.song == null) return 0;\r\n        let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n            if (pattern != null) {\r\n                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    if (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                        for (const note of pattern.notes) {\r\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                // Find the earliest next bar note.\r\n                                if (partsInBar > note.start)\r\n                                    partsInBar = note.start;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return partsInBar;\r\n    }\r\n\r\n    // Returns the total samples in the song\r\n    public getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\r\n        if (this.song == null)\r\n            return -1;\r\n\r\n        // Compute the window to be checked (start bar to end bar)\r\n        let startBar: number = enableIntro ? 0 : this.song.loopStart;\r\n        let endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\r\n        let hasTempoMods: boolean = false;\r\n        let hasNextBarMods: boolean = false;\r\n        let prevTempo: number = this.song.tempo;\r\n\r\n        // Determine if any tempo or next bar mods happen anywhere in the window\r\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n            for (let bar: number = startBar; bar < endBar; bar++) {\r\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                if (pattern != null) {\r\n                    let instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        if (instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                            hasTempoMods = true;\r\n                        }\r\n                        if (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                            hasNextBarMods = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\r\n        if (startBar > 0) {\r\n            let latestTempoPin: number | null = null;\r\n            let latestTempoValue: number = 0;\r\n\r\n            for (let bar: number = startBar - 1; bar >= 0; bar--) {\r\n                for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                    let pattern = this.song.getPattern(channel, bar);\r\n\r\n                    if (pattern != null) {\r\n                        let instrumentIdx: number = this.song.getPatternInstrument(channel, bar);\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\r\n                        let partsInBar: number = this.findPartsInBar(bar);\r\n\r\n                        for (const note of pattern.notes) {\r\n                            if (instrument.modSettings[Config.modCount - 1 - note.pitches[0]] == ModSetting.mstTempo && instrument.modStatuses[Config.modCount - 1 - note.pitches[0]] == ModStatus.msForSong) {\r\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestTempoPin = note.end;\r\n                                        latestTempoValue = note.pins[note.pins.length - 1].volume;\r\n                                    }\r\n                                    else {\r\n                                        latestTempoPin = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                }\r\n\r\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\r\n                if (latestTempoPin != null) {\r\n                    prevTempo = this.song.modValueToReal(latestTempoValue, ModSetting.mstTempo);\r\n                    bar = -1;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasTempoMods || hasNextBarMods) {\r\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\r\n            let bar: number = startBar;\r\n            let ended: boolean = false;\r\n            let totalSamples: number = 0;\r\n\r\n            while (!ended) {\r\n                // Compute the subsection of the pattern that will play\r\n                let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n                let currentPart: number = 0;\r\n\r\n                if (hasNextBarMods) {\r\n                    partsInBar = this.findPartsInBar(bar);\r\n                }\r\n\r\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\r\n                if (hasTempoMods) {\r\n                    let foundMod: boolean = false;\r\n                    for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                        if (foundMod == false) {\r\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                            if (pattern != null) {\r\n                                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n                                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                    if (foundMod == false && instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong\r\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\r\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\r\n                                        foundMod = true;\r\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\r\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\r\n                                        for (const note of pattern.notes) {\r\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                                // Compute samples up to this note\r\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                                                if (note.start < partsInBar) {\r\n                                                    for (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\r\n                                                        // Compute samples up to this pin\r\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\r\n                                                            const tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\r\n                                                            const prevPinTempo: number = this.song.modValueToReal(note.pins[pinIdx - 1].volume, ModSetting.mstTempo);\r\n                                                            let currPinTempo: number = this.song.modValueToReal(note.pins[pinIdx].volume, ModSetting.mstTempo);\r\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\r\n                                                                currPinTempo = this.song.modValueToReal(note.pins[pinIdx - 1].volume + (note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time), ModSetting.mstTempo);\r\n                                                            }\r\n                                                            let bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\r\n\r\n                                                            if (currPinTempo != prevPinTempo) {\r\n\r\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\r\n                                                                // The starting formula is\r\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\r\n                                                                //\r\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\r\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\r\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\r\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\r\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\r\n                                                                //\r\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\r\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\r\n\r\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\r\n\r\n                                                            }\r\n                                                            else {\r\n\r\n                                                                // No tempo change between the two pins.\r\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\r\n\r\n                                                            }\r\n                                                            prevTempo = currPinTempo;\r\n                                                        }\r\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Compute samples for the rest of the bar\r\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                bar++;\r\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\r\n                    bar = this.song.loopStart;\r\n                    if (loop > 0) loop--;\r\n                }\r\n                if (bar >= endBar) {\r\n                    ended = true;\r\n                }\r\n            }\r\n\r\n            return Math.ceil(totalSamples);\r\n        }\r\n        else {\r\n            // No tempo or next bar mods... phew! Just calculate normally.\r\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\r\n        }\r\n    }\r\n\r\n    public getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\r\n        if (this.song == null) throw new Error();\r\n        let bars: number = this.song.loopLength * (useLoopCount + 1);\r\n        if (enableIntro) bars += this.song.loopStart;\r\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n        return bars;\r\n    }\r\n\r\n    constructor(song: Song | string | null = null) {\r\n        if (song != null) this.setSong(song);\r\n    }\r\n\r\n    public setSong(song: Song | string): void {\r\n        if (typeof (song) == \"string\") {\r\n            this.song = new Song(song);\r\n        } else if (song instanceof Song) {\r\n            this.song = song;\r\n        }\r\n    }\r\n\r\n    public setModValue(volumeStart: number, volumeEnd: number, mod: number, instrument: Instrument, setting: ModSetting): number {\r\n        let val: number;\r\n        let nextVal: number;\r\n        switch (setting) {\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstTempo:\r\n            case ModSetting.mstSongDetune:\r\n                val = (this.song as Song).modValueToReal(volumeStart, setting);\r\n                nextVal = (this.song as Song).modValueToReal(volumeEnd, setting);\r\n                if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\r\n                    this.modValues[setting] = val;\r\n                    this.nextModValues[setting] = nextVal;\r\n                }\r\n                break;\r\n            case ModSetting.mstInsVolume:\r\n            case ModSetting.mstPan:\r\n            case ModSetting.mstPulseWidth:\r\n            case ModSetting.mstFilterCut:\r\n            case ModSetting.mstFilterPeak:\r\n            case ModSetting.mstFMSlider1:\r\n            case ModSetting.mstFMSlider2:\r\n            case ModSetting.mstFMSlider3:\r\n            case ModSetting.mstFMSlider4:\r\n            case ModSetting.mstFMFeedback:\r\n            case ModSetting.mstVibratoDepth:\r\n            case ModSetting.mstVibratoSpeed:\r\n            case ModSetting.mstVibratoDelay:\r\n            case ModSetting.mstArpeggioSpeed:\r\n            case ModSetting.mstPanDelay:\r\n            case ModSetting.mstResetArpeggio:\r\n            case ModSetting.mstDetune:\r\n                val = this.song!.modValueToReal(volumeStart, setting);\r\n                nextVal = this.song!.modValueToReal(volumeEnd, setting);\r\n                let channelAdjust: number = instrument.modChannels[mod] + ((instrument.modStatuses[mod] == ModStatus.msForNoise) ? this.song!.pitchChannelCount : 0);\r\n\r\n                if (this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] == null\r\n                    || this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != val\r\n                    || this.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != nextVal) {\r\n                    this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = val;\r\n                    this.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = nextVal;\r\n                }\r\n                break;\r\n            case ModSetting.mstNextBar:\r\n                val = (this.song as Song).modValueToReal(volumeStart, setting);\r\n                break;\r\n            case ModSetting.mstNone:\r\n            default:\r\n                val = -1;\r\n                break;\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    public getModValue(setting: ModSetting, forSong: boolean, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\r\n        if (forSong) {\r\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\r\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\r\n            }\r\n        } else if (channel != undefined && instrument != undefined) {\r\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\r\n    public isAnyModActive(channel: number, instrument: number): boolean {\r\n        for (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n            if ((this.modValues != undefined && this.modValues[setting] != null)\r\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public unsetMod(setting: ModSetting, channel?: number, instrument?: number) {\r\n        if (this.isModActive(setting, true) || (channel != undefined && instrument != undefined && this.isModActive(setting, false, channel, instrument))) {\r\n            this.modValues[setting] = null;\r\n            this.nextModValues[setting] = null;\r\n            if (channel != undefined && instrument != undefined) {\r\n                this.modInsValues[channel][instrument][setting] = null;\r\n                this.nextModInsValues[channel][instrument][setting] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isModActive(setting: ModSetting, forSong: boolean, channel?: number, instrument?: number): boolean {\r\n        if (forSong) {\r\n            return (this.modValues != undefined && this.modValues[setting] != null);\r\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null && this.modInsValues[channel][instrument][setting] != null) {\r\n            return (this.modInsValues[channel][instrument][setting] != null);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private activateAudio(): void {\r\n        if (this.audioCtx == null || this.scriptNode == null) {\r\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)();\r\n            this.samplesPerSecond = this.audioCtx.sampleRate;\r\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(2048, 0, 2) : this.audioCtx.createJavaScriptNode(2048, 0, 2); // 2048, 0 input channels, 2 output channels\r\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n            this.scriptNode.channelCountMode = 'explicit';\r\n            this.scriptNode.channelInterpretation = 'speakers';\r\n            this.scriptNode.connect(this.audioCtx.destination);\r\n        }\r\n        this.audioCtx.resume();\r\n    }\r\n\r\n    private deactivateAudio(): void {\r\n        if (this.audioCtx != null && this.scriptNode != null) {\r\n            this.scriptNode.disconnect(this.audioCtx.destination);\r\n            this.scriptNode = null;\r\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n            this.audioCtx = null;\r\n        }\r\n    }\r\n\r\n    public maintainLiveInput(): void {\r\n        this.activateAudio();\r\n        this.liveInputEndTime = performance.now() + 10000.0;\r\n    }\r\n\r\n    public play(): void {\r\n        if (this.isPlayingSong) return;\r\n        this.isPlayingSong = true;\r\n        this.warmUpSynthesizer(this.song);\r\n        this.computeLatestModValues();\r\n        this.activateAudio();\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.isPlayingSong) return;\r\n        this.isPlayingSong = false;\r\n        if (this.song != null) {\r\n            this.song.inVolumeCap = 0.0;\r\n            this.song.outVolumeCap = 0.0;\r\n        }\r\n        this.modValues = [];\r\n        this.modInsValues = [];\r\n        this.nextModValues = [];\r\n        this.nextModInsValues = [];\r\n        this.tyingOver = [];\r\n    }\r\n\r\n    public snapToStart(): void {\r\n        this.bar = 0;\r\n        this.snapToBar();\r\n    }\r\n\r\n    public goToBar(bar: number): void {\r\n        this.bar = bar;\r\n        this.playheadInternal = this.bar;\r\n    }\r\n\r\n    public snapToBar(): void {\r\n        this.playheadInternal = this.bar;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = 0;\r\n    }\r\n\r\n    public resetEffects(): void {\r\n        this.reverbDelayPos = 0;\r\n        this.reverbFeedback0 = 0.0;\r\n        this.reverbFeedback1 = 0.0;\r\n        this.reverbFeedback2 = 0.0;\r\n        this.reverbFeedback3 = 0.0;\r\n        //this.highpassInput = 0.0;\r\n        //this.highpassOutput = 0.0;\r\n        this.freeAllTones();\r\n        for (let i: number = 0; i < this.reverbDelayLine.length; i++) this.reverbDelayLine[i] = 0.0;\r\n        for (let i: number = 0; i < this.chorusDelayLine.length; i++) this.chorusDelayLine[i] = 0.0;\r\n        if (this.samplesForNone != null) for (let i: number = 0; i < this.samplesForNone.length; i++) this.samplesForNone[i] = 0.0;\r\n        if (this.samplesForReverb != null) for (let i: number = 0; i < this.samplesForReverb.length; i++) this.samplesForReverb[i] = 0.0;\r\n        if (this.samplesForChorus != null) for (let i: number = 0; i < this.samplesForChorus.length; i++) this.samplesForChorus[i] = 0.0;\r\n        if (this.samplesForChorusReverb != null) for (let i: number = 0; i < this.samplesForChorusReverb.length; i++) this.samplesForChorusReverb[i] = 0.0;\r\n    }\r\n\r\n    public jumpIntoLoop(): void {\r\n        if (!this.song) return;\r\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\r\n            const oldBar: number = this.bar;\r\n            this.bar = this.song.loopStart;\r\n            this.playheadInternal += this.bar - oldBar;\r\n\r\n            if (this.playing)\r\n                this.computeLatestModValues();\r\n        }\r\n    }\r\n\r\n    public nextBar(): void {\r\n        if (!this.song) return;\r\n        const oldBar: number = this.bar;\r\n        this.bar++;\r\n        if (this.bar >= this.song.barCount) {\r\n            this.bar = 0;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public skipBar(): void {\r\n        if (!this.song) return;\r\n        const samplesPerTick: number = this.getSamplesPerTick();\r\n        this.bar++;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = samplesPerTick;\r\n\r\n        if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n            this.bar = this.song.loopStart;\r\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n        }\r\n\r\n    }\r\n\r\n    public firstBar(): void {\r\n        if (!this.song) return;\r\n        this.bar = 0;\r\n        this.playheadInternal = 0;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public jumpToEditingBar(bar: number): void {\r\n        if (!this.song) return;\r\n\r\n        this.bar = bar;\r\n\r\n        this.playheadInternal = bar;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public prevBar(): void {\r\n        if (!this.song) return;\r\n        const oldBar: number = this.bar;\r\n        this.bar--;\r\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\r\n            this.bar = this.song.barCount - 1;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\r\n        const outputBuffer = audioProcessingEvent.outputBuffer;\r\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n        const isPlayingLiveTones = performance.now() < this.liveInputEndTime;\r\n        if (!isPlayingLiveTones && !this.isPlayingSong) {\r\n            for (let i: number = 0; i < outputBuffer.length; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n            this.deactivateAudio();\r\n        } else {\r\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\r\n        }\r\n    }\r\n\r\n    public synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\r\n        if (this.song == null) {\r\n            for (let i: number = 0; i < outputBufferLength; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n            this.deactivateAudio();\r\n            return;\r\n        }\r\n\r\n        this.song.inVolumeCap = 0.0; // Reset volume cap for this run\r\n        this.song.outVolumeCap = 0.0;\r\n\r\n        const channelCount: number = this.song.pitchChannelCount + this.song.noiseChannelCount;\r\n\r\n        for (let i: number = this.activeTones.length; i < channelCount; i++) {\r\n            this.activeTones[i] = new Deque<Tone>();\r\n            this.releasedTones[i] = new Deque<Tone>();\r\n        }\r\n        this.activeTones.length = channelCount;\r\n        this.releasedTones.length = channelCount;\r\n        if ( channelCount != this.tyingOver.length ) {\r\n            let idx: number = this.tyingOver.length;\r\n            this.tyingOver.length = channelCount;\r\n            while ( idx < this.tyingOver.length ) {\r\n                this.tyingOver[idx++] = -1;\r\n            }\r\n        }\r\n\r\n        for (let i: number = this.activeModTones.length; i < this.song.modChannelCount; i++) {\r\n            this.activeModTones[i] = [];\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                this.activeModTones[i][mod] = new Deque<Tone>();\r\n            }\r\n            this.activeModTones[i].length = Config.modCount;\r\n        }\r\n        this.activeModTones.length = this.song.modChannelCount;\r\n\r\n        let samplesPerTick: number = this.getSamplesPerTick();\r\n        let bufferIndex: number = 0;\r\n        let ended: boolean = false;\r\n\r\n        // Check the bounds of the playhead:\r\n        while (this.tickSampleCountdown <= 0) this.tickSampleCountdown += samplesPerTick;\r\n        if (this.tickSampleCountdown > samplesPerTick) this.tickSampleCountdown = samplesPerTick;\r\n        if (playSong) {\r\n            if (this.beat >= this.song.beatsPerBar) {\r\n                this.bar++;\r\n                this.beat = 0;\r\n                this.part = 0;\r\n                this.tick = 0;\r\n                this.tickSampleCountdown = samplesPerTick;\r\n\r\n                if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n                    this.bar = this.song.loopStart;\r\n                    if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n                }\r\n            }\r\n            if (this.bar >= this.song.barCount) {\r\n                this.bar = 0;\r\n                if (this.loopRepeatCount != -1) {\r\n                    ended = true;\r\n                    this.pause();\r\n                }\r\n            }\r\n        }\r\n\r\n        //const synthStartTime: number = performance.now();\r\n\r\n        const stereoBufferLength: number = outputBufferLength * 4;\r\n        if (this.samplesForNone == null || this.samplesForNone.length != stereoBufferLength ||\r\n            this.samplesForReverb == null || this.samplesForReverb.length != stereoBufferLength ||\r\n            this.samplesForChorus == null || this.samplesForChorus.length != stereoBufferLength ||\r\n            this.samplesForChorusReverb == null || this.samplesForChorusReverb.length != stereoBufferLength) {\r\n            this.samplesForNone = new Float32Array(stereoBufferLength);\r\n            this.samplesForReverb = new Float32Array(stereoBufferLength);\r\n            this.samplesForChorus = new Float32Array(stereoBufferLength);\r\n            this.samplesForChorusReverb = new Float32Array(stereoBufferLength);\r\n            this.stereoBufferIndex = 0;\r\n        }\r\n        let stereoBufferIndex: number = this.stereoBufferIndex;\r\n        const samplesForNone: Float32Array = this.samplesForNone;\r\n        const samplesForReverb: Float32Array = this.samplesForReverb;\r\n        const samplesForChorus: Float32Array = this.samplesForChorus;\r\n        const samplesForChorusReverb: Float32Array = this.samplesForChorusReverb;\r\n\r\n        // Post processing parameters:\r\n        const volume: number = +this.volume;\r\n        const chorusDelayLine: Float32Array = this.chorusDelayLine;\r\n        const reverbDelayLine: Float32Array = this.reverbDelayLine;\r\n        const chorusDuration: number = 2.0;\r\n        const chorusAngle: number = Math.PI * 2.0 / (chorusDuration * this.samplesPerSecond);\r\n        const chorusRange: number = 150 * this.samplesPerSecond / 44100;\r\n        const chorusOffset0: number = 0x800 - 1.51 * chorusRange;\r\n        const chorusOffset1: number = 0x800 - 2.10 * chorusRange;\r\n        const chorusOffset2: number = 0x800 - 3.35 * chorusRange;\r\n        const chorusOffset3: number = 0x800 - 1.47 * chorusRange;\r\n        const chorusOffset4: number = 0x800 - 2.15 * chorusRange;\r\n        const chorusOffset5: number = 0x800 - 3.25 * chorusRange;\r\n        let chorusPhase: number = this.chorusPhase % (Math.PI * 2.0);\r\n        let chorusDelayPos: number = this.chorusDelayPos & 0x7FF;\r\n        let reverbDelayPos: number = this.reverbDelayPos & 0x3FFF;\r\n        let reverbFeedback0: number = +this.reverbFeedback0;\r\n        let reverbFeedback1: number = +this.reverbFeedback1;\r\n        let reverbFeedback2: number = +this.reverbFeedback2;\r\n        let reverbFeedback3: number = +this.reverbFeedback3;\r\n        let useReverb: number = this.song.reverb;\r\n        if (this.isModActive(ModSetting.mstReverb, true)) {\r\n            useReverb = this.getModValue(ModSetting.mstReverb, true);\r\n        }\r\n        let reverb: number = Math.pow(useReverb / Config.reverbRange, 0.667) * 0.425;\r\n        //const highpassFilter: number = Math.pow(0.5, 400 / this.samplesPerSecond);\r\n        const limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond); // Default 4.0\r\n        const limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond); // Default 4000.0;\r\n        const compressionThreshold: number = this.song.compressionThreshold; // Default 1\r\n        const limitThreshold: number = this.song.limitThreshold; // Default 1\r\n        const compressionRatio: number = this.song.compressionRatio; // Default 1\r\n        const limitRatio: number = this.song.limitRatio; // Default 1\r\n        const masterGain: number = this.song.masterGain; // Default 1\r\n        //let highpassInput: number = +this.highpassInput;\r\n        //let highpassOutput: number = +this.highpassOutput;\r\n        let limit: number = +this.limit;\r\n\r\n        while (bufferIndex < outputBufferLength && !ended) {\r\n\r\n            const samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\r\n            const runLength: number = Math.min(Math.ceil(this.tickSampleCountdown), samplesLeftInBuffer);\r\n\r\n            for (let modChannel: number = 0, channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; modChannel < this.song.modChannelCount; modChannel++, channel++) {\r\n                // Also determines mod tones.\r\n                this.determineCurrentActiveTones(this.song, channel, playSong);\r\n\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    for (let i: number = 0; i < this.activeModTones[modChannel][mod].count(); i++) {\r\n                        const tone: Tone = this.activeModTones[modChannel][mod].get(i);\r\n\r\n                        if (this.song.channels[channel].muted == false)\r\n                            this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Handle next bar mods if they were set\r\n            if ( this.wantToSkip ) {\r\n                this.wantToSkip = false;\r\n                this.skipBar();\r\n            }\r\n\r\n            if (this.isModActive(ModSetting.mstReverb, true)) {\r\n                reverb = Math.pow(this.getModValue(ModSetting.mstReverb, true) / Config.reverbRange, 0.667) * 0.425;\r\n            }\r\n\r\n            // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\r\n\r\n            const tickSampleCountdown: number = this.tickSampleCountdown;\r\n            const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n            const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n            const ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n            const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n            const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n            const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n            const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                for (let instrumentIdx: number = 0; instrumentIdx < this.song.instrumentsPerChannel; instrumentIdx++) {\r\n                    let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                    let useVibratoSpeed: number = instrument.vibratoSpeed;\r\n\r\n                    instrument.LFOtime = instrument.nextLFOtime;\r\n\r\n                    if (this.isModActive(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx)) {\r\n                        useVibratoSpeed = this.getModValue(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx, false);\r\n                    }\r\n\r\n                    if (useVibratoSpeed == 0) {\r\n                        instrument.LFOtime = 0;\r\n                        instrument.nextLFOtime = 0;\r\n                    }\r\n                    else {\r\n                        instrument.nextLFOtime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\r\n                if (channel == this.liveInputChannel) {\r\n                    this.determineLiveInputTones(this.song);\r\n\r\n                    for (let i: number = 0; i < this.liveInputTones.count(); i++) {\r\n                        const tone: Tone = this.liveInputTones.get(i);\r\n                        // Hmm. Will allow active input from a muted channel for now.\r\n                        //if (this.song.channels[channel].muted == false)\r\n                        this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n                    }\r\n                }\r\n\r\n                this.determineCurrentActiveTones(this.song, channel, playSong);\r\n                for (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n                    const tone: Tone = this.activeTones[channel].get(i);\r\n                    this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n                }\r\n\r\n                for (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n                    const tone: Tone = this.releasedTones[channel].get(i);\r\n                    if (tone.ticksSinceReleased >= tone.instrument.getTransition().releaseTicks) {\r\n                        this.freeReleasedTone(channel, i);\r\n                        i--;\r\n                        continue;\r\n                    }\r\n\r\n                    const shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\r\n                    this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, true, shouldFadeOutFast);\r\n\r\n                }\r\n            }\r\n\r\n            // Post processing:\r\n            let chorusTap0Index: number = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n            let chorusTap1Index: number = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n            let chorusTap2Index: number = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n            let chorusTap3Index: number = chorusDelayPos + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n            let chorusTap4Index: number = chorusDelayPos + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n            let chorusTap5Index: number = chorusDelayPos + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n            chorusPhase += chorusAngle * runLength;\r\n            const chorusTap0End: number = chorusDelayPos + runLength + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n            const chorusTap1End: number = chorusDelayPos + runLength + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n            const chorusTap2End: number = chorusDelayPos + runLength + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n            const chorusTap3End: number = chorusDelayPos + runLength + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n            const chorusTap4End: number = chorusDelayPos + runLength + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n            const chorusTap5End: number = chorusDelayPos + runLength + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n            const chorusTap0Delta: number = (chorusTap0End - chorusTap0Index) / runLength;\r\n            const chorusTap1Delta: number = (chorusTap1End - chorusTap1Index) / runLength;\r\n            const chorusTap2Delta: number = (chorusTap2End - chorusTap2Index) / runLength;\r\n            const chorusTap3Delta: number = (chorusTap3End - chorusTap3Index) / runLength;\r\n            const chorusTap4Delta: number = (chorusTap4End - chorusTap4Index) / runLength;\r\n            const chorusTap5Delta: number = (chorusTap5End - chorusTap5Index) / runLength;\r\n            const runEnd: number = bufferIndex + runLength;\r\n            for (let i: number = bufferIndex; i < runEnd; i++) {\r\n                const bufferIndexL: number = stereoBufferIndex;\r\n                const bufferIndexR: number = stereoBufferIndex + 1;\r\n                const sampleForNoneL: number = samplesForNone[bufferIndexL]; samplesForNone[bufferIndexL] = 0.0;\r\n                const sampleForNoneR: number = samplesForNone[bufferIndexR]; samplesForNone[bufferIndexR] = 0.0;\r\n                const sampleForReverbL: number = samplesForReverb[bufferIndexL]; samplesForReverb[bufferIndexL] = 0.0;\r\n                const sampleForReverbR: number = samplesForReverb[bufferIndexR]; samplesForReverb[bufferIndexR] = 0.0;\r\n                const sampleForChorusL: number = samplesForChorus[bufferIndexL]; samplesForChorus[bufferIndexL] = 0.0;\r\n                const sampleForChorusR: number = samplesForChorus[bufferIndexR]; samplesForChorus[bufferIndexR] = 0.0;\r\n                const sampleForChorusReverbL: number = samplesForChorusReverb[bufferIndexL]; samplesForChorusReverb[bufferIndexL] = 0.0;\r\n                const sampleForChorusReverbR: number = samplesForChorusReverb[bufferIndexR]; samplesForChorusReverb[bufferIndexR] = 0.0;\r\n                stereoBufferIndex += 2;\r\n\r\n                const combinedChorusL: number = sampleForChorusL + sampleForChorusReverbL;\r\n                const combinedChorusR: number = sampleForChorusR + sampleForChorusReverbR;\r\n\r\n                const chorusTap0Ratio: number = chorusTap0Index % 1;\r\n                const chorusTap1Ratio: number = chorusTap1Index % 1;\r\n                const chorusTap2Ratio: number = chorusTap2Index % 1;\r\n                const chorusTap3Ratio: number = chorusTap3Index % 1;\r\n                const chorusTap4Ratio: number = chorusTap4Index % 1;\r\n                const chorusTap5Ratio: number = chorusTap5Index % 1;\r\n                const chorusTap0A: number = chorusDelayLine[(chorusTap0Index) & 0x7FF];\r\n                const chorusTap0B: number = chorusDelayLine[(chorusTap0Index + 1) & 0x7FF];\r\n                const chorusTap1A: number = chorusDelayLine[(chorusTap1Index) & 0x7FF];\r\n                const chorusTap1B: number = chorusDelayLine[(chorusTap1Index + 1) & 0x7FF];\r\n                const chorusTap2A: number = chorusDelayLine[(chorusTap2Index) & 0x7FF];\r\n                const chorusTap2B: number = chorusDelayLine[(chorusTap2Index + 1) & 0x7FF];\r\n                const chorusTap3A: number = chorusDelayLine[(chorusTap3Index) & 0x7FF];\r\n                const chorusTap3B: number = chorusDelayLine[(chorusTap3Index + 1) & 0x7FF];\r\n                const chorusTap4A: number = chorusDelayLine[(chorusTap4Index) & 0x7FF];\r\n                const chorusTap4B: number = chorusDelayLine[(chorusTap4Index + 1) & 0x7FF];\r\n                const chorusTap5A: number = chorusDelayLine[(chorusTap5Index) & 0x7FF];\r\n                const chorusTap5B: number = chorusDelayLine[(chorusTap5Index + 1) & 0x7FF];\r\n                const chorusTap0: number = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n                const chorusTap1: number = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n                const chorusTap2: number = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n                const chorusTap3: number = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n                const chorusTap4: number = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n                const chorusTap5: number = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n                const chorusSampleL = 0.5 * (combinedChorusL - chorusTap0 + chorusTap1 - chorusTap2);\r\n                const chorusSampleR = 0.5 * (combinedChorusR - chorusTap3 + chorusTap4 - chorusTap5);\r\n                chorusDelayLine[chorusDelayPos] = combinedChorusL;\r\n                chorusDelayLine[(chorusDelayPos + 0x400) & 0x7FF] = combinedChorusR;\r\n                chorusDelayPos = (chorusDelayPos + 1) & 0x7FF;\r\n                chorusTap0Index += chorusTap0Delta;\r\n                chorusTap1Index += chorusTap1Delta;\r\n                chorusTap2Index += chorusTap2Delta;\r\n                chorusTap3Index += chorusTap3Delta;\r\n                chorusTap4Index += chorusTap4Delta;\r\n                chorusTap5Index += chorusTap5Delta;\r\n\r\n                // Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n                // good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n                // Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\r\n                // Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\r\n                const reverbDelayPos1: number = (reverbDelayPos + 3041) & 0x3FFF;\r\n                const reverbDelayPos2: number = (reverbDelayPos + 6426) & 0x3FFF;\r\n                const reverbDelayPos3: number = (reverbDelayPos + 10907) & 0x3FFF;\r\n                const reverbSample0: number = (reverbDelayLine[reverbDelayPos]);\r\n                const reverbSample1: number = reverbDelayLine[reverbDelayPos1];\r\n                const reverbSample2: number = reverbDelayLine[reverbDelayPos2];\r\n                const reverbSample3: number = reverbDelayLine[reverbDelayPos3];\r\n                const reverbTemp0: number = -(reverbSample0 + sampleForChorusReverbL + sampleForReverbL) + reverbSample1;\r\n                const reverbTemp1: number = -(reverbSample0 + sampleForChorusReverbR + sampleForReverbR) - reverbSample1;\r\n                const reverbTemp2: number = -reverbSample2 + reverbSample3;\r\n                const reverbTemp3: number = -reverbSample2 - reverbSample3;\r\n                reverbFeedback0 += ((reverbTemp0 + reverbTemp2) * reverb - reverbFeedback0) * 0.5;\r\n                reverbFeedback1 += ((reverbTemp1 + reverbTemp3) * reverb - reverbFeedback1) * 0.5;\r\n                reverbFeedback2 += ((reverbTemp0 - reverbTemp2) * reverb - reverbFeedback2) * 0.5;\r\n                reverbFeedback3 += ((reverbTemp1 - reverbTemp3) * reverb - reverbFeedback3) * 0.5;\r\n                reverbDelayLine[reverbDelayPos1] = reverbFeedback0;\r\n                reverbDelayLine[reverbDelayPos2] = reverbFeedback1;\r\n                reverbDelayLine[reverbDelayPos3] = reverbFeedback2;\r\n                reverbDelayLine[reverbDelayPos] = reverbFeedback3;\r\n                reverbDelayPos = (reverbDelayPos + 1) & 0x3FFF;\r\n\r\n                // Apply master pre-gain to the sound, before limiting. Master gain slider is 0-5, but it's squared for more range (0-25).\r\n                const sampleL = masterGain * masterGain * (sampleForNoneL + chorusSampleL + sampleForReverbL + reverbSample1 + reverbSample2 + reverbSample3);\r\n                const sampleR = masterGain * masterGain * (sampleForNoneR + chorusSampleR + sampleForReverbR + reverbSample0 + reverbSample2 - reverbSample3);\r\n\r\n                /*\r\n                highpassOutput = highpassOutput * highpassFilter + sample - highpassInput;\r\n                highpassInput = sample;\r\n                // use highpassOutput instead of sample below?\r\n                */\r\n\r\n                // A compressor/limiter.\r\n                const absL: number = sampleL < 0.0 ? -sampleL : sampleL;\r\n                const absR: number = sampleR < 0.0 ? -sampleR : sampleR;\r\n                const abs: number = absL > absR ? absL : absR;\r\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\r\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\r\n                const limitRange: number = (+(abs > compressionThreshold)) + (+(abs > limitThreshold));\r\n                // Determine the target amplification based on the range of the curve\r\n                const limitTarget: number =\r\n                    (+(limitRange == 0)) * (((abs + 1 - compressionThreshold) * 0.8 + 0.25) * compressionRatio + 1.05 * (1 - compressionRatio))\r\n                    + (+(limitRange == 1)) * (1.05)\r\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - limitThreshold) * limitRatio + (1 - limitThreshold)));\r\n                // Move the limit towards the target\r\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\r\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\r\n                outputDataL[i] = sampleL * limitedVolume;\r\n                outputDataR[i] = sampleR * limitedVolume;\r\n\r\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\r\n            }\r\n\r\n            bufferIndex += runLength;\r\n\r\n            this.tickSampleCountdown -= runLength;\r\n            if (this.tickSampleCountdown <= 0) {\r\n\r\n                // Track how long tones have been released, and free them if there are too many.\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n                        const tone: Tone = this.releasedTones[channel].get(i);\r\n                        tone.ticksSinceReleased++;\r\n\r\n                        const shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n                        if (shouldFadeOutFast) {\r\n                            this.freeReleasedTone(channel, i);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Update arpeggio time, which is used to calculate arpeggio position\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                        let useArpeggioSpeed: number = instrument.arpeggioSpeed;\r\n                        if (this.isModActive(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx)) {\r\n                            useArpeggioSpeed = this.getModValue(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx, false);\r\n                            if (Number.isInteger(useArpeggioSpeed)) {\r\n                                instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                            } else {\r\n                                // Linear interpolate arpeggio values\r\n                                instrument.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\r\n                            }\r\n                        }\r\n                        else {\r\n                            instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.tick++;\r\n                this.tickSampleCountdown += samplesPerTick;\r\n                if (this.tick == Config.ticksPerPart) {\r\n                    this.tick = 0;\r\n                    this.part++;\r\n                    this.liveInputDuration--;\r\n                    var atEnd = this.part + this.beat * Config.partsPerBeat >= this.findPartsInBar(this.bar) - 1;\r\n                    // Check if any active tones should be released.\r\n                    for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                        // Check if we're at the end of the bar and have a tie-over transition. If so, do not free tone\r\n                        var carryOver = false;\r\n                        var toneCount = this.activeTones[channel].count();\r\n                        var pattern = this.song.getPattern(channel, this.bar);\r\n                        if ( pattern != null && atEnd ) {\r\n                            var instrument = pattern.instrument;\r\n                            if ( this.song.channels[channel].instruments[instrument].tieNoteTransition && toneCount > 0 ) {\r\n                                // Verify that all tie conditions are met\r\n                                // 1. Check for a note in this channel at the start of the next bar\r\n                                // 2. Check that the note's volume start matches the current volume\r\n                                // 3. Check that the shape (pitches, chord size) is a match\r\n                                // 4. Check that the instruments are the same\r\n                                var targetBar = this.bar + 1;\r\n                                if ( targetBar >= this.song.barCount || (targetBar >= this.song.loopStart + this.song.loopLength && this.loopRepeatCount != 0)) {\r\n                                    targetBar = this.song.loopStart;\r\n                                }\r\n                                var nextPattern = this.song.getPattern(channel, targetBar);\r\n                                var currNote = this.activeTones[channel].get(0).note;\r\n                                if ( currNote != null ) {\r\n                                    var pin = 0;\r\n                                    while ( currNote.pins[pin].time + currNote.start < this.part + this.beat * Config.partsPerBeat && pin < currNote.pins.length-1 )\r\n                                        pin++;\r\n                                    var currVolume = currNote.pins[pin].volume;\r\n                                    var lastInterval = currNote.pins[pin].interval;\r\n\r\n                                    if ( nextPattern != null && nextPattern.instrument == instrument ) {\r\n                                        for( let i: number = 0; i < nextPattern.notes.length; i++ ) {\r\n                                            if ( nextPattern.notes[i].start == 0\r\n                                                && nextPattern.notes[i].pins[0].volume == currVolume\r\n                                                && nextPattern.notes[i].pitches.length == currNote.pitches.length ) {\r\n                                                \r\n                                                carryOver = true;\r\n                                                for ( let j: number = 0; j < currNote.pitches.length; j++ ) {\r\n                                                    // Allow any pitch order\r\n                                                    if ( nextPattern.notes[i].pitches.findIndex( (p) => p == currNote!.pitches[j] + lastInterval ) == -1 ) {\r\n                                                        carryOver = false;\r\n                                                        j = currNote.pitches.length;\r\n                                                    }\r\n                                                }\r\n                                                i = nextPattern.notes.length;\r\n                                                \r\n                                                if ( carryOver ) {\r\n                                                    // Prior to an actual tie, all releasing for hard transitions also needs to be\r\n                                                    // cancelled. So, this check is ran a few parts before the end of a bar too.\r\n                                                    // In those cases, just set tyingOver to 0 for that duration to cancel release\r\n                                                    // handling, but not affect note start time calculations.\r\n                                                    if ( this.part + this.beat * Config.partsPerBeat < this.findPartsInBar(this.bar) ) {\r\n                                                        // Only does this if it is needed, so if we're long tying (next else-if below) then don't ruin the math.\r\n                                                        if ( this.tyingOver[channel] < 0 ) {\r\n                                                            this.tyingOver[channel] = 0;\r\n                                                        }\r\n                                                    }\r\n                                                    // Special case: tying over a whole bar, just add the length.\r\n                                                    else if ( currNote.start == 0 && this.tyingOver[channel] >= 0 ) {\r\n                                                        this.tyingOver[channel] += this.part + this.beat * Config.partsPerBeat;\r\n                                                    }\r\n                                                    else {\r\n                                                        // Set tyingOver to a number >= 0 representing how many parts back the tie note started.\r\n                                                        this.tyingOver[channel] = this.part + this.beat * Config.partsPerBeat - currNote.start;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        for (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n                            const tone: Tone = this.activeTones[channel].get(i);\r\n                            const transition: Transition = tone.instrument.getTransition();\r\n                            \r\n                            if (tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n                                // Free tone if the transition allows\r\n                                if (!(transition.isSeamless || tone.instrument.clicklessTransition || this.tyingOver[channel] >= 0)) {\r\n                                    if (transition.releases) {\r\n                                        this.releaseTone(channel, tone);\r\n                                    } else {\r\n                                        this.freeTone(tone);\r\n                                    }\r\n                                    this.activeTones[channel].remove(i);\r\n                                    i--;\r\n                                }\r\n\r\n                                // End of note: if not actively trying to carry over, kill note tie\r\n                                if ( !carryOver ) {\r\n                                    this.tyingOver[channel] = -1;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let channel: number = 0; channel < this.song.modChannelCount; channel++) {\r\n                        for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                            for (let i: number = 0; i < this.activeModTones[channel][mod].count(); i++) {\r\n                                const tone: Tone = this.activeModTones[channel][mod].get(i);\r\n                                const transition: Transition = tone.instrument.getTransition();\r\n                                if (!transition.isSeamless && tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n                                    this.freeTone(tone);\r\n                                    this.activeModTones[channel][mod].remove(i);\r\n                                    i--;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.part == Config.partsPerBeat) {\r\n                        this.part = 0;\r\n\r\n                        if (playSong) {\r\n                            this.beat++;\r\n                            if (this.beat == this.song.beatsPerBar) {\r\n                                // bar changed, reset for next bar:\r\n                                this.beat = 0;\r\n                                this.bar++;\r\n                                if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n                                    this.bar = this.song.loopStart;\r\n                                    if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n                                }\r\n                                if (this.bar >= this.song.barCount) {\r\n                                    this.bar = 0;\r\n                                    if (this.loopRepeatCount != -1) {\r\n                                        ended = true;\r\n                                        this.resetEffects();\r\n                                        this.pause();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Update mod values so that next values copy to current values\r\n            for (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\r\n                    this.modValues[setting] = this.nextModValues[setting];\r\n            }\r\n\r\n            // Set samples per tick if song tempo mods changed it\r\n            if (this.isModActive(ModSetting.mstTempo, true)) {\r\n                samplesPerTick = this.getSamplesPerTick();\r\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\r\n            }\r\n\r\n            // Bound LFO times to be within their period (to keep values from getting large)\r\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount; channel++) {\r\n                for (let instrument of this.song.channels[channel].instruments) {\r\n                    instrument.nextLFOtime = (instrument.nextLFOtime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\r\n                    instrument.arpTime = (instrument.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\r\n                }\r\n            }\r\n\r\n            for (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n                for (let channel: number = 0; channel < channelCount; channel++) {\r\n                    for (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // Optimization: Avoid persistent reverb values in the float denormal range.\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < reverbFeedback0 && reverbFeedback0 < epsilon) reverbFeedback0 = 0.0;\r\n        if (-epsilon < reverbFeedback1 && reverbFeedback1 < epsilon) reverbFeedback1 = 0.0;\r\n        if (-epsilon < reverbFeedback2 && reverbFeedback2 < epsilon) reverbFeedback2 = 0.0;\r\n        if (-epsilon < reverbFeedback3 && reverbFeedback3 < epsilon) reverbFeedback3 = 0.0;\r\n        //if (-epsilon < highpassInput && highpassInput < epsilon) highpassInput = 0.0;\r\n        //if (-epsilon < highpassOutput && highpassOutput < epsilon) highpassOutput = 0.0;\r\n        if (-epsilon < limit && limit < epsilon) limit = 0.0;\r\n\r\n        this.stereoBufferIndex = (this.stereoBufferIndex + outputBufferLength * 2) % stereoBufferLength;\r\n        this.chorusPhase = chorusPhase;\r\n        this.chorusDelayPos = chorusDelayPos;\r\n        this.reverbDelayPos = reverbDelayPos;\r\n        this.reverbFeedback0 = reverbFeedback0;\r\n        this.reverbFeedback1 = reverbFeedback1;\r\n        this.reverbFeedback2 = reverbFeedback2;\r\n        this.reverbFeedback3 = reverbFeedback3;\r\n        //this.highpassInput = highpassInput;\r\n        //this.highpassOutput = highpassOutput;\r\n        this.limit = limit;\r\n\r\n        if (playSong) {\r\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / this.song.beatsPerBar + this.bar;\r\n        }\r\n\r\n        /*\r\n        const synthDuration: number = performance.now() - synthStartTime;\r\n        // Performance measurements:\r\n        samplesAccumulated += outputBufferLength;\r\n        samplePerformance += synthDuration;\r\n    \t\r\n        if (samplesAccumulated >= 44100 * 4) {\r\n        const secondsGenerated = samplesAccumulated / 44100;\r\n        const secondsRequired = samplePerformance / 1000;\r\n        const ratio = secondsRequired / secondsGenerated;\r\n        console.log(ratio);\r\n        samplePerformance = 0;\r\n        samplesAccumulated = 0;\r\n        }\r\n        */\r\n    }\r\n\r\n    private freeTone(tone: Tone): void {\r\n        this.tonePool.pushBack(tone);\r\n    }\r\n\r\n    private newTone(): Tone {\r\n        if (this.tonePool.count() > 0) {\r\n            const tone: Tone = this.tonePool.popBack();\r\n            tone.reset();\r\n            tone.active = false;\r\n            return tone;\r\n        }\r\n        return new Tone();\r\n    }\r\n\r\n    private releaseTone(channel: number, tone: Tone): void {\r\n        if (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n            this.releasedTones[channel].pushFront(tone);\r\n        }\r\n        else {\r\n            /*\r\n            for (let mod = 0; mod < Config.modCount; mod++) {\r\n            this.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].pushFront(tone);\r\n            }\r\n            */\r\n        }\r\n    }\r\n\r\n    private freeReleasedTone(channel: number, toneIndex: number): void {\r\n        if (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n            this.freeTone(this.releasedTones[channel].get(toneIndex));\r\n            this.releasedTones[channel].remove(toneIndex);\r\n        } else {\r\n            /*\r\n            for (let mod = 0; mod < Config.modCount; mod++) {\r\n            this.freeTone(this.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].get(toneIndex));\r\n            this.releasedModTones[channel][mod].remove(toneIndex);\r\n            }\r\n            */\r\n        }\r\n    }\r\n\r\n    public freeAllTones(): void {\r\n        while (this.liveInputTones.count() > 0) {\r\n            this.freeTone(this.liveInputTones.popBack());\r\n        }\r\n        for (let i: number = 0; i < this.activeTones.length; i++) {\r\n            while (this.activeTones[i].count() > 0) {\r\n                this.freeTone(this.activeTones[i].popBack());\r\n            }\r\n        }\r\n        for (let i: number = 0; i < this.releasedTones.length; i++) {\r\n            while (this.releasedTones[i].count() > 0) {\r\n                this.freeTone(this.releasedTones[i].popBack());\r\n            }\r\n        }\r\n        for (let i = 0; i < this.activeModTones.length; i++) {\r\n            for (let mod = 0; mod < this.activeModTones[i].length; mod++) {\r\n                while (this.activeModTones[i][mod].count() > 0) {\r\n                    this.freeTone(this.activeModTones[i][mod].popBack());\r\n                }\r\n            }\r\n        }\r\n        /*\r\n        for (let i = 0; i < this.releasedModTones.length; i++) {\r\n        for (let mod = 0; mod < this.releasedModTones[i].length; mod++) {\r\n        while (this.releasedModTones[i][mod].count() > 0) {\r\n        this.freeTone(this.releasedModTones[i][mod].popBack());\r\n        }\r\n        }\r\n        }\r\n        */\r\n    }\r\n\r\n    private determineLiveInputTones(song: Song): void {\r\n        const toneList: Deque<Tone> = this.liveInputTones;\r\n        const pitches: number[] = this.liveInputPitches;\r\n        let toneCount: number = 0;\r\n        if (this.liveInputDuration > 0) {\r\n            const instrument: Instrument = song.channels[this.liveInputChannel].instruments[song.getPatternInstrument(this.liveInputChannel, this.bar)];\r\n\r\n            if (instrument.getChord().arpeggiates) {\r\n                let tone: Tone;\r\n                if (toneList.count() == 0) {\r\n                    tone = this.newTone();\r\n                    toneList.pushBack(tone);\r\n                } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                    this.releaseTone(this.liveInputChannel, toneList.popFront());\r\n                    tone = this.newTone();\r\n                    toneList.pushBack(tone);\r\n                } else {\r\n                    tone = toneList.get(0);\r\n                }\r\n                toneCount = 1;\r\n\r\n                for (let i: number = 0; i < pitches.length; i++) {\r\n                    tone.pitches[i] = pitches[i];\r\n                }\r\n                tone.pitchCount = pitches.length;\r\n                tone.chordSize = 1;\r\n                tone.instrument = instrument;\r\n                tone.note = tone.prevNote = tone.nextNote = null;\r\n            } else {\r\n                //const transition: Transition = instrument.getTransition();\r\n                for (let i: number = 0; i < pitches.length; i++) {\r\n                    //const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= i) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                        this.releaseTone(this.liveInputChannel, toneList.get(i));\r\n                        tone = this.newTone();\r\n                        toneList.set(i, tone);\r\n                    } else {\r\n                        tone = toneList.get(i);\r\n                    }\r\n                    toneCount++;\r\n\r\n                    tone.pitches[0] = pitches[i];\r\n                    tone.pitchCount = 1;\r\n                    tone.chordSize = pitches.length;\r\n                    tone.instrument = instrument;\r\n                    tone.note = tone.prevNote = tone.nextNote = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        while (toneList.count() > toneCount) {\r\n            this.releaseTone(this.liveInputChannel, toneList.popBack());\r\n        }\r\n\r\n        this.liveInputStarted = false;\r\n    }\r\n\r\n    private determineCurrentActiveTones(song: Song, channel: number, playSong: boolean): void {\r\n        const instrument: Instrument = song.channels[channel].instruments[song.getPatternInstrument(channel, this.bar)];\r\n        const pattern: Pattern | null = song.getPattern(channel, this.bar);\r\n        const time: number = this.part + this.beat * Config.partsPerBeat;\r\n\r\n        if (playSong && song.getChannelIsMod(channel) && !song.channels[channel].muted) {\r\n            // Offset channel (first mod channel is 0 index in mod tone array)\r\n            let modChannelIdx = channel - (song.pitchChannelCount + song.noiseChannelCount);\r\n\r\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\r\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\r\n            let notes: (Note | null)[] = [];\r\n            let prevNotes: (Note | null)[] = [];\r\n            let nextNotes: (Note | null)[] = [];\r\n            let fillCount: number = Config.modCount;\r\n            while (fillCount--) {\r\n                notes.push(null);\r\n                prevNotes.push(null);\r\n                nextNotes.push(null);\r\n            }\r\n\r\n            if (pattern != null) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= time) {\r\n                        // Actually need to check which note starts closer to the start of this note.\r\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                    else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                    }\r\n                    else if (pattern.notes[i].start > time) {\r\n                        // Actually need to check which note starts closer to the end of this note.\r\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                const toneList: Deque<Tone> = this.activeModTones[modChannelIdx][mod];\r\n                if (notes[mod] != null) {\r\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\r\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\r\n                    this.syncTones(channel, toneList, instrument, (notes[mod] as Note).pitches, (notes[mod] as Note), (prevNotes[mod] as Note), (nextNotes[mod] as Note), time);\r\n                } else {\r\n                    while (toneList.count() > 0) {\r\n                        this.freeTone(toneList.popBack());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (!song.getChannelIsMod(channel)) {\r\n\r\n            let note: Note | null = null;\r\n            let prevNote: Note | null = null;\r\n            let nextNote: Note | null = null;\r\n\r\n            if (playSong && pattern != null && !song.channels[channel].muted) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= time) {\r\n                        prevNote = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n                        note = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start > time) {\r\n                        nextNote = pattern.notes[i];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const toneList: Deque<Tone> = this.activeTones[channel];\r\n            if (note != null) {\r\n                if (prevNote != null && prevNote.end != note.start) prevNote = null;\r\n                if (nextNote != null && nextNote.start != note.end) nextNote = null;\r\n                this.syncTones(channel, toneList, instrument, note.pitches, note, prevNote, nextNote, time);\r\n            } else {\r\n                while (toneList.count() > 0) {\r\n                    // Automatically free or release seamless tones if there's no new note to take over.\r\n                    if (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n                        this.releaseTone(channel, toneList.popBack());\r\n                    } else {\r\n                        this.freeTone(toneList.popBack());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private syncTones(channel: number, toneList: Deque<Tone>, instrument: Instrument, pitches: number[], note: Note, prevNote: Note | null, nextNote: Note | null, currentPart: number): void {\r\n        let toneCount: number = 0;\r\n        if (instrument.getChord().arpeggiates) {\r\n            let tone: Tone;\r\n            if (toneList.count() == 0) {\r\n                tone = this.newTone();\r\n                toneList.pushBack(tone);\r\n            } else {\r\n                tone = toneList.get(0);\r\n            }\r\n            toneCount = 1;\r\n\r\n            for (let i: number = 0; i < pitches.length; i++) {\r\n                tone.pitches[i] = pitches[i];\r\n            }\r\n            tone.pitchCount = pitches.length;\r\n            tone.chordSize = 1;\r\n            tone.instrument = instrument;\r\n            tone.note = note;\r\n            tone.noteStart = note.start - Math.max(0, this.tyingOver[channel]);\r\n            tone.noteEnd = note.end;\r\n            tone.prevNote = prevNote;\r\n            tone.nextNote = nextNote;\r\n            tone.prevNotePitchIndex = 0;\r\n            tone.nextNotePitchIndex = 0;\r\n        } else {\r\n            const transition: Transition = instrument.getTransition();\r\n            for (let i: number = 0; i < pitches.length; i++) {\r\n\r\n                const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n                let prevNoteForThisTone: Note | null = (prevNote && prevNote.pitches.length > i) ? prevNote : null;\r\n                let noteForThisTone: Note = note;\r\n                let nextNoteForThisTone: Note | null = (nextNote && nextNote.pitches.length > i) ? nextNote : null;\r\n                let noteStart: number = noteForThisTone.start + strumOffsetParts - Math.max(0, this.tyingOver[channel]);\r\n\r\n                if (noteStart > currentPart) {\r\n                    if (toneList.count() > i && (transition.isSeamless || this.tyingOver[channel] >= 0 ) && prevNoteForThisTone != null) {\r\n                        nextNoteForThisTone = noteForThisTone;\r\n                        noteForThisTone = prevNoteForThisTone;\r\n                        prevNoteForThisTone = null;\r\n                        noteStart = noteForThisTone.start + strumOffsetParts - Math.max(0, this.tyingOver[channel]) ;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                let noteEnd: number = noteForThisTone.end;\r\n                if ((transition.isSeamless || this.tyingOver[channel] >= 0 ) && nextNoteForThisTone != null) {\r\n                    noteEnd = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEnd + strumOffsetParts);\r\n                }\r\n\r\n\r\n                let tone: Tone;\r\n                if (toneList.count() <= i) {\r\n                    tone = this.newTone();\r\n                    toneList.pushBack(tone);\r\n                } else {\r\n                    tone = toneList.get(i);\r\n                }\r\n                toneCount++;\r\n\r\n                tone.pitches[0] = noteForThisTone.pitches[i];\r\n                tone.pitchCount = 1;\r\n                tone.chordSize = noteForThisTone.pitches.length;\r\n                tone.instrument = instrument;\r\n                tone.note = noteForThisTone;\r\n                tone.noteStart = noteStart;\r\n                tone.noteEnd = noteEnd;\r\n                tone.prevNote = prevNoteForThisTone;\r\n                tone.nextNote = nextNoteForThisTone;\r\n                tone.prevNotePitchIndex = i;\r\n                tone.nextNotePitchIndex = i;\r\n\r\n            }\r\n        }\r\n\r\n        while (toneList.count() > toneCount) {\r\n            // Automatically free or release seamless tones if there's no new note to take over.\r\n            if (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n                this.releaseTone(channel, toneList.popBack());\r\n            } else {\r\n                this.freeTone(toneList.popBack());\r\n            }\r\n        }\r\n    }\r\n\r\n    private playTone(song: Song, stereoBufferIndex: number, stereoBufferLength: number, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        Synth.computeTone(this, song, channel, samplesPerTick, runLength, tone, released, shouldFadeOutFast);\r\n        let synthBuffer: Float32Array;\r\n        switch (tone.instrument.effects) {\r\n            case 0: synthBuffer = this.samplesForNone!; break;\r\n            case 1: synthBuffer = this.samplesForReverb!; break;\r\n            case 2: synthBuffer = this.samplesForChorus!; break;\r\n            case 3: synthBuffer = this.samplesForChorusReverb!; break;\r\n            default: throw new Error();\r\n        }\r\n        const synthesizer: Function = Synth.getInstrumentSynthFunction(tone.instrument);\r\n        synthesizer(this, synthBuffer, stereoBufferIndex, stereoBufferLength, runLength * 2, tone, tone.instrument);\r\n    }\r\n\r\n    private static computeEnvelope(envelope: Envelope, time: number, beats: number, customVolume: number): number {\r\n        switch (envelope.type) {\r\n            case EnvelopeType.custom: return customVolume;\r\n            case EnvelopeType.steady: return 1.0;\r\n            case EnvelopeType.twang:\r\n                return 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.swell:\r\n                return 1.0 - 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.tremolo:\r\n                return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\r\n            case EnvelopeType.tremolo2:\r\n                return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\r\n            case EnvelopeType.punch:\r\n                return Math.max(1.0, 2.0 - time * 10.0);\r\n            case EnvelopeType.flare:\r\n                const speed: number = envelope.speed;\r\n                const attack: number = 0.25 / Math.sqrt(speed);\r\n                return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * speed);\r\n            case EnvelopeType.decay:\r\n                return Math.pow(2, -envelope.speed * time);\r\n            default: throw new Error(\"Unrecognized operator envelope type.\");\r\n        }\r\n    }\r\n\r\n    private static computeChordVolume(chordSize: number): number {\r\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\r\n    }\r\n\r\n    private static computeTone(synth: Synth, song: Song, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        const instrument: Instrument = tone.instrument;\r\n        const transition: Transition = instrument.getTransition();\r\n        const chord: Chord = instrument.getChord();\r\n        const chordVolume: number = chord.arpeggiates ? 1 : Synth.computeChordVolume(tone.chordSize);\r\n        const isNoiseChannel: boolean = song.getChannelIsNoise(channel);\r\n        const intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\r\n        const secondsPerPart: number = Config.ticksPerPart * samplesPerTick / synth.samplesPerSecond;\r\n        const beatsPerPart: number = 1.0 / Config.partsPerBeat;\r\n        const toneWasActive: boolean = tone.active;\r\n        const tickSampleCountdown: number = synth.tickSampleCountdown;\r\n        const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n        const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n        const ticksIntoBar: number = (synth.beat * Config.partsPerBeat + synth.part) * Config.ticksPerPart + synth.tick;\r\n        const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n        const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n        const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n        const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n        const instrumentIdx: number = (synth.song as Song).channels[channel].instruments.findIndex(i => i == instrument);\r\n        const treatAsSeamless: boolean = transition.isSeamless || synth.tyingOver[channel] >= 0;\r\n            \r\n        tone.phaseDeltaScale = 0.0;\r\n        tone.filter = 1.0;\r\n        tone.filterScale = 1.0;\r\n        tone.vibratoScale = 0.0;\r\n        tone.intervalMult = 1.0;\r\n        tone.intervalVolumeMult = 1.0;\r\n        tone.active = false;\r\n\r\n        let startPan: number = instrument.pan;\r\n        let endPan: number = instrument.pan;\r\n        if (synth.isModActive(ModSetting.mstPan, false, channel, instrumentIdx)) {\r\n            startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\r\n            endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\r\n        }\r\n\r\n        let startPanDelay: number = instrument.panDelay;\r\n        let endPanDelay: number = instrument.panDelay;\r\n        if (synth.isModActive(ModSetting.mstPanDelay, false, channel, instrumentIdx)) {\r\n            startPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, false);\r\n            endPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, true);\r\n        }\r\n\r\n        const useStartPan: number = (startPan - Config.panCenter) / Config.panCenter;\r\n        const useEndPan: number = (endPan - Config.panCenter) / Config.panCenter;\r\n        // 10 pan delay is the same amount as vanilla beepbox.\r\n        const maxDelayStart: number = startPanDelay * 0.00013 * synth.samplesPerSecond;\r\n        const maxDelayEnd: number = endPanDelay * 0.00013 * synth.samplesPerSecond;\r\n        tone.stereoDelayStart = -useStartPan * maxDelayStart;\r\n        const delayEnd: number = -useEndPan * maxDelayEnd;\r\n        tone.stereoDelayDelta = (delayEnd - tone.stereoDelayStart) / runLength;\r\n        tone.stereoVolumeLStart = Math.cos((1 + useStartPan) * Math.PI * 0.25) * 1.414;\r\n        tone.stereoVolumeRStart = Math.cos((1 - useStartPan) * Math.PI * 0.25) * 1.414;\r\n        const stereoVolumeLEnd: number = Math.cos((1 + useEndPan) * Math.PI * 0.25) * 1.414;\r\n        const stereoVolumeREnd: number = Math.cos((1 - useEndPan) * Math.PI * 0.25) * 1.414;\r\n        tone.stereoVolumeLDelta = (stereoVolumeLEnd - tone.stereoVolumeLStart) / runLength;\r\n        tone.stereoVolumeRDelta = (stereoVolumeREnd - tone.stereoVolumeRStart) / runLength;\r\n\r\n        let resetPhases: boolean = true;\r\n        let partsSinceStart: number = 0.0;\r\n        let intervalStart: number = 0.0;\r\n        let intervalEnd: number = 0.0;\r\n        let transitionVolumeStart: number = 1.0;\r\n        let transitionVolumeEnd: number = 1.0;\r\n        let chordVolumeStart: number = chordVolume;\r\n        let chordVolumeEnd: number = chordVolume;\r\n        let customVolumeStart: number = 0.0;\r\n        let customVolumeEnd: number = 0.0;\r\n        let decayTimeStart: number = 0.0;\r\n        let decayTimeEnd: number = 0.0;\r\n\r\n        let volumeReferencePitch: number;\r\n        let basePitch: number;\r\n        let baseVolume: number;\r\n        let pitchDamping: number;\r\n        if (instrument.type == InstrumentType.spectrum) {\r\n            if (isNoiseChannel) {\r\n                basePitch = Config.spectrumBasePitch;\r\n                baseVolume = 0.6; // Note: spectrum is louder for drum channels than pitch channels!\r\n            } else {\r\n                basePitch = Config.keys[song.key].basePitch;\r\n                baseVolume = 0.3;\r\n            }\r\n            volumeReferencePitch = Config.spectrumBasePitch;\r\n            pitchDamping = 28;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            basePitch = Config.spectrumBasePitch;\r\n            baseVolume = 0.45;\r\n            volumeReferencePitch = basePitch;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            basePitch = Config.chipNoises[instrument.chipNoise].basePitch;\r\n            baseVolume = 0.19;\r\n            volumeReferencePitch = basePitch;\r\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\r\n        } else if (instrument.type == InstrumentType.fm) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.03;\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.03375; // looks low compared to drums, but it's doubled for chorus and drums tend to be loud anyway.\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.025;\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.04725;\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            baseVolume = 1.0;\r\n            volumeReferencePitch = 0;\r\n            pitchDamping = 1.0;\r\n            basePitch = 0;\r\n        } else {\r\n            throw new Error(\"Unknown instrument type in computeTone.\");\r\n        }\r\n\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            tone.phaseDeltas[i] = 0.0;\r\n            tone.volumeStarts[i] = 0.0;\r\n            tone.volumeDeltas[i] = 0.0;\r\n        }\r\n\r\n        if (released) {\r\n            const ticksSoFar: number = tone.noteLengthTicks + tone.ticksSinceReleased;\r\n            const startTicksSinceReleased: number = tone.ticksSinceReleased + startRatio;\r\n            const endTicksSinceReleased: number = tone.ticksSinceReleased + endRatio;\r\n            const startTick: number = tone.noteLengthTicks + startTicksSinceReleased;\r\n            const endTick: number = tone.noteLengthTicks + endTicksSinceReleased;\r\n            const toneTransition: Transition = tone.instrument.getTransition();\r\n            resetPhases = false;\r\n            partsSinceStart = Math.floor(ticksSoFar / Config.ticksPerPart);\r\n            intervalStart = intervalEnd = tone.lastInterval;\r\n            customVolumeStart = customVolumeEnd = Synth.expressionToVolumeMult(tone.lastVolume);\r\n            transitionVolumeStart = Synth.expressionToVolumeMult((1.0 - startTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n            transitionVolumeEnd = Synth.expressionToVolumeMult((1.0 - endTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n            decayTimeStart = startTick / Config.ticksPerPart;\r\n            decayTimeEnd = endTick / Config.ticksPerPart;\r\n\r\n            if (shouldFadeOutFast) {\r\n                transitionVolumeStart *= 1.0 - startRatio;\r\n                transitionVolumeEnd *= 1.0 - endRatio;\r\n            }\r\n        } else if (tone.note == null) {\r\n            transitionVolumeStart = transitionVolumeEnd = 1;\r\n            customVolumeStart = customVolumeEnd = 1;\r\n            tone.lastInterval = 0;\r\n            tone.lastVolume = 6;\r\n            tone.ticksSinceReleased = 0;\r\n            resetPhases = false;\r\n\r\n            const heldTicksStart: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n            tone.liveInputSamplesHeld += runLength;\r\n            const heldTicksEnd: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n            tone.noteLengthTicks = heldTicksEnd;\r\n            const heldPartsStart: number = heldTicksStart / Config.ticksPerPart;\r\n            const heldPartsEnd: number = heldTicksEnd / Config.ticksPerPart;\r\n            partsSinceStart = Math.floor(heldPartsStart);\r\n            decayTimeStart = heldPartsStart;\r\n            decayTimeEnd = heldPartsEnd;\r\n        } else {\r\n            const note: Note = tone.note;\r\n            const prevNote: Note | null = tone.prevNote;\r\n            const nextNote: Note | null = tone.nextNote;\r\n\r\n            const time: number = synth.part + synth.beat * Config.partsPerBeat;\r\n            const partsPerBar: number = Config.partsPerBeat * song.beatsPerBar;\r\n            const noteStart: number = tone.noteStart;// - Math.max(0, synth.tyingOver[channel] || 0);\r\n            const noteEnd: number = tone.noteEnd;\r\n\r\n            partsSinceStart = time - noteStart;\r\n\r\n            let endPinIndex: number;\r\n            for (endPinIndex = 1; endPinIndex < note.pins.length - 1; endPinIndex++) {\r\n                if (note.pins[endPinIndex].time + note.start > time) break;\r\n            }\r\n            const startPin: NotePin = note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = note.pins[endPinIndex];\r\n            const noteStartTick: number = noteStart * Config.ticksPerPart;\r\n            const noteEndTick: number = noteEnd * Config.ticksPerPart;\r\n            const noteLengthTicks: number = noteEndTick - noteStartTick;\r\n            const pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\r\n            const pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\r\n\r\n            tone.lastInterval = note.pins[note.pins.length - 1].interval;\r\n            tone.lastVolume = note.pins[note.pins.length - 1].volume;\r\n            tone.ticksSinceReleased = 0;\r\n            tone.noteLengthTicks = noteLengthTicks;\r\n\r\n            const tickTimeStart: number = time * Config.ticksPerPart + synth.tick;\r\n            const tickTimeEnd: number = time * Config.ticksPerPart + synth.tick + 1;\r\n            const noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\r\n            const noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\r\n            const pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\r\n            const pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\r\n            let customVolumeTickStart: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioStart;\r\n            let customVolumeTickEnd: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioEnd;\r\n            let transitionVolumeTickStart: number = 1.0;\r\n            let transitionVolumeTickEnd: number = 1.0;\r\n            let chordVolumeTickStart: number = chordVolume;\r\n            let chordVolumeTickEnd: number = chordVolume;\r\n            let intervalTickStart: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n            let intervalTickEnd: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n            let decayTimeTickStart: number = partTimeTickStart - noteStart;\r\n            let decayTimeTickEnd: number = partTimeTickEnd - noteStart;\r\n            resetPhases = (tickTimeStart + startRatio - noteStartTick == 0.0) || !toneWasActive;\r\n\r\n            // if seamless, don't reset phases at start. (it's probably not necessary to constantly reset phases if there are no notes? Just do it once when note starts? But make sure that reset phases doesn't also reset stuff that this function did to set up the tone. Remember when the first run length was lost!\r\n            // if slide, average the interval, decayTime, and custom volume at the endpoints and interpolate between over slide duration.\r\n            // note that currently seamless and slide make different assumptions about whether a note at the end of a bar will connect with the next bar!\r\n            const maximumSlideTicks: number = noteLengthTicks * 0.5;\r\n            if (treatAsSeamless && !transition.slides && note.start == 0) {\r\n                // Special case for seamless, no-slide transition: assume the previous bar ends with another seamless note, don't reset tone history.\r\n                resetPhases = !toneWasActive;\r\n            } else if (treatAsSeamless && prevNote != null) {\r\n                resetPhases = !toneWasActive;\r\n                if (transition.slides) {\r\n                    const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n                    const slideRatioStartTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickStart / slideTicks);\r\n                    const slideRatioEndTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickEnd / slideTicks);\r\n                    const intervalDiff: number = ((prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval) - tone.pitches[0]) * 0.5;\r\n                    const volumeDiff: number = (prevNote.pins[prevNote.pins.length - 1].volume - note.pins[0].volume) * 0.5;\r\n                    const decayTimeDiff: number = (prevNote.end - prevNote.start) * 0.5;\r\n                    intervalTickStart += slideRatioStartTick * intervalDiff;\r\n                    intervalTickEnd += slideRatioEndTick * intervalDiff;\r\n                    customVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n                    customVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n                    decayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n                    decayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n                    if (!chord.arpeggiates) {\r\n                        const chordSizeDiff: number = (prevNote.pitches.length - tone.chordSize) * 0.5;\r\n                        chordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n                        chordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n                    }\r\n                }\r\n            }\r\n            if (treatAsSeamless && !transition.slides && note.end == partsPerBar) {\r\n                // Special case for seamless, no-slide transition: assume the next bar starts with another seamless note, don't fade out.\r\n            } else if (treatAsSeamless && nextNote != null) {\r\n                if (transition.slides) {\r\n                    const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n                    const slideRatioStartTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickStart) / slideTicks);\r\n                    const slideRatioEndTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickEnd) / slideTicks);\r\n                    const intervalDiff: number = (nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + note.pins[note.pins.length - 1].interval)) * 0.5;\r\n                    const volumeDiff: number = (nextNote.pins[0].volume - note.pins[note.pins.length - 1].volume) * 0.5;\r\n                    const decayTimeDiff: number = -(noteEnd - noteStart) * 0.5;\r\n                    intervalTickStart += slideRatioStartTick * intervalDiff;\r\n                    intervalTickEnd += slideRatioEndTick * intervalDiff;\r\n                    customVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n                    customVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n                    decayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n                    decayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n                    if (!chord.arpeggiates) {\r\n                        const chordSizeDiff: number = (nextNote.pitches.length - tone.chordSize) * 0.5;\r\n                        chordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n                        chordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n                    }\r\n                }\r\n            } else if (!(transition.releases && synth.tyingOver[channel] < 0 )) {\r\n                const releaseTicks: number = transition.releaseTicks;\r\n                if (releaseTicks > 0.0) {\r\n                    transitionVolumeTickStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / releaseTicks);\r\n                    transitionVolumeTickEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / releaseTicks);\r\n                }\r\n            }\r\n\r\n            intervalStart = intervalTickStart + (intervalTickEnd - intervalTickStart) * startRatio;\r\n            intervalEnd = intervalTickStart + (intervalTickEnd - intervalTickStart) * endRatio;\r\n            if (instrument.type != InstrumentType.mod) {\r\n                customVolumeStart = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * startRatio);\r\n                customVolumeEnd = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * endRatio);\r\n            } else {\r\n                customVolumeStart = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.max(0.0, startRatio);\r\n                customVolumeEnd = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.min(1.0, endRatio);\r\n                tone.customVolumeStart = customVolumeStart;\r\n                tone.customVolumeEnd = customVolumeEnd;\r\n            }\r\n            transitionVolumeStart = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * startRatio;\r\n            transitionVolumeEnd = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * endRatio;\r\n            chordVolumeStart = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * startRatio;\r\n            chordVolumeEnd = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * endRatio;\r\n            decayTimeStart = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * startRatio;\r\n            decayTimeEnd = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * endRatio;\r\n        }\r\n\r\n        const sampleTime: number = 1.0 / synth.samplesPerSecond;\r\n        tone.active = true;\r\n\r\n        if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.fm || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.spectrum) {\r\n\r\n            const lfoEffectStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.LFOtime);\r\n            const lfoEffectEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.nextLFOtime);\r\n\r\n            let useVibratoStart: number = instrument.vibratoDepth;\r\n            let useVibratoEnd: number = instrument.vibratoDepth;\r\n\r\n            if (synth.isModActive(ModSetting.mstVibratoDepth, false, channel, instrumentIdx)) {\r\n                useVibratoStart = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, false) / 25;\r\n                useVibratoEnd = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, true) / 25;\r\n            }\r\n\r\n            // Only use vibrato properties if the instrument's vibrato is custom or mods are applied to it\r\n            let partsStart: number;\r\n            let partsEnd: number;\r\n            const activeVibratoDelayMods: boolean = synth.isModActive(ModSetting.mstVibratoDelay, false, channel, instrumentIdx);\r\n            if (instrument.vibrato != Config.vibratos.length && !activeVibratoDelayMods) {\r\n                partsStart = Config.vibratos[instrument.vibrato].delayParts;\r\n                partsEnd = Config.vibratos[instrument.vibrato].delayParts;\r\n            }\r\n            else {\r\n                let vibratoDelayStart: number = instrument.vibratoDelay;\r\n                let vibratoDelayEnd: number = instrument.vibratoDelay;\r\n\r\n                if (activeVibratoDelayMods) {\r\n                    vibratoDelayStart = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, false);\r\n                    vibratoDelayEnd = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, true);\r\n\r\n                    // Special case - max vibrato delay means neeeeeever vibrato.\r\n                    if (vibratoDelayStart == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n                        vibratoDelayStart = Number.MAX_VALUE;\r\n                    }\r\n                    if (vibratoDelayEnd == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n                        vibratoDelayEnd = Number.MAX_VALUE;\r\n                    }\r\n                }\r\n\r\n                partsStart = vibratoDelayStart;\r\n                partsEnd = vibratoDelayEnd;\r\n\r\n            }\r\n\r\n            const vibratoScaleStart: number = (partsSinceStart < partsStart) ? 0.0 : useVibratoStart;\r\n            const vibratoScaleEnd: number = (partsSinceStart < partsEnd) ? 0.0 : useVibratoEnd;\r\n\r\n            const vibratoStart: number = vibratoScaleStart * lfoEffectStart;\r\n            const vibratoEnd: number = vibratoScaleEnd * lfoEffectEnd;\r\n            intervalStart += vibratoStart;\r\n            intervalEnd += vibratoEnd;\r\n        }\r\n\r\n        if (!treatAsSeamless || (!(!transition.slides && tone.note != null && tone.note.start == 0) && !(tone.prevNote != null))) {\r\n            const attackSeconds: number = transition.attackSeconds;\r\n            if (attackSeconds > 0.0) {\r\n                transitionVolumeStart *= Math.min(1.0, secondsPerPart * decayTimeStart / attackSeconds);\r\n                transitionVolumeEnd *= Math.min(1.0, secondsPerPart * decayTimeEnd / attackSeconds);\r\n            }\r\n        }\r\n\r\n        const instrumentVolumeMult: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\r\n\r\n        if (instrument.type == InstrumentType.drumset) {\r\n            // It's possible that the note will change while the user is editing it,\r\n            // but the tone's pitches don't get updated because the tone has already\r\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\r\n            tone.drumsetPitch = tone.pitches[0];\r\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\r\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\r\n        }\r\n\r\n        let filterCutModStart: number = instrument.filterCutoff;\r\n        let filterCutModEnd: number = instrument.filterCutoff;\r\n        if (synth.isModActive(ModSetting.mstFilterCut, false, channel, instrumentIdx)) {\r\n            filterCutModStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, false), ModSetting.mstFilterCut);\r\n            filterCutModEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, true), ModSetting.mstFilterCut);\r\n        }\r\n\r\n        let cutoffOctavesModStart: number;\r\n        let cutoffOctavesModEnd: number;\r\n        if (instrument.type == InstrumentType.drumset) {\r\n            cutoffOctavesModStart = 0;\r\n            cutoffOctavesModEnd = 0;\r\n        }\r\n        else {\r\n            cutoffOctavesModStart = (filterCutModStart - (Config.filterCutoffRange - 1)) * 0.5;\r\n            cutoffOctavesModEnd = (filterCutModEnd - (Config.filterCutoffRange - 1)) * 0.5;\r\n        }\r\n\r\n        const filterEnvelope: Envelope = (instrument.type == InstrumentType.drumset) ? instrument.getDrumsetEnvelope(tone.drumsetPitch) : instrument.getFilterEnvelope();\r\n        const filterCutoffHzStart: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModStart);\r\n        const filterCutoffHzEnd: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModEnd);\r\n        const filterBaseStart: number = 2.0 * Math.sin(Math.PI * filterCutoffHzStart / synth.samplesPerSecond);\r\n        const filterBaseEnd: number = 2.0 * Math.sin(Math.PI * filterCutoffHzEnd / synth.samplesPerSecond);\r\n        const filterMin: number = 2.0 * Math.sin(Math.PI * Config.filterCutoffMinHz / synth.samplesPerSecond);\r\n        tone.filter = filterBaseStart * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n        let endFilter: number = filterBaseEnd * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n        tone.filter = Math.min(Config.filterMax, Math.max(filterMin, tone.filter));\r\n        endFilter = Math.min(Config.filterMax, Math.max(filterMin, endFilter));\r\n        tone.filterScale = Math.pow(endFilter / tone.filter, 1.0 / runLength);\r\n\r\n        let filterVolumeStart: number = Math.pow(0.5, cutoffOctavesModStart * 0.35);\r\n        let filterVolumeEnd: number = Math.pow(0.5, cutoffOctavesModEnd * 0.35);\r\n\r\n        tone.filterResonanceStart = instrument.getFilterResonance();\r\n        tone.filterResonanceDelta = 0.0;\r\n\r\n        let useFilterResonanceStart: number = instrument.filterResonance;\r\n        let useFilterResonanceEnd: number = instrument.filterResonance;\r\n\r\n        tone.isFirstOrder = (instrument.type == InstrumentType.drumset) ? false : (useFilterResonanceStart == 0);\r\n\r\n        if (synth.isModActive(ModSetting.mstFilterPeak, false, channel, instrumentIdx)) {\r\n            // This flag is used to avoid the special casing when filter resonance == 0 without mods. So, it will sound a bit different,\r\n            // but the effect and ability to smoothly modulate will be preserved.\r\n            tone.isFirstOrder = false;\r\n\r\n            useFilterResonanceStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, false), ModSetting.mstFilterPeak);\r\n            useFilterResonanceEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, true), ModSetting.mstFilterPeak);\r\n\r\n            // Also set cut in the tone.\r\n            tone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n            const filterResonanceEnd: number = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceEnd - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\r\n            // Just a linear delta. Could get messy since it's not an amazing approximation of sqrt?\r\n            tone.filterResonanceDelta = (filterResonanceEnd - tone.filterResonanceStart) / runLength;\r\n        }\r\n        else {\r\n            // Still need to compute this, mods or no. This calc is delegated to the tone level instead of the synth level, a notable difference from beepbox.\r\n            // No functional difference though.\r\n            tone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n        }\r\n\r\n        if (tone.isFirstOrder == false) {\r\n            filterVolumeStart = Math.pow(filterVolumeStart, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceStart - 1));\r\n            filterVolumeEnd = Math.pow(filterVolumeEnd, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceEnd - 1));\r\n        }\r\n        if (filterEnvelope.type == EnvelopeType.decay) {\r\n            filterVolumeStart *= (1.25 + .025 * filterEnvelope.speed);\r\n            filterVolumeEnd *= (1.25 + .025 * filterEnvelope.speed);\r\n        } else if (filterEnvelope.type == EnvelopeType.twang) {\r\n            filterVolumeStart *= (1 + .02 * filterEnvelope.speed);\r\n            filterVolumeEnd *= (1 + .02 * filterEnvelope.speed);\r\n        }\r\n\r\n        if (resetPhases) {\r\n            tone.reset();\r\n        }\r\n\r\n        if (instrument.type == InstrumentType.fm) {\r\n            // phase modulation!\r\n\r\n            let sineVolumeBoostStart: number = 1.0;\r\n            let sineVolumeBoostEnd: number = 1.0;\r\n            let totalCarrierVolumeStart: number = 0.0;\r\n            let totalCarrierVolumeEnd: number = 0.0;\r\n\r\n            let arpeggioInterval: number = 0;\r\n            if (tone.pitchCount > 1 && !chord.harmonizes) {\r\n                const arpeggio: number = Math.floor((instrument.arpTime) / Config.ticksPerArpeggio);\r\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n            }\r\n\r\n            let detuneStart: number = instrument.detune / 25;\r\n            let detuneEnd: number = instrument.detune / 25;\r\n            if (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n                detuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n                detuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n            }\r\n\r\n            if (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n                detuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n                detuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n            }\r\n\r\n            const carrierCount: number = Config.algorithms[instrument.algorithm].carrierCount;\r\n            for (let i: number = 0; i < Config.operatorCount; i++) {\r\n\r\n                const associatedCarrierIndex: number = Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1;\r\n                const pitch: number = tone.pitches[!chord.harmonizes ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\r\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\r\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\r\n                const startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale + interval;\r\n                const startFreq: number = freqMult * (Instrument.frequencyFromPitch(startPitch)) + Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n\r\n                tone.phaseDeltas[i] = startFreq * sampleTime * Config.sineWaveLength;\r\n\r\n                let amplitudeStart: number = instrument.operators[i].amplitude;\r\n                let amplitudeEnd: number = instrument.operators[i].amplitude;\r\n                if (synth.isModActive(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx)) {\r\n                    amplitudeStart *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, false) / 15.0;\r\n                    amplitudeEnd *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, true) / 15.0;\r\n                }\r\n\r\n                const amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\r\n                const amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\r\n                const amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n                const amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n                let volumeStart: number = amplitudeMultStart;\r\n                let volumeEnd: number = amplitudeMultEnd;\r\n\r\n                // Check for mod-related volume delta\r\n                if (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                    const startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n                    const endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n                    volumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n                    volumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n                }\r\n\r\n                // Check for SONG mod-related volume delta\r\n                if (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n                    volumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n                    volumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n                }\r\n\r\n                if (i < carrierCount) {\r\n                    // carrier\r\n                    const endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale + interval;\r\n                    const pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n                    const pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n                    volumeStart *= pitchVolumeStart;\r\n                    volumeEnd *= pitchVolumeEnd;\r\n\r\n                    totalCarrierVolumeStart += amplitudeCurveStart;\r\n                    totalCarrierVolumeEnd += amplitudeCurveEnd;\r\n                } else {\r\n                    // modulator\r\n                    volumeStart *= Config.sineWaveLength * 1.5;\r\n                    volumeEnd *= Config.sineWaveLength * 1.5;\r\n\r\n                    sineVolumeBoostStart *= 1.0 - Math.min(1.0, amplitudeStart / 15);\r\n                    sineVolumeBoostEnd *= 1.0 - Math.min(1.0, amplitudeEnd / 15);\r\n                }\r\n                const operatorEnvelope: Envelope = Config.envelopes[instrument.operators[i].envelope];\r\n\r\n                volumeStart *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n                volumeEnd *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n                tone.volumeStarts[i] = volumeStart;\r\n                tone.volumeDeltas[i] = (volumeEnd - volumeStart) / runLength;\r\n            }\r\n\r\n            let useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\r\n            let useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\r\n            if (synth.isModActive(ModSetting.mstFMFeedback, false, channel, instrumentIdx)) {\r\n                useFeedbackAmplitudeStart *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, false) / 15.0;\r\n                useFeedbackAmplitudeEnd *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, true) / 15.0;\r\n            }\r\n\r\n            const feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\r\n            const feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\r\n            const feedbackEnvelope: Envelope = Config.envelopes[instrument.feedbackEnvelope];\r\n            let feedbackStart: number = feedbackAmplitudeStart * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n            let feedbackEnd: number = feedbackAmplitudeEnd * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n            tone.feedbackMult = feedbackStart;\r\n            tone.feedbackDelta = (feedbackEnd - tone.feedbackMult) / runLength;\r\n\r\n            const volumeMult: number = baseVolume * instrumentVolumeMult;\r\n            tone.volumeStart = filterVolumeStart * volumeMult * transitionVolumeStart * chordVolumeStart;\r\n            const volumeEnd: number = filterVolumeEnd * volumeMult * transitionVolumeEnd * chordVolumeEnd;\r\n            tone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n            sineVolumeBoostStart *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeStart / 15.0)) - 1.0) / 3.0;\r\n            sineVolumeBoostEnd *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeEnd / 15.0)) - 1.0) / 3.0;\r\n            sineVolumeBoostStart *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeStart - 1) / 2.0);\r\n            sineVolumeBoostEnd *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeEnd - 1) / 2.0);\r\n            tone.volumeStart *= 1.0 + sineVolumeBoostStart * 3.0;\r\n            tone.volumeDelta *= 1.0 + (sineVolumeBoostStart + sineVolumeBoostEnd) * 1.5; // Volume boosts are averaged such that delta brings you to next target start boost.\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            // Modulator value is used for data, so don't actually compute audio nonsense for it.\r\n            tone.volumeStart = transitionVolumeStart;\r\n            let volumeEnd: number = transitionVolumeEnd;\r\n\r\n            tone.volumeStart *= customVolumeStart;\r\n            volumeEnd *= customVolumeEnd;\r\n\r\n            tone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n        } else {\r\n            let detuneStart: number = instrument.detune / 25;\r\n            let detuneEnd: number = instrument.detune / 25;\r\n            if (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n                detuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n                detuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n            }\r\n\r\n            if (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n                detuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n                detuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n            }\r\n\r\n            let pitch: number = tone.pitches[0];\r\n\r\n            if (tone.pitchCount > 1) {\r\n                const arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\r\n                if (chord.harmonizes) {\r\n                    const intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n                    tone.intervalMult = Math.pow(2.0, intervalOffset / 12.0);\r\n                    tone.intervalVolumeMult = Math.pow(2.0, -intervalOffset / pitchDamping);\r\n                } else {\r\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\r\n                }\r\n            }\r\n\r\n            const startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale;\r\n            const endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale;\r\n            const startFreq: number = Instrument.frequencyFromPitch(startPitch);\r\n            const pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n            const pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n            let settingsVolumeMultStart: number = baseVolume * filterVolumeStart;\r\n            let settingsVolumeMultEnd: number = baseVolume * filterVolumeEnd;\r\n            if (instrument.type == InstrumentType.noise) {\r\n                settingsVolumeMultStart *= Config.chipNoises[instrument.chipNoise].volume;\r\n                settingsVolumeMultEnd *= Config.chipNoises[instrument.chipNoise].volume;\r\n            }\r\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n                settingsVolumeMultStart *= Config.chipWaves[instrument.chipWave].volume;\r\n                settingsVolumeMultEnd *= Config.chipWaves[instrument.chipWave].volume;\r\n            }\r\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.customChipWave) {\r\n                settingsVolumeMultStart *= Config.intervals[instrument.interval].volume;\r\n                settingsVolumeMultEnd *= Config.intervals[instrument.interval].volume;\r\n            }\r\n            if (instrument.type == InstrumentType.pwm) {\r\n\r\n                // Check for PWM mods to this instrument\r\n                let pulseWidthModStart: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n                let pulseWidthModEnd: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n                if (synth.isModActive(ModSetting.mstPulseWidth, false, channel, instrumentIdx)) {\r\n                    pulseWidthModStart = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, false)) / (Config.pulseWidthRange * 2);\r\n                    pulseWidthModEnd = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, true)) / (Config.pulseWidthRange * 2);\r\n                }\r\n\r\n                const pulseEnvelope: Envelope = Config.envelopes[instrument.pulseEnvelope];\r\n                const pulseWidthStart: number = pulseWidthModStart * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n                const pulseWidthEnd: number = pulseWidthModEnd * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n                tone.pulseWidth = pulseWidthStart;\r\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / runLength;\r\n            }\r\n\r\n            tone.phaseDeltas[0] = startFreq * sampleTime;\r\n\r\n            tone.volumeStart = transitionVolumeStart * chordVolumeStart * pitchVolumeStart * settingsVolumeMultStart * instrumentVolumeMult;\r\n            let volumeEnd: number = transitionVolumeEnd * chordVolumeEnd * pitchVolumeEnd * settingsVolumeMultEnd * instrumentVolumeMult;\r\n\r\n            if (filterEnvelope.type != EnvelopeType.custom && (instrument.type != InstrumentType.pwm || Config.envelopes[instrument.pulseEnvelope].type != EnvelopeType.custom)) {\r\n                tone.volumeStart *= customVolumeStart;\r\n                volumeEnd *= customVolumeEnd;\r\n            }\r\n\r\n            // Check for mod-related volume delta\r\n            if (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                const startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n                const endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n                tone.volumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n                volumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n            }\r\n            // Check for SONG mod-related volume delta\r\n            if (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n                tone.volumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n                volumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n            }\r\n\r\n            tone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n        }\r\n\r\n        tone.phaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / 12.0) / runLength);\r\n    }\r\n\r\n    public static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\r\n        let effect: number = 0;\r\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\r\n            effect += Math.sin(Math.PI * 2 * secondsIntoBar / vibratoPeriodSeconds);\r\n        }\r\n        return effect;\r\n    }\r\n\r\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\r\n\r\n    private static getInstrumentSynthFunction(instrument: Instrument): Function {\r\n        if (instrument.type == InstrumentType.fm) {\r\n            const fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\r\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\r\n                const synthSource: string[] = [];\r\n\r\n                for (const line of Synth.fmSourceTemplate) {\r\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n                        const outputs: string[] = [];\r\n                        for (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\r\n                            outputs.push(\"operator\" + j + \"Scaled\");\r\n                        }\r\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n                        for (let j: number = Config.operatorCount - 1; j >= 0; j--) {\r\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\r\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n                                    let modulators = \"\";\r\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\r\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n                                    }\r\n\r\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\r\n                                    if (feedbackIndices.length > 0) {\r\n                                        modulators += \" + feedbackMult * (\";\r\n                                        const feedbacks: string[] = [];\r\n                                        for (const modulatorNumber of feedbackIndices) {\r\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n                                        }\r\n                                        modulators += feedbacks.join(\" + \") + \")\";\r\n                                    }\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n                                } else {\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (line.indexOf(\"#\") != -1) {\r\n                        for (let j = 0; j < Config.operatorCount; j++) {\r\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\r\n                        }\r\n                    } else {\r\n                        synthSource.push(line);\r\n                    }\r\n                }\r\n\r\n                //console.log(synthSource.join(\"\\n\"));\r\n\r\n                Synth.fmSynthFunctionCache[fingerprint] = new Function(\"synth\", \"data\", \"stereoBufferIndex\", \"stereoBufferLength\", \"runLength\", \"tone\", \"instrument\", synthSource.join(\"\\n\"));\r\n            }\r\n            return Synth.fmSynthFunctionCache[fingerprint];\r\n        } else if (instrument.type == InstrumentType.chip) {\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.customChipWave) {\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            return Synth.harmonicsSynth;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            return Synth.pulseWidthSynth;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            return Synth.noiseSynth;\r\n        } else if (instrument.type == InstrumentType.spectrum) {\r\n            return Synth.spectrumSynth;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            return Synth.drumsetSynth;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            return Synth.modSynth;\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\r\n        }\r\n    }\r\n\r\n    private static chipSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        var wave: Float64Array;\r\n        var volumeScale: number;\r\n\r\n        const isCustomWave: boolean = (instrument.type == InstrumentType.customChipWave);\r\n\r\n        if (!isCustomWave) {\r\n            wave = Config.chipWaves[instrument.chipWave].samples;\r\n            volumeScale = 1.0;\r\n        }\r\n        else {\r\n            wave = instrument.customChipWaveIntegral;\r\n            // Integrals for custom chip wave can get rather big. This \"zero point\" can be config'ed later.\r\n            volumeScale = 0.1;\r\n        }\r\n\r\n        const waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n        const intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / 12.0);\r\n        const intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / 12.0) * tone.intervalMult;\r\n        const intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n        if (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n        const deltaRatio: number = intervalB / intervalA;\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n        let phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const phaseAInt: number = phaseA | 0;\r\n        const phaseBInt: number = phaseB | 0;\r\n        const indexA: number = phaseAInt % waveLength;\r\n        const indexB: number = phaseBInt % waveLength;\r\n        const phaseRatioA: number = phaseA - phaseAInt;\r\n        const phaseRatioB: number = phaseB - phaseBInt;\r\n        let prevWaveIntegralA: number = wave[indexA];\r\n        let prevWaveIntegralB: number = wave[indexB];\r\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n\r\n        //console.log(\"S: \" + stereoBufferIndex + \" P: \" + stopIndex);\r\n\r\n        while (stereoBufferIndex < stopIndex) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            let nextWaveIntegralA: number = wave[indexA];\r\n            let nextWaveIntegralB: number = wave[indexB];\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n            let waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n            let waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n            prevWaveIntegralA = nextWaveIntegralA;\r\n            prevWaveIntegralB = nextWaveIntegralB;\r\n\r\n            const combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDeltaA *= phaseDeltaScale;\r\n            phaseDeltaB *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume * volumeScale;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        //debugString += \",\" + data.subarray(stereoBufferIndex - runLength, stereoBufferIndex).toString();\r\n        //console.log(stereoBufferIndex);\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n\r\n    }\r\n\r\n\r\n    private static harmonicsSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        const wave: Float32Array = instrument.harmonicsWave.getCustomWave();\r\n        const waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n        const intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / 12.0);\r\n        const intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / 12.0) * tone.intervalMult;\r\n        const intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n        if (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n        const deltaRatio: number = intervalB / intervalA;\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n        let phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const phaseAInt: number = phaseA | 0;\r\n        const phaseBInt: number = phaseB | 0;\r\n        const indexA: number = phaseAInt % waveLength;\r\n        const indexB: number = phaseBInt % waveLength;\r\n        const phaseRatioA: number = phaseA - phaseAInt;\r\n        const phaseRatioB: number = phaseB - phaseBInt;\r\n        let prevWaveIntegralA: number = wave[indexA];\r\n        let prevWaveIntegralB: number = wave[indexB];\r\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n        while (stereoBufferIndex < stopIndex) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            let nextWaveIntegralA: number = wave[indexA];\r\n            let nextWaveIntegralB: number = wave[indexB];\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n            let waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n            let waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\r\n            prevWaveIntegralA = nextWaveIntegralA;\r\n            prevWaveIntegralB = nextWaveIntegralB;\r\n\r\n            const combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDeltaA *= phaseDeltaScale;\r\n            phaseDeltaB *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static pulseWidthSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let phaseDelta: number = tone.phaseDeltas[0];\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phase: number = (tone.phases[0] % 1);\r\n\r\n        let pulseWidth: number = tone.pulseWidth;\r\n        const pulseWidthDelta: number = tone.pulseWidthDelta;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n\r\n        while (stereoBufferIndex < stopIndex) {\r\n\r\n            const sawPhaseA: number = phase % 1;\r\n            const sawPhaseB: number = (phase + pulseWidth) % 1;\r\n\r\n            let pulseWave: number = sawPhaseB - sawPhaseA;\r\n\r\n            // This a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing.\r\n            if (sawPhaseA < phaseDelta) {\r\n                var t = sawPhaseA / phaseDelta;\r\n                pulseWave += (t + t - t * t - 1) * 0.5;\r\n            } else if (sawPhaseA > 1.0 - phaseDelta) {\r\n                var t = (sawPhaseA - 1.0) / phaseDelta;\r\n                pulseWave += (t + t + t * t + 1) * 0.5;\r\n            }\r\n            if (sawPhaseB < phaseDelta) {\r\n                var t = sawPhaseB / phaseDelta;\r\n                pulseWave -= (t + t - t * t - 1) * 0.5;\r\n            } else if (sawPhaseB > 1.0 - phaseDelta) {\r\n                var t = (sawPhaseB - 1.0) / phaseDelta;\r\n                pulseWave -= (t + t + t * t + 1) * 0.5;\r\n            }\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (pulseWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n            pulseWidth += pulseWidthDelta;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phase;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static fmSourceTemplate: string[] = (`\r\nconst sineWave = beepbox.Config.sineWave;\r\n\r\nlet phaseDeltaScale = +tone.phaseDeltaScale;\r\n// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\nlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\r\nlet operator#PhaseDelta  = +tone.phaseDeltas[#];\r\nlet operator#OutputMult  = +tone.volumeStarts[#];\r\nconst operator#OutputDelta = +tone.volumeDeltas[#];\r\nlet operator#Output      = +tone.feedbackOutputs[#];\r\nlet feedbackMult         = +tone.feedbackMult;\r\nconst feedbackDelta        = +tone.feedbackDelta;\r\nlet volume = +tone.volumeStart;\r\nconst volumeDelta = +tone.volumeDelta;\r\n\r\nconst isFirstOrder = tone.isFirstOrder;\r\nlet filter1 = +tone.filter;\r\nlet filter2 = isFirstOrder ? 1.0 : filter1;\r\nconst filterScale1 = +tone.filterScale;\r\nconst filterScale2 = isFirstOrder ? 1.0 : filterScale1;\r\nlet filterResonance = tone.filterResonanceStart;\r\nlet filterResonanceDelta = tone.filterResonanceDelta;\r\nlet filterSample0 = +tone.filterSample0;\r\nlet filterSample1 = +tone.filterSample1;\r\n\r\nconst stopIndex = stereoBufferIndex + runLength;\r\nstereoBufferIndex += tone.stereoOffset;\r\nlet stereoVolumeL = tone.stereoVolumeLStart;\r\nlet stereoVolumeLDelta = tone.stereoVolumeLDelta;\r\nlet stereoVolumeR = tone.stereoVolumeRStart;\r\nlet stereoVolumeRDelta = tone.stereoVolumeRDelta;\r\nlet stereoDelay = tone.stereoDelayStart;\r\nlet stereoDelayDelta = tone.stereoDelayDelta;\r\nlet delays = [];\r\nwhile (stereoBufferIndex < stopIndex) {\r\n// INSERT OPERATOR COMPUTATION HERE\r\nconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\r\nconst feedback = filterResonance + filterResonance / (1.0 - filter1);\r\nfilterSample0 += filter1 * (fmOutput - filterSample0 + feedback * (filterSample0 - filterSample1));\r\nfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\nfeedbackMult += feedbackDelta;\r\noperator#OutputMult += operator#OutputDelta;\r\noperator#Phase += operator#PhaseDelta;\r\noperator#PhaseDelta *= phaseDeltaScale;\r\nfilter1 *= filterScale1;\r\nfilter2 *= filterScale2;\r\nfilterResonance += filterResonanceDelta;\r\n\r\nconst output = filterSample1 * volume;\r\nvolume += volumeDelta;\r\n\r\n//const absStereoDelay: number = Math.abs(stereoDelay);\r\n//const fracStereoDelay: number = absStereoDelay % 1;\r\n//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\ndelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\ndata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\ndata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\ndata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\ndata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\nstereoVolumeL += stereoVolumeLDelta;\r\nstereoVolumeR += stereoVolumeRDelta;\r\nstereoDelay += stereoDelayDelta;\r\n\r\nstereoBufferIndex += 2;\r\n}\r\n\r\ntone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\ntone.feedbackOutputs[#] = operator#Output;\r\n\r\nconst epsilon = (1.0e-24);\r\nif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\nif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\ntone.filterSample0 = filterSample0;\r\ntone.filterSample1 = filterSample1;\r\n`).split(\"\\n\");\r\n\r\n    private static operatorSourceTemplate: string[] = (`\r\nconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\nconst operator#PhaseInt = operator#PhaseMix|0;\r\nconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\r\nconst operator#Sample   = sineWave[operator#Index];\r\noperator#Output       = operator#Sample + (sineWave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\nconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n`).split(\"\\n\");\r\n\r\n    private static noiseSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let wave: Float32Array = instrument.getDrumWave();\r\n        let phaseDelta: number = +tone.phaseDeltas[0];\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        if (tone.phases[0] == 0) {\r\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n            phase = Math.random() * Config.chipNoiseLength;\r\n        }\r\n        let sample: number = +tone.sample;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const pitchRelativefilter: number = Math.min(1.0, tone.phaseDeltas[0] * Config.chipNoises[instrument.chipNoise].pitchFilterMult);\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n        while (stereoBufferIndex < stopIndex) {\r\n            const waveSample: number = wave[phase & 0x7fff];\r\n\r\n            sample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            phase += phaseDelta;\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDelta *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.sample = sample;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static spectrumSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let wave: Float32Array = instrument.getDrumWave();\r\n        let phaseDelta: number = tone.phaseDeltas[0] * (1 << 7);\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let sample: number = +tone.sample;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta);\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n\r\n        while (stereoBufferIndex < stopIndex) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & 0x7fff;\r\n            let waveSample: number = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            waveSample += (wave[index + 1] - waveSample) * phaseRatio;\r\n\r\n            sample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            phase += phaseDelta;\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDelta *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.sample = sample;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static drumsetSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let wave: Float32Array = instrument.getDrumsetWave(tone.drumsetPitch);\r\n        let phaseDelta: number = tone.phaseDeltas[0] / Instrument.drumsetIndexReferenceDelta(tone.drumsetPitch);;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let sample: number = +tone.sample;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n        while (stereoBufferIndex < stopIndex) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & 0x7fff;\r\n            sample = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            sample += (wave[index + 1] - sample) * phaseRatio;\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            phase += phaseDelta;\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDelta *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.sample = sample;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static modSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        // Note: present modulator value is tone.volumeStart.\r\n\r\n        if (!synth.song) return;\r\n\r\n        let mod: number = Config.modCount - 1 - tone.pitches[0];\r\n        let setting: ModSetting = instrument.modSettings[mod];\r\n\r\n        synth.setModValue(tone.customVolumeStart, tone.customVolumeEnd, mod, instrument, setting);\r\n\r\n        // Reset arps, but only at the start of the note\r\n        if (setting == ModSetting.mstResetArpeggio && synth.tick == 0 && tone.noteStart == synth.beat * Config.partsPerBeat + synth.part) {\r\n            synth.song.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].arpTime = 0;\r\n        }\r\n        else if (setting == ModSetting.mstNextBar) {\r\n            synth.wantToSkip = true;\r\n        }\r\n    }\r\n\r\n    private static findRandomZeroCrossing(wave: Float32Array): number {\r\n        let phase: number = Math.random() * Config.chipNoiseLength;\r\n\r\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\r\n        // otherwise they pop. Try to find a zero crossing.\r\n        let indexPrev: number = phase & 0x7fff;\r\n        let wavePrev: number = wave[indexPrev];\r\n        const stride: number = 16;\r\n        for (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\r\n            const indexNext: number = (indexPrev + stride) & 0x7fff;\r\n            const waveNext: number = wave[indexNext];\r\n            if (wavePrev * waveNext <= 0.0) {\r\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\r\n                for (let i: number = 0; i < 16; i++) {\r\n                    const innerIndexNext: number = (indexPrev + 1) & 0x7fff;\r\n                    const innerWaveNext: number = wave[innerIndexNext];\r\n                    if (wavePrev * innerWaveNext <= 0.0) {\r\n                        // Found the zero crossing again! Now let's find the exact intersection.\r\n                        const slope: number = innerWaveNext - wavePrev;\r\n                        phase = indexPrev;\r\n                        if (Math.abs(slope) > 0.00000001) {\r\n                            phase += -wavePrev / slope;\r\n                        }\r\n                        phase = Math.max(0, phase) % Config.chipNoiseLength;\r\n                        break;\r\n                    } else {\r\n                        indexPrev = innerIndexNext;\r\n                        wavePrev = innerWaveNext;\r\n                    }\r\n                }\r\n                break;\r\n            } else {\r\n                indexPrev = indexNext;\r\n                wavePrev = waveNext;\r\n            }\r\n        }\r\n\r\n        return phase;\r\n    }\r\n\r\n    public static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\r\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\r\n    }\r\n    public static volumeMultToInstrumentVolume(volumeMult: number): number {\r\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\r\n    }\r\n    public static expressionToVolumeMult(expression: number): number {\r\n        return Math.pow(Math.max(0.0, expression) / 6.0, 1.5);\r\n    }\r\n    public static volumeMultToExpression(volumeMult: number): number {\r\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * 6.0;\r\n    }\r\n\r\n    private getSamplesPerTick(): number {\r\n        if (this.song == null) return 0;\r\n        let beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n        if (this.isModActive(ModSetting.mstTempo, true)) {\r\n            beatsPerMinute = this.getModValue(ModSetting.mstTempo, true);\r\n        }\r\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\r\n    }\r\n\r\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\r\n        const beatsPerSecond: number = beatsPerMinute / 60.0;\r\n        const partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\r\n        const tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\r\n        return this.samplesPerSecond / tickPerSecond;\r\n    }\r\n}\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config } from \"../synth/SynthConfig\";\r\nimport { ColorConfig } from \"../editor/ColorConfig\";\r\nimport { NotePin, Note, Pattern, Instrument, Channel, Synth } from \"../synth/synth\";\r\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\r\n\r\n//namespace beepbox {\r\nconst { a, button, div, h1, input } = HTML;\r\nconst { svg, circle, rect, path } = SVG;\r\n\r\ndocument.head.appendChild(HTML.style({ type: \"text/css\" }, `\r\n\t\tbody {\r\n\t\t\tcolor: ${ColorConfig.primaryText};\r\n\t\t\tbackground: ${ColorConfig.editorBackground};\r\n\t\t}\r\n\t\th1 {\r\n\t\t\tfont-weight: bold;\r\n\t\t\tfont-size: 14px;\r\n\t\t\tline-height: 22px;\r\n\t\t\ttext-align: initial;\r\n\t\t\tmargin: 0;\r\n\t\t}\r\n\t\ta {\r\n\t\t\tfont-weight: bold;\r\n\t\t\tfont-size: 12px;\r\n\t\t\tline-height: 22px;\r\n\t\t\twhite-space: nowrap;\r\n\t\t\tcolor: ${ColorConfig.linkAccent};\r\n\t\t}\r\n\t\tbutton {\r\n\t\t\tmargin: 0;\r\n\t\t\tpadding: 0;\r\n\t\t\tposition: relative;\r\n\t\t\tborder: none;\r\n\t\t\tborder-radius: 5px;\r\n\t\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\t\tcolor: ${ColorConfig.primaryText};\r\n\t\t\tcursor: pointer;\r\n\t\t\tfont-size: 14px;\r\n\t\t\tfont-family: inherit;\r\n\t\t}\r\n\t\tbutton:hover, button:focus {\r\n\t\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t\t}\r\n\t\t.playButton, .pauseButton {\r\n\t\t\tpadding-left: 24px;\r\n\t\t\tpadding-right: 6px;\r\n\t\t}\r\n\t\t.playButton::before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: 6px;\r\n\t\t\ttop: 50%;\r\n\t\t\tmargin-top: -6px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tpointer-events: none;\r\n\t\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\r\n\t\t\t-webkit-mask-repeat: no-repeat;\r\n\t\t\t-webkit-mask-position: center;\r\n\t\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\r\n\t\t\tmask-repeat: no-repeat;\r\n\t\t\tmask-position: center;\r\n\t\t}\r\n\t\t.pauseButton::before {\r\n\t\t\tcontent: \"\";\r\n\t\t\tposition: absolute;\r\n\t\t\tleft: 6px;\r\n\t\t\ttop: 50%;\r\n\t\t\tmargin-top: -6px;\r\n\t\t\twidth: 12px;\r\n\t\t\theight: 12px;\r\n\t\t\tpointer-events: none;\r\n\t\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\r\n\t\t\t-webkit-mask-repeat: no-repeat;\r\n\t\t\t-webkit-mask-position: center;\r\n\t\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\r\n\t\t\tmask-repeat: no-repeat;\r\n\t\t\tmask-position: center;\r\n\t\t}\r\n\t\t\r\n\t\tinput[type=range] {\r\n\t\t\t-webkit-appearance: none;\r\n\t\t\tappearance: none;\r\n\t\t\theight: 16px;\r\n\t\t\tmargin: 0;\r\n\t\t\tcursor: pointer;\r\n\t\t\tbackground-color: ${ColorConfig.editorBackground};\r\n\t\t\ttouch-action: pan-y;\r\n\t\t}\r\n\t\tinput[type=range]:focus {\r\n\t\t\toutline: none;\r\n\t\t}\r\n\t\tinput[type=range]::-webkit-slider-runnable-track {\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 4px;\r\n\t\t\tcursor: pointer;\r\n\t\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\t}\r\n\t\tinput[type=range]::-webkit-slider-thumb {\r\n\t\t\theight: 16px;\r\n\t\t\twidth: 4px;\r\n\t\t\tborder-radius: 2px;\r\n\t\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t\tcursor: pointer;\r\n\t\t\t-webkit-appearance: none;\r\n\t\t\tmargin-top: -6px;\r\n\t\t}\r\n\t\tinput[type=range]:focus::-webkit-slider-runnable-track, input[type=range]:hover::-webkit-slider-runnable-track {\r\n\t\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t\t}\r\n\t\tinput[type=range]::-moz-range-track {\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 4px;\r\n\t\t\tcursor: pointer;\r\n\t\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\t}\r\n\t\tinput[type=range]:focus::-moz-range-track, input[type=range]:hover::-moz-range-track  {\r\n\t\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t\t}\r\n\t\tinput[type=range]::-moz-range-thumb {\r\n\t\t\theight: 16px;\r\n\t\t\twidth: 4px;\r\n\t\t\tborder-radius: 2px;\r\n\t\t\tborder: none;\r\n\t\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t\tcursor: pointer;\r\n\t\t}\r\n\t\tinput[type=range]::-ms-track {\r\n\t\t\twidth: 100%;\r\n\t\t\theight: 4px;\r\n\t\t\tcursor: pointer;\r\n\t\t\tbackground: ${ColorConfig.uiWidgetBackground};\r\n\t\t\tborder-color: transparent;\r\n\t\t}\r\n\t\tinput[type=range]:focus::-ms-track, input[type=range]:hover::-ms-track {\r\n\t\t\tbackground: ${ColorConfig.uiWidgetFocus};\r\n\t\t}\r\n\t\tinput[type=range]::-ms-thumb {\r\n\t\t\theight: 16px;\r\n\t\t\twidth: 4px;\r\n\t\t\tborder-radius: 2px;\r\n\t\t\tbackground: ${ColorConfig.primaryText};\r\n\t\t\tcursor: pointer;\r\n\t\t}\r\n\t`));\r\n\r\nColorConfig.setTheme(\"jummbox classic\");\r\n\r\nlet prevHash: string | null = null;\r\nlet id: string = ((Math.random() * 0xffffffff) >>> 0).toString(16);\r\nlet pauseButtonDisplayed: boolean = false;\r\nlet animationRequest: number | null;\r\nlet zoomEnabled: boolean = false;\r\nlet timelineWidth: number = 1;\r\nlet outVolumeHistoricTimer: number = 0;\r\nlet outVolumeHistoricCap: number = 0;\r\n\r\nconst synth: Synth = new Synth();\r\nlet titleText: HTMLHeadingElement = h1({ style: \"flex-grow: 1; margin: 0 1px; margin-left: 10px; overflow: hidden;\" }, \"\");\r\nlet editLink: HTMLAnchorElement = a({ target: \"_top\", style: \"margin: 0 4px;\" }, \"✎ Edit\");\r\nlet copyLink: HTMLAnchorElement = a({ href: \"javascript:void(0)\", style: \"margin: 0 4px;\" }, \"⎘ Copy URL\");\r\nlet shareLink: HTMLAnchorElement = a({ href: \"javascript:void(0)\", style: \"margin: 0 4px;\" }, \"⤳ Share\");\r\nlet fullscreenLink: HTMLAnchorElement = a({ target: \"_top\", style: \"margin: 0 4px;\" }, \"⇱ Fullscreen\");\r\n\r\nlet draggingPlayhead: boolean = false;\r\nconst playButton: HTMLButtonElement = button({ style: \"width: 100%; height: 100%; max-height: 50px;\" });\r\nconst playButtonContainer: HTMLDivElement = div({ style: \"flex-shrink: 0; display: flex; padding: 2px; width: 80px; height: 100%; box-sizing: border-box; align-items: center;\" },\r\n\tplayButton,\r\n);\r\nconst loopIcon: SVGPathElement = path({ d: \"M 4 2 L 4 0 L 7 3 L 4 6 L 4 4 Q 2 4 2 6 Q 2 8 4 8 L 4 10 Q 0 10 0 6 Q 0 2 4 2 M 8 10 L 8 12 L 5 9 L 8 6 L 8 8 Q 10 8 10 6 Q 10 4 8 4 L 8 2 Q 12 2 12 6 Q 12 10 8 10 z\" });\r\nconst loopButton: HTMLButtonElement = button({ title: \"loop\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\" }, svg({ width: 12, height: 12, viewBox: \"0 0 12 12\" },\r\n\tloopIcon,\r\n));\r\n\r\nconst volumeIcon: SVGSVGElement = svg({ style: \"flex: 0 0 12px; margin: 0 1px; width: 12px; height: 12px;\", viewBox: \"0 0 12 12\" },\r\n\tpath({ fill: ColorConfig.uiWidgetBackground, d: \"M 1 9 L 1 3 L 4 3 L 7 0 L 7 12 L 4 9 L 1 9 M 9 3 Q 12 6 9 9 L 8 8 Q 10.5 6 8 4 L 9 3 z\" }),\r\n);\r\nconst volumeSlider: HTMLInputElement = input({ title: \"volume\", type: \"range\", value: 75, min: 0, max: 75, step: 1, style: \"width: 12vw; max-width: 100px; margin: 0 1px;\" });\r\n\r\nconst zoomIcon: SVGSVGElement = svg({ width: 12, height: 12, viewBox: \"0 0 12 12\" },\r\n\tcircle({ cx: \"5\", cy: \"5\", r: \"4.5\", \"stroke-width\": \"1\", stroke: \"currentColor\", fill: \"none\" }),\r\n\tpath({ stroke: \"currentColor\", \"stroke-width\": \"2\", d: \"M 8 8 L 11 11 M 5 2 L 5 8 M 2 5 L 8 5\", fill: \"none\" }),\r\n);\r\nconst zoomButton: HTMLButtonElement = button({ title: \"zoom\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\" },\r\n\tzoomIcon,\r\n);\r\n\r\nconst timeline: SVGSVGElement = svg({ style: \"min-width: 0; min-height: 0; touch-action: pan-y pinch-zoom;\" });\r\nconst playhead: HTMLDivElement = div({ style: `position: absolute; left: 0; top: 0; width: 2px; height: 100%; background: ${ColorConfig.playhead}; pointer-events: none;` });\r\nconst timelineContainer: HTMLDivElement = div({ style: \"display: flex; flex-grow: 1; flex-shrink: 1; position: relative;\" }, timeline, playhead);\r\nconst visualizationContainer: HTMLDivElement = div({ style: \"display: flex; flex-grow: 1; flex-shrink: 1; height: 0; position: relative; align-items: center; overflow: hidden;\" }, timelineContainer);\r\n\r\nconst outVolumeBarBg: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"90%\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetBackground });\r\nconst outVolumeBar: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", height: \"50%\", width: \"0%\", x: \"5%\", y: \"25%\", fill: \"url('#volumeGrad2')\" });\r\nconst outVolumeCap: SVGRectElement = SVG.rect({ \"pointer-events\": \"none\", width: \"2px\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetFocus });\r\nconst stop1: SVGStopElement = SVG.stop({ \"stop-color\": \"lime\", offset: \"60%\" });\r\nconst stop2: SVGStopElement = SVG.stop({ \"stop-color\": \"orange\", offset: \"90%\" });\r\nconst stop3: SVGStopElement = SVG.stop({ \"stop-color\": \"red\", offset: \"100%\" });\r\nconst gradient: SVGGradientElement = SVG.linearGradient({ id: \"volumeGrad2\", gradientUnits: \"userSpaceOnUse\" }, stop1, stop2, stop3);\r\nconst defs: SVGDefsElement = SVG.defs({}, gradient);\r\nconst volumeBarContainer: SVGSVGElement = SVG.svg({ style: `touch-action: none; overflow: hidden; margin: auto;`, width: \"160px\", height: \"10px\", preserveAspectRatio: \"none\" },\r\n\tdefs,\r\n\toutVolumeBarBg,\r\n\toutVolumeBar,\r\n\toutVolumeCap,\r\n);\r\n\r\ndocument.body.appendChild(visualizationContainer);\r\ndocument.body.appendChild(\r\n\tdiv({ style: `flex-shrink: 0; height: 20vh; min-height: 22px; max-height: 70px; display: flex; align-items: center;` },\r\n\t\tplayButtonContainer,\r\n\t\tloopButton,\r\n\t\tvolumeIcon,\r\n\t\tvolumeSlider,\r\n\t\tzoomButton,\r\n\t\tvolumeBarContainer,\r\n\t\ttitleText,\r\n\t\teditLink,\r\n\t\tcopyLink,\r\n\t\tshareLink,\r\n\t\tfullscreenLink,\r\n\t),\r\n);\r\n\r\nfunction hashUpdatedExternally(): void {\r\n\tlet myHash: string = location.hash;\r\n\tif (prevHash == myHash || myHash == \"\") return;\r\n\r\n\tprevHash = myHash;\r\n\r\n\tif (myHash.charAt(0) == \"#\") {\r\n\t\tmyHash = myHash.substring(1);\r\n\t}\r\n\r\n\tfullscreenLink.setAttribute(\"href\", location.href);\r\n\r\n\tfor (const parameter of myHash.split(\"&\")) {\r\n\t\tlet equalsIndex: number = parameter.indexOf(\"=\");\r\n\t\tif (equalsIndex != -1) {\r\n\t\t\tlet paramName: string = parameter.substring(0, equalsIndex);\r\n\t\t\tlet value: string = parameter.substring(equalsIndex + 1);\r\n\t\t\tswitch (paramName) {\r\n\t\t\t\tcase \"song\":\r\n\t\t\t\t\tsynth.setSong(value);\r\n\t\t\t\t\tsynth.snapToStart();\r\n\t\t\t\t\tif (synth.song) {\r\n\t\t\t\t\t\ttitleText.textContent = synth.song.title;\r\n\t\t\t\t\t}\r\n\t\t\t\t\teditLink.setAttribute(\"href\", \"../#\" + value);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t//case \"title\":\r\n\t\t\t\t//\ttitleText.textContent = decodeURIComponent(value);\r\n\t\t\t\t//\tbreak;\r\n\t\t\t\tcase \"loop\":\r\n\t\t\t\t\tsynth.loopRepeatCount = (value != \"1\") ? 0 : -1;\r\n\t\t\t\t\trenderLoopIcon();\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tsynth.setSong(myHash);\r\n\t\t\tsynth.snapToStart();\r\n\t\t\teditLink.setAttribute(\"href\", \"../#\" + myHash);\r\n\t\t}\r\n\t}\r\n\r\n\trenderTimeline();\r\n}\r\n\r\nfunction onWindowResize(): void {\r\n\trenderTimeline();\r\n}\r\n\r\nfunction animate(): void {\r\n\tif (synth.playing) {\r\n\t\tanimationRequest = requestAnimationFrame(animate);\r\n\t\tif (localStorage.getItem(\"playerId\") != id) {\r\n\t\t\tonTogglePlay();\r\n\t\t}\r\n\t\trenderPlayhead();\r\n\r\n\t\tvolumeUpdate();\r\n\t}\r\n\r\n\tif (pauseButtonDisplayed != synth.playing) {\r\n\t\trenderPlayButton();\r\n\t}\r\n\r\n}\r\n\r\nfunction volumeUpdate(): void {\r\n\tif (synth.song == null) {\r\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\r\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\r\n\t\treturn;\r\n\t}\r\n\toutVolumeHistoricTimer--;\r\n\tif (outVolumeHistoricTimer <= 0) {\r\n\t\toutVolumeHistoricCap -= 0.03;\r\n\t}\r\n\tif (synth.song.outVolumeCap > outVolumeHistoricCap) {\r\n\t\toutVolumeHistoricCap = synth.song.outVolumeCap;\r\n\t\toutVolumeHistoricTimer = 50;\r\n\t}\r\n\r\n\tanimateVolume(synth.song.outVolumeCap, outVolumeHistoricCap);\r\n\r\n\tif (!synth.playing) {\r\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\r\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\r\n\t}\r\n}\r\n\r\nfunction animateVolume(useOutVolumeCap: number, historicOutCap: number): void {\r\n\toutVolumeBar.setAttribute(\"width\", \"\" + Math.min(144, useOutVolumeCap * 144));\r\n\toutVolumeCap.setAttribute(\"x\", \"\" + (8 + Math.min(144, historicOutCap * 144)));\r\n}\r\n\r\nfunction onTogglePlay(): void {\r\n\tif (synth.song != null) {\r\n\t\tif (animationRequest != null) cancelAnimationFrame(animationRequest);\r\n\t\tanimationRequest = null;\r\n\t\tif (synth.playing) {\r\n\t\t\tsynth.pause();\r\n\t\t\tvolumeUpdate();\r\n\t\t} else {\r\n\t\t\tsynth.play();\r\n\t\t\tlocalStorage.setItem(\"playerId\", id);\r\n\t\t\tanimate();\r\n\t\t}\r\n\t}\r\n\trenderPlayButton();\r\n}\r\n\r\nfunction onToggleLoop(): void {\r\n\tif (synth.loopRepeatCount == -1) {\r\n\t\tsynth.loopRepeatCount = 0;\r\n\t} else {\r\n\t\tsynth.loopRepeatCount = -1;\r\n\t}\r\n\trenderLoopIcon();\r\n}\r\n\r\nfunction onVolumeChange(): void {\r\n\tlocalStorage.setItem(\"volume\", volumeSlider.value);\r\n\tsetSynthVolume();\r\n}\r\n\r\nfunction onToggleZoom(): void {\r\n\tzoomEnabled = !zoomEnabled;\r\n\trenderZoomIcon();\r\n\trenderTimeline();\r\n}\r\n\r\nfunction onTimelineMouseDown(event: MouseEvent): void {\r\n\tdraggingPlayhead = true;\r\n\tonTimelineMouseMove(event);\r\n}\r\n\r\nfunction onTimelineMouseMove(event: MouseEvent): void {\r\n\tevent.preventDefault();\r\n\tonTimelineCursorMove(event.clientX || event.pageX);\r\n}\r\n\r\nfunction onTimelineTouchDown(event: TouchEvent): void {\r\n\tdraggingPlayhead = true;\r\n\tonTimelineTouchMove(event);\r\n}\r\n\r\nfunction onTimelineTouchMove(event: TouchEvent): void {\r\n\tonTimelineCursorMove(event.touches[0].clientX);\r\n}\r\n\r\nfunction onTimelineCursorMove(mouseX: number): void {\r\n\tif (draggingPlayhead && synth.song != null) {\r\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\t\tsynth.playhead = synth.song.barCount * (mouseX - boundingRect.left) / (boundingRect.right - boundingRect.left);\r\n\t\tsynth.computeLatestModValues();\r\n\t\trenderPlayhead();\r\n\t}\r\n}\r\n\r\nfunction onTimelineCursorUp(): void {\r\n\tdraggingPlayhead = false;\r\n}\r\n\r\nfunction setSynthVolume(): void {\r\n\tconst volume: number = +volumeSlider.value;\r\n\tsynth.volume = Math.min(1.0, Math.pow(volume / 50.0, 0.5)) * Math.pow(2.0, (volume - 75.0) / 25.0);\r\n}\r\n\r\nfunction renderPlayhead(): void {\r\n\tif (synth.song != null) {\r\n\t\tlet pos: number = synth.playhead / synth.song.barCount;\r\n\t\tplayhead.style.left = (timelineWidth * pos) + \"px\";\r\n\r\n\t\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\t\tvisualizationContainer.scrollLeft = pos * (timelineWidth - boundingRect.width);\r\n\t}\r\n}\r\n\r\nfunction renderTimeline(): void {\r\n\ttimeline.innerHTML = \"\";\r\n\tif (synth.song == null) return;\r\n\r\n\tconst boundingRect: ClientRect = visualizationContainer.getBoundingClientRect();\r\n\r\n\tlet timelineHeight: number;\r\n\tlet windowOctaves: number;\r\n\tlet windowPitchCount: number;\r\n\r\n\tif (zoomEnabled) {\r\n\t\ttimelineHeight = boundingRect.height;\r\n\t\twindowOctaves = Math.max(3, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * 2))));\r\n\t\twindowPitchCount = windowOctaves * 12 + 1;\r\n\t\tconst semitoneHeight: number = (timelineHeight - 1) / windowPitchCount;\r\n\t\tconst targetBeatWidth: number = Math.max(8, semitoneHeight * 4);\r\n\t\ttimelineWidth = Math.max(boundingRect.width, targetBeatWidth * synth.song.barCount * synth.song.beatsPerBar);\r\n\t} else {\r\n\t\ttimelineWidth = boundingRect.width;\r\n\t\tconst targetSemitoneHeight: number = Math.max(1, timelineWidth / (synth.song.barCount * synth.song.beatsPerBar) / 6.0);\r\n\t\ttimelineHeight = Math.min(boundingRect.height, targetSemitoneHeight * (Config.maxPitch + 1) + 1);\r\n\t\twindowOctaves = Math.max(3, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * targetSemitoneHeight))));\r\n\t\twindowPitchCount = windowOctaves * 12 + 1;\r\n\t}\r\n\r\n\ttimelineContainer.style.width = timelineWidth + \"px\";\r\n\ttimelineContainer.style.height = timelineHeight + \"px\";\r\n\ttimeline.style.width = timelineWidth + \"px\";\r\n\ttimeline.style.height = timelineHeight + \"px\";\r\n\r\n\tconst barWidth: number = timelineWidth / synth.song.barCount;\r\n\tconst partWidth: number = barWidth / (synth.song.beatsPerBar * Config.partsPerBeat);\r\n\r\n\tconst wavePitchHeight: number = (timelineHeight - 1) / windowPitchCount;\r\n\tconst drumPitchHeight: number = (timelineHeight - 1) / Config.drumCount;\r\n\r\n\tfor (let bar: number = 0; bar < synth.song.barCount + 1; bar++) {\r\n\t\tconst color: string = (bar == synth.song.loopStart || bar == synth.song.loopStart + synth.song.loopLength) ? ColorConfig.loopAccent : ColorConfig.uiWidgetBackground;\r\n\t\ttimeline.appendChild(rect({ x: bar * barWidth - 1, y: 0, width: 2, height: timelineHeight, fill: color }));\r\n\t}\r\n\r\n\tfor (let octave: number = 0; octave <= windowOctaves; octave++) {\r\n\t\ttimeline.appendChild(rect({ x: 0, y: octave * 12 * wavePitchHeight, width: timelineWidth, height: wavePitchHeight + 1, fill: ColorConfig.tonic, opacity: 0.75 }));\r\n\t}\r\n\r\n\tfor (let channel: number = synth.song.channels.length - 1 - synth.song.modChannelCount; channel >= 0; channel--) {\r\n\r\n\t\tconst isNoise: boolean = synth.song.getChannelIsNoise(channel);\r\n\t\tconst pitchHeight: number = isNoise ? drumPitchHeight : wavePitchHeight;\r\n\r\n\t\tconst configuredOctaveScroll: number = synth.song.channels[channel].octave;\r\n\t\tconst octavesToMove: number = (windowOctaves - 3) / 2;\r\n\t\tconst newScrollableOctaves: number = Config.pitchOctaves - windowOctaves;\r\n\t\tconst oldCenter: number = 5 / 2;\r\n\t\tconst newCenter: number = newScrollableOctaves / 2;\r\n\t\tlet distanceFromCenter: number = configuredOctaveScroll - oldCenter;\r\n\t\tif (Math.abs(distanceFromCenter) <= octavesToMove) {\r\n\t\t\tdistanceFromCenter = 0;\r\n\t\t} else if (distanceFromCenter < 0) {\r\n\t\t\tdistanceFromCenter += octavesToMove;\r\n\t\t} else {\r\n\t\t\tdistanceFromCenter -= octavesToMove;\r\n\t\t}\r\n\t\tconst newOctaveScroll = Math.max(0, Math.min(newScrollableOctaves, Math.round(newCenter + distanceFromCenter)));\r\n\r\n\t\tconst offsetY: number = newOctaveScroll * pitchHeight * 12 + timelineHeight - pitchHeight * 0.5 - 0.5;\r\n\r\n\t\tfor (let bar: number = 0; bar < synth.song.barCount; bar++) {\r\n\t\t\tconst pattern: Pattern | null = synth.song.getPattern(channel, bar);\r\n\t\t\tif (pattern == null) continue;\r\n\t\t\tconst offsetX: number = bar * barWidth;\r\n\r\n\t\t\tfor (let i: number = 0; i < pattern.notes.length; i++) {\r\n\t\t\t\tconst note: Note = pattern.notes[i];\r\n\r\n\t\t\t\tfor (const pitch of note.pitches) {\r\n\t\t\t\t\tconst d: string = drawNote(pitch, note.start, note.pins, (pitchHeight + 1) / 2, offsetX, offsetY, partWidth, pitchHeight);\r\n\t\t\t\t\tconst noteElement: SVGPathElement = path({ d: d, fill: ColorConfig.getChannelColor(synth.song, channel).primaryChannel });\r\n\t\t\t\t\tif (isNoise) noteElement.style.opacity = String(0.6);\r\n\t\t\t\t\ttimeline.appendChild(noteElement);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\trenderPlayhead();\r\n}\r\n\r\nfunction drawNote(pitch: number, start: number, pins: NotePin[], radius: number, offsetX: number, offsetY: number, partWidth: number, pitchHeight: number): string {\r\n\tlet d: string = `M ${offsetX + partWidth * (start + pins[0].time)} ${offsetY - pitch * pitchHeight + radius * (pins[0].volume / 6.0)} `;\r\n\tfor (let i: number = 0; i < pins.length; i++) {\r\n\t\tconst pin: NotePin = pins[i];\r\n\t\tconst x: number = offsetX + partWidth * (start + pin.time);\r\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\r\n\t\tconst expression: number = pin.volume / 6.0;\r\n\t\td += `L ${x} ${y - radius * expression} `;\r\n\t}\r\n\tfor (let i: number = pins.length - 1; i >= 0; i--) {\r\n\t\tconst pin: NotePin = pins[i];\r\n\t\tconst x: number = offsetX + partWidth * (start + pin.time);\r\n\t\tconst y: number = offsetY - pitchHeight * (pitch + pin.interval);\r\n\t\tconst expression: number = pin.volume / 6.0;\r\n\t\td += `L ${x} ${y + radius * expression} `;\r\n\t}\r\n\treturn d;\r\n}\r\n\r\nfunction renderPlayButton(): void {\r\n\tif (synth.playing) {\r\n\t\tplayButton.classList.remove(\"playButton\");\r\n\t\tplayButton.classList.add(\"pauseButton\");\r\n\t\tplayButton.title = \"Pause (Space)\";\r\n\t\tplayButton.innerText = \"Pause\";\r\n\t} else {\r\n\t\tplayButton.classList.remove(\"pauseButton\");\r\n\t\tplayButton.classList.add(\"playButton\");\r\n\t\tplayButton.title = \"Play (Space)\";\r\n\t\tplayButton.innerText = \"Play\";\r\n\t}\r\n\tpauseButtonDisplayed = synth.playing;\r\n}\r\n\r\nfunction renderLoopIcon(): void {\r\n\tloopIcon.setAttribute(\"fill\", (synth.loopRepeatCount == -1) ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground);\r\n}\r\n\r\nfunction renderZoomIcon(): void {\r\n\tzoomIcon.style.color = zoomEnabled ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground;\r\n}\r\n\r\nfunction onKeyPressed(event: KeyboardEvent): void {\r\n\tswitch (event.keyCode) {\r\n\t\tcase 32: // space\r\n\t\t\tonTogglePlay();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 219: // left brace\r\n\t\t\tsynth.prevBar();\r\n\t\t\trenderPlayhead();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t\tcase 221: // right brace\r\n\t\t\tsynth.nextBar();\r\n\t\t\trenderPlayhead();\r\n\t\t\tevent.preventDefault();\r\n\t\t\tbreak;\r\n\t}\r\n}\r\n\r\nfunction onCopyClicked(): void {\r\n\t// Set as any to allow compilation without clipboard types (since, uh, I didn't write this bit and don't know the proper types library) -jummbus\r\n\tlet nav: any;\r\n\tnav = navigator;\r\n\r\n\tif (nav.clipboard && nav.clipboard.writeText) {\r\n\t\tnav.clipboard.writeText(location.href).catch(() => {\r\n\t\t\twindow.prompt(\"Copy to clipboard:\", location.href);\r\n\t\t});\r\n\t\treturn;\r\n\t}\r\n\tconst textField: HTMLTextAreaElement = document.createElement(\"textarea\");\r\n\ttextField.innerText = location.href;\r\n\tdocument.body.appendChild(textField);\r\n\ttextField.select();\r\n\tconst succeeded: boolean = document.execCommand(\"copy\");\r\n\ttextField.remove();\r\n\tif (!succeeded) window.prompt(\"Copy this:\", location.href);\r\n}\r\n\r\nfunction onShareClicked(): void {\r\n\t(<any>navigator).share({ url: location.href });\r\n}\r\n\r\nif (top !== self) {\r\n\t// In an iframe.\r\n\tcopyLink.style.display = \"none\";\r\n\tshareLink.style.display = \"none\";\r\n} else {\r\n\t// Fullscreen.\r\n\tfullscreenLink.style.display = \"none\";\r\n\tif (!(\"share\" in navigator)) shareLink.style.display = \"none\";\r\n}\r\n\r\nif (localStorage.getItem(\"volume\") != null) {\r\n\tvolumeSlider.value = localStorage.getItem(\"volume\")!;\r\n}\r\nsetSynthVolume();\r\n\r\nwindow.addEventListener(\"resize\", onWindowResize);\r\nwindow.addEventListener(\"keydown\", onKeyPressed);\r\n\r\ntimeline.addEventListener(\"mousedown\", onTimelineMouseDown);\r\nwindow.addEventListener(\"mousemove\", onTimelineMouseMove);\r\nwindow.addEventListener(\"mouseup\", onTimelineCursorUp);\r\ntimeline.addEventListener(\"touchstart\", onTimelineTouchDown);\r\ntimeline.addEventListener(\"touchmove\", onTimelineTouchMove);\r\ntimeline.addEventListener(\"touchend\", onTimelineCursorUp);\r\ntimeline.addEventListener(\"touchcancel\", onTimelineCursorUp);\r\n\r\nplayButton.addEventListener(\"click\", onTogglePlay);\r\nloopButton.addEventListener(\"click\", onToggleLoop);\r\nvolumeSlider.addEventListener(\"input\", onVolumeChange);\r\nzoomButton.addEventListener(\"click\", onToggleZoom);\r\ncopyLink.addEventListener(\"click\", onCopyClicked);\r\nshareLink.addEventListener(\"click\", onShareClicked);\r\nwindow.addEventListener(\"hashchange\", hashUpdatedExternally);\r\n\r\nhashUpdatedExternally();\r\nrenderLoopIcon();\r\nrenderZoomIcon();\r\nrenderPlayButton();\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, NotePin, Note, Pattern, Instrument, Channel, Synth };\r\n//}\r\n"]}