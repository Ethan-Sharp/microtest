{"version":3,"sources":["../synth/SynthConfig.ts","../editor/EditorConfig.ts","../synth/FFT.ts","../synth/Deque.ts","../synth/synth.ts"],"names":["Config","centerWave","wave","sum","i","length","average","cumulative","wavePrev","push","Float64Array","centerAndNormalizeWave","magn","Math","abs","magnAvg","getDrumWave","index","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","samples","Float32Array","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","Error","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","pow","highIndex","min","retroWave","combinedAmplitude","lerped","log","LN2","amplitude","spectrumMax","radians","PI","cos","sin","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","dictionary","value","name","result","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","reverbRange","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentsPerChannelMin","instrumentsPerChannelMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipWaves","volume","pitchFilterMult","isSoft","filterCutoffMaxHz","filterCutoffMinHz","filterMax","filterMaxResonance","filterCutoffRange","filterResonanceRange","transitions","isSeamless","attackSeconds","releases","releaseTicks","slides","slideTicks","vibratos","type","delayParts","vibratoTypes","periodsSeconds","period","arpSpeedScale","intervals","spread","offset","sign","effectsNames","volumeRange","volumeLogScale","panCenter","panMax","detuneMin","detuneMax","songDetuneMin","songDetuneMax","chords","harmonizes","customInterval","arpeggiates","isCustomInterval","strumParts","maxChordSize","operatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","feedbacks","indices","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","harmonicsControlPoints","harmonicsRendered","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthRange","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","modCount","pitchOctaves","maxScrollableOctaves","maxPitch","maximumTonesPerChannel","sineWaveLength","sineWaveMask","sineWave","generateSineWave","barEditorHeight","test","navigator","userAgent","EditorConfig","[object Object]","presetValue","categoryIndex","presetIndex","presetCategories","presets","program","category","preset","generalMidi","midiProgram","presetName","factor","countBits","n","isPowerOf2","round","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndex","startIndexA","midIndexA","startIndexB","midIndexB","stopIndex","realStartA","imagStartB","c","s","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","bitCount","finalShift","j","temp","reverseIndexBits","version","versionDisplayName","customType","settings","transition","effects","chord","filterCutoffHz","filterResonance","filterEnvelope","interval","vibrato","isNoise","algorithm","feedbackType","feedbackAmplitude","feedbackEnvelope","operators","frequency","envelope","customChipWave","harmonics","midiSubharmonicOctaves","pulseWidth","pulseEnvelope","spectrum","drums","Deque","this","_capacity","_buffer","undefined","_mask","_offset","_count","element","_expandCapacity","set","get","popFront","popBack","oldBuffer","Array","size","base64IntToCharCode","base64CharCodeToInt","BitFieldReader","source","_bits","_readIndex","charCodeAt","minValue","minBits","numBits","readLongTail","read","BitFieldWriter","_index","writeLongTail","write","other","buffer","ceil","makeNotePin","time","clamp","max","val","validateRange","Note","pitch","start","end","fadeout","pitches","pins","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestVolume","pin","newNote","concat","Pattern","notes","instrument","note","clone","Operator","reset","SpectrumWave","isNoiseChannel","_wave","_waveIsReady","isHarmonic","lowestOctave","waveLength","highestOctave","falloffRatio","pitchTweak","controlPointToOctave","point","floor","value1","value2","octave1","octave2","HarmonicsWave","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","Instrument","isModChannel","chipWave","chipNoise","filterCutoff","vibratoDepth","vibratoSpeed","vibratoDelay","vibratoType","pan","panDelay","arpeggioSpeed","fastTwoNoteArp","tieNoteTransition","clicklessTransition","detune","LFOtime","nextLFOtime","arpTime","customChipWaveIntegral","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modChannels","modStatuses","modInstruments","modSettings","mod","ModStatus","msNone","ModSetting","mstNone","spectrumWave","instrumentObject","getChord","getFilterCutoffOctaves","getFilterEnvelope","getDrumsetEnvelope","operatorArray","operator","useSlowerRhythm","indexOf","setTypeAndReset","oldTransitionNames","binary","sudden","smooth","transitionObject","findIndex","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","sustain sharp","sustain medium","sustain soft","decay sharp","legacyFilter","legacyEffectNames","drum","legacyWaveNames","triangle","square","pulse wide","pulse narrow","sawtooth","double saw","double pulse","spiky","plateau","legacyChorusNames","fifths","octaves","feedback","legacyEnvelopeNames","pluck 1","pluck 2","pluck 3","operatorObject","freq","frequencyFromPitch","drumsetIndexReferenceDelta","getCustomWave","_drumsetIndexToSpectrumOctave","Channel","octave","instruments","patterns","bars","muted","Song","string","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","mstMaxVols","Map","mstSongVolume","mstTempo","mstReverb","mstNextBar","mstInsVolume","mstPan","mstFilterCut","mstFilterPeak","mstFMSlider1","mstFMSlider2","mstFMSlider3","mstFMSlider4","mstFMFeedback","mstPulseWidth","mstDetune","mstVibratoDepth","mstSongDetune","mstVibratoSpeed","mstVibratoDelay","mstArpeggioSpeed","mstPanDelay","mstResetArpeggio","mstMaxValue","mstNewNoteVols","getNewNoteVolume","isMod","modChannel","modInstrument","cap","realToModValue","tempo","getVolumeCap","getVolumeCapForSetting","modSetting","fromBase64String","initToDefault","setting","pitchChannelCount","noiseChannelCount","modChannelCount","channel","andResetChannels","scale","key","loopStart","loopLength","reverb","beatsPerBar","barCount","patternsPerChannel","rhythm","instrumentsPerChannel","title","document","channelIndex","getChannelCount","pattern","bar","bits","_variant","_latestJummBoxVersion","encodedSongTitle","encodeURIComponent","encodedChannelName","o","spectrumBits","encodeBase64","harmonicsBits","neededBits","shapeBits","neededInstrumentBits","getChannelIsNoise","getChannelIsMod","instrumentIndex","modStatus","msForPitch","msForNoise","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","writePartDuration","clear","writePinCount","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","apply","shapeIndex","splice","unshift","pop","allPitches","pitchIndex","pitchIter","writePitchInterval","stringLength","lengthBase64","digits","prototype","maxApplyArgs","slice","compressed","charIndex","fromJsonObject","JSON","parse","substring","variant","_latestBeepboxVersion","_oldestBeepboxVersion","_oldestJummBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","command","instrumentChannelIterator","instrumentIndexIterator","toSetOctaves","useSlowerArpSpeed","songNameLength","decodeURIComponent","window","localStorage","getItem","instrumentType","legacyWaves","legacyEffects","legacyEnvelopes","effect","originalValue","nextValue","channelNameLength","byteCount","markCustomWaveDirty","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","newPattern","newNotes","useOldShape","shape","pinObj","pinCount","readPinCount","initialVolume","bendCount","pitchBend","readLegacyPartDuration","readPartDuration","readPitchInterval","intervalIter","shift","isBackwards","restLength","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","toJsonObject","patternArray","noteArray","volumeCap","pointArray","useVol","tick","forMod","points","sequenceArray","l","octaveScrollBar","sequence","format","_format","introBars","loopBars","ticksPerBeat","beatsPerMinute","jsonObject","oldScaleNames","romani :)","romani :(","enigma","scaleName","letter","charAt","toUpperCase","symbol","toLowerCase","C","D","E","F","G","A","B","#","♯","b","♭","importedPartsPerBeat","maxInstruments","maxPatterns","maxBars","channelObject","newPitchChannels","newNoiseChannels","newModChannels","patternObject","maxNoteCount","noteObject","k","startInterval","pointObject","lowestPitch","highestPitch","patternIndex","getPattern","Tone","chordSize","drumsetPitch","prevNote","nextNote","prevNotePitchIndex","nextNotePitchIndex","active","noteStart","noteEnd","noteLengthTicks","ticksSinceReleased","liveInputSamplesHeld","lastInterval","lastVolume","stereoVolume1","stereoVolume2","stereoOffset","stereoDelay","sample","phases","phaseDeltas","volumeStarts","volumeDeltas","volumeStart","volumeDelta","phaseDeltaScale","pulseWidthDelta","filter","filterScale","filterSample0","filterSample1","vibratoScale","intervalMult","intervalVolumeMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","Synth","song","samplesPerSecond","liveInputDuration","liveInputStarted","liveInputPitches","liveInputChannel","loopRepeatCount","wantToSkip","playheadInternal","beat","part","tickSampleCountdown","isPlayingSong","liveInputEndTime","tonePool","activeTones","tyingOver","activeModTones","releasedTones","liveInputTones","limit","stereoBufferIndex","samplesForNone","samplesForReverb","samplesForChorus","samplesForChorusReverb","chorusDelayLine","chorusDelayPos","chorusPhase","reverbDelayLine","reverbDelayPos","reverbFeedback0","reverbFeedback1","reverbFeedback2","reverbFeedback3","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","getChannelData","outputDataR","performance","now","synthesize","deactivateAudio","setSong","getInstrumentSynthFunction","warmUp","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","currentPart","currentBar","instrumentIdx","getPatternInstrument","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","msForSong","setModValue","playing","playhead","remainder","samplesPerTick","getSamplesPerTick","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","modValueToReal","ended","totalSamples","foundMod","find","sort","a","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getSamplesPerBar","getTotalBars","useLoopCount","volumeEnd","nextVal","channelAdjust","forSong","isModActive","AudioContext","webkitAudioContext","sampleRate","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","close","activateAudio","warmUpSynthesizer","computeLatestModValues","snapToBar","freeAllTones","oldBar","outputBufferLength","playSong","channelCount","idx","bufferIndex","pause","stereoBufferLength","chorusAngle","chorusRange","chorusOffset0","chorusOffset1","chorusOffset2","chorusOffset3","chorusOffset4","chorusOffset5","useReverb","getModValue","samplesLeftInBuffer","runLength","determineCurrentActiveTones","count","tone","playTone","skipBar","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","partTimeStart","partTimeEnd","useVibratoSpeed","determineLiveInputTones","getTransition","freeReleasedTone","shouldFadeOutFast","chorusTap0Index","chorusTap1Index","chorusTap2Index","chorusTap3Index","chorusTap4Index","chorusTap5Index","chorusTap0Delta","chorusTap1Delta","chorusTap2Delta","chorusTap3Delta","chorusTap4Delta","chorusTap5Delta","runEnd","bufferIndexL","bufferIndexR","sampleForNoneL","sampleForNoneR","sampleForReverbL","sampleForReverbR","sampleForChorusL","sampleForChorusR","sampleForChorusReverbL","sampleForChorusReverbR","combinedChorusL","combinedChorusR","chorusTap0Ratio","chorusTap1Ratio","chorusTap2Ratio","chorusTap3Ratio","chorusTap4Ratio","chorusTap5Ratio","chorusTap0A","chorusTap0B","chorusTap1A","chorusTap1B","chorusTap2A","chorusTap2B","chorusTap3A","chorusTap3B","chorusTap4A","chorusTap4B","chorusTap5A","chorusSampleL","chorusSampleR","reverbDelayPos1","reverbDelayPos2","reverbDelayPos3","reverbSample0","reverbSample1","reverbSample2","reverbSample3","reverbTemp0","reverbTemp1","reverbTemp2","reverbTemp3","sampleL","sampleR","absL","absR","limitRange","limitTarget","limitedVolume","useArpeggioSpeed","Number","isInteger","atEnd","carryOver","toneCount","targetBar","nextPattern","currNote","currVolume","p","releaseTone","freeTone","remove","resetEffects","epsilon","pushBack","pushFront","toneIndex","toneList","newTone","modChannelIdx","prevNotes","nextNotes","fillCount","syncTones","peakBack","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","synthBuffer","computeTone","synthesizer","beats","customVolume","attack","synth","chordVolume","computeChordVolume","intervalScale","secondsPerPart","beatsPerPart","toneWasActive","treatAsSeamless","startPan","endPan","startPanDelay","endPanDelay","useStartPan","useEndPan","maxDelayStart","maxDelayEnd","delayEnd","stereoVolumeLEnd","stereoVolumeREnd","volumeReferencePitch","baseVolume","pitchDamping","resetPhases","partsSinceStart","intervalStart","intervalEnd","transitionVolumeStart","transitionVolumeEnd","chordVolumeStart","chordVolumeEnd","decayTimeStart","decayTimeEnd","ticksSoFar","startTicksSinceReleased","endTicksSinceReleased","startTick","endTick","toneTransition","expressionToVolumeMult","heldTicksStart","heldTicksEnd","heldPartsStart","heldPartsEnd","partsPerBar","endPinIndex","startPin","endPin","noteStartTick","pinStart","pinEnd","tickTimeStart","tickTimeEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","customVolumeTickStart","customVolumeTickEnd","transitionVolumeTickStart","transitionVolumeTickEnd","chordVolumeTickStart","chordVolumeTickEnd","intervalTickStart","intervalTickEnd","decayTimeTickStart","decayTimeTickEnd","maximumSlideTicks","slideRatioStartTick","slideRatioEndTick","intervalDiff","volumeDiff","decayTimeDiff","chordSizeDiff","sampleTime","lfoEffectStart","getLFOAmplitude","lfoEffectEnd","partsStart","partsEnd","useVibratoStart","useVibratoEnd","activeVibratoDelayMods","vibratoDelayStart","vibratoDelayEnd","MAX_VALUE","instrumentVolumeMult","instrumentVolumeToVolumeMult","pickMainInterval","cutoffOctavesModStart","cutoffOctavesModEnd","filterCutModStart","filterCutModEnd","filterCutoffHzStart","filterCutoffHzEnd","filterBaseStart","filterBaseEnd","filterMin","computeEnvelope","endFilter","filterVolumeStart","filterVolumeEnd","getFilterResonance","useFilterResonanceStart","useFilterResonanceEnd","filterResonanceEnd","sineVolumeBoostStart","sineVolumeBoostEnd","totalCarrierVolumeStart","totalCarrierVolumeEnd","arpeggioInterval","detuneStart","detuneEnd","associatedCarrierIndex","freqMult","startFreq","amplitudeStart","amplitudeEnd","amplitudeCurveStart","operatorAmplitudeCurve","amplitudeCurveEnd","startVal","endVal","endPitch","pitchVolumeStart","pitchVolumeEnd","operatorEnvelope","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","volumeMult","intervalOffset","settingsVolumeMultStart","settingsVolumeMultEnd","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","replace","join","operatorLine","operatorSourceTemplate","modulators","modulatorNumber","feedbackIndices","Function","chipSynth","harmonicsSynth","pulseWidthSynth","noiseSynth","spectrumSynth","drumsetSynth","modSynth","data","volumeScale","intervalA","intervalB","intervalSign","deltaRatio","phaseDeltaA","phaseDeltaB","phaseA","phaseB","filter1","filter2","filterScale1","filterScale2","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","prevWaveIntegralA","prevWaveIntegralB","delays","stereoVolumeL","stereoVolumeR","nextWaveIntegralA","nextWaveIntegralB","waveA","waveB","output","phaseDelta","phase","sawPhaseA","sawPhaseB","pulseWave","t","pitchRelativefilter","findRandomZeroCrossing","phaseInt","waveSample","phaseRatio","getDrumsetWave","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","slope","instrumentVolume","expression","getBeatsPerMinute","beatsPerSecond","partsPerSecond","tickPerSecond","split"],"mappings":"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GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEhB,eAAkB,UAAWgB,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,KAAO,CAAEh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","sourcesContent":["/*!\r\nCopyright (C) 2020 John Nesky\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of \r\nthis software and associated documentation files (the \"Software\"), to deal in \r\nthe Software without restriction, including without limitation the rights to \r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \r\nof the Software, and to permit persons to whom the Software is furnished to do \r\nso, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all \r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \r\nSOFTWARE.\r\n*/\r\n\r\n//namespace beepbox {\r\nexport interface Dictionary<T> {\r\n\t[K: string]: T;\r\n}\r\n\r\nexport interface DictionaryArray<T> extends ReadonlyArray<T> {\r\n\tdictionary: Dictionary<T>;\r\n}\r\n\r\nexport const enum EnvelopeType {\r\n\tcustom,\r\n\tsteady,\r\n\tpunch,\r\n\tflare,\r\n\ttwang,\r\n\tswell,\r\n\ttremolo,\r\n\ttremolo2,\r\n\tdecay,\r\n}\r\n\r\nexport const enum InstrumentType {\r\n\tchip = 0,\r\n\tfm = 1,\r\n\tnoise = 2,\r\n\tspectrum = 3,\r\n\tdrumset = 4,\r\n\tharmonics = 5,\r\n\tpwm = 6,\r\n\tcustomChipWave = 7,\r\n\tmod = 8,\r\n\tlength,\r\n}\r\n\r\nexport interface BeepBoxOption {\r\n\treadonly index: number;\r\n\treadonly name: string;\r\n}\r\n\r\nexport interface Scale extends BeepBoxOption {\r\n\treadonly flags: ReadonlyArray<boolean>;\r\n\treadonly realName: string;\r\n}\r\n\r\nexport interface Key extends BeepBoxOption {\r\n\treadonly isWhiteKey: boolean;\r\n\treadonly basePitch: number;\r\n}\r\n\r\nexport interface Rhythm extends BeepBoxOption {\r\n\treadonly stepsPerBeat: number;\r\n\t//readonly ticksPerArpeggio: number;\r\n\t//readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>>;\r\n\treadonly roundUpThresholds: number[] | null;\r\n}\r\n\r\nexport interface ChipWave extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly samples: Float64Array;\r\n}\r\n\r\nexport interface ChipNoise extends BeepBoxOption {\r\n\treadonly volume: number;\r\n\treadonly basePitch: number;\r\n\treadonly pitchFilterMult: number;\r\n\treadonly isSoft: boolean;\r\n\tsamples: Float32Array | null;\r\n}\r\n\r\nexport interface Transition extends BeepBoxOption {\r\n\treadonly isSeamless: boolean;\r\n\treadonly attackSeconds: number;\r\n\treadonly releases: boolean;\r\n\treadonly releaseTicks: number;\r\n\treadonly slides: boolean;\r\n\treadonly slideTicks: number;\r\n}\r\n\r\nexport interface Vibrato extends BeepBoxOption {\r\n\treadonly amplitude: number;\r\n\treadonly type: number;\r\n\treadonly delayParts: number;\r\n}\r\n\r\nexport interface VibratoType extends BeepBoxOption {\r\n\treadonly periodsSeconds: number[];\r\n\treadonly period: number;\r\n}\r\n\r\nexport interface Interval extends BeepBoxOption {\r\n\treadonly spread: number;\r\n\treadonly offset: number;\r\n\treadonly volume: number;\r\n\treadonly sign: number;\r\n}\r\n\r\nexport interface Chord extends BeepBoxOption {\r\n\treadonly harmonizes: boolean;\r\n\treadonly customInterval: boolean;\r\n\treadonly arpeggiates: boolean;\r\n\treadonly isCustomInterval: boolean;\r\n\treadonly strumParts: number;\r\n}\r\n\r\nexport interface Algorithm extends BeepBoxOption {\r\n\treadonly carrierCount: number;\r\n\treadonly associatedCarrier: ReadonlyArray<number>;\r\n\treadonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport interface OperatorFrequency extends BeepBoxOption {\r\n\treadonly mult: number;\r\n\treadonly hzOffset: number;\r\n\treadonly amplitudeSign: number;\r\n}\r\n\r\nexport interface Envelope extends BeepBoxOption {\r\n\treadonly type: EnvelopeType;\r\n\treadonly speed: number;\r\n}\r\n\r\nexport interface Feedback extends BeepBoxOption {\r\n\treadonly indices: ReadonlyArray<ReadonlyArray<number>>;\r\n}\r\n\r\nexport class Config {\r\n\t// Params for post-processing compressor\r\n\tpublic static thresholdVal: number = -10;\r\n\tpublic static kneeVal: number = 40;\r\n\tpublic static ratioVal: number = 12;\r\n\tpublic static attackVal: number = 0;\r\n\tpublic static releaseVal: number = 0.25;\r\n\r\n\tpublic static readonly scales: DictionaryArray<Scale> = toNameMap([\r\n\r\n\t\t//   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\r\n\t\t{ name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\r\n\t\t{ name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\r\n\t\t{ name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\r\n\t\t{ name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\r\n\t\t{ name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\r\n\t\t{ name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\r\n\t\t{ name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\r\n\t\t{ name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\r\n\t\t{ name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\r\n\t\t{ name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\r\n\t\t{ name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\r\n\t\t{ name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\r\n\t\t{ name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\r\n\t\t{ name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\r\n\t\t{ name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\r\n\t\t{ name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\r\n\t\t{ name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\r\n\t\t{ name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\r\n\t\t{ name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\r\n\t\t{ name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\r\n\r\n\r\n\t]);\r\n\tpublic static readonly keys: DictionaryArray<Key> = toNameMap([\r\n\t\t{ name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\r\n\t\t{ name: \"C♯\", isWhiteKey: false, basePitch: 13 },\r\n\t\t{ name: \"D\", isWhiteKey: true, basePitch: 14 },\r\n\t\t{ name: \"D♯\", isWhiteKey: false, basePitch: 15 },\r\n\t\t{ name: \"E\", isWhiteKey: true, basePitch: 16 },\r\n\t\t{ name: \"F\", isWhiteKey: true, basePitch: 17 },\r\n\t\t{ name: \"F♯\", isWhiteKey: false, basePitch: 18 },\r\n\t\t{ name: \"G\", isWhiteKey: true, basePitch: 19 },\r\n\t\t{ name: \"G♯\", isWhiteKey: false, basePitch: 20 },\r\n\t\t{ name: \"A\", isWhiteKey: true, basePitch: 21 },\r\n\t\t{ name: \"A♯\", isWhiteKey: false, basePitch: 22 },\r\n\t\t{ name: \"B\", isWhiteKey: true, basePitch: 23 },\r\n\t]);\r\n\tpublic static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\r\n\tpublic static readonly tempoMin: number = 30;\r\n\tpublic static readonly tempoMax: number = 320;\r\n\tpublic static readonly reverbRange: number = 32;\r\n\tpublic static readonly beatsPerBarMin: number = 3;\r\n\tpublic static readonly beatsPerBarMax: number = 16;\r\n\tpublic static readonly barCountMin: number = 1;\r\n\tpublic static readonly barCountMax: number = 256;\r\n\tpublic static readonly instrumentsPerChannelMin: number = 1;\r\n\tpublic static readonly instrumentsPerChannelMax: number = 10;\r\n\tpublic static readonly partsPerBeat: number = 24;\r\n\tpublic static readonly ticksPerPart: number = 2;\r\n\tpublic static readonly ticksPerArpeggio: number = 3;\r\n\tpublic static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7] ];\r\n\tpublic static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\r\n\t\t{ name: \"÷3 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\r\n\t\t{ name: \"÷4 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\r\n\t\t{ name: \"÷6\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"÷8\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t\t{ name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\r\n\t]);\r\n\r\n\tpublic static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"custom chip\", \"mod\"];\r\n\tpublic static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, true];\r\n\tpublic static readonly chipWaves: DictionaryArray<ChipWave> = toNameMap([\r\n\t\t{ name: \"rounded\", volume: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\r\n\t\t{ name: \"triangle\", volume: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\r\n\t\t{ name: \"square\", volume: 0.5, samples: centerWave([1.0, -1.0]) },\r\n\t\t{ name: \"1/4 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"1/8 pulse\", volume: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"sawtooth\", volume: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\r\n\t\t{ name: \"double saw\", volume: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\r\n\t\t{ name: \"double pulse\", volume: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\r\n\t\t{ name: \"spiky\", volume: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\r\n\t\t{ name: \"sine\", volume: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\r\n\t\t{ name: \"flute\", volume: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\r\n\t\t{ name: \"harp\", volume: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\r\n\t\t{ name: \"sharp clarinet\", volume: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\r\n\t\t{ name: \"soft clarinet\", volume: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\r\n\t\t{ name: \"alto sax\", volume: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\r\n\t\t{ name: \"bassoon\", volume: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\r\n\t\t{ name: \"trumpet\", volume: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\r\n\t\t{ name: \"electric guitar\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\r\n\t\t{ name: \"organ\", volume: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\r\n\t\t{ name: \"pan flute\", volume: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\r\n\t\t{ name: \"glitch\", volume: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\r\n\t]);\r\n\t// Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\r\n\tpublic static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\r\n\t\t{ name: \"retro\", volume: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"white\", volume: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\r\n\t\t// The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\r\n\t\t{ name: \"clang\", volume: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"buzz\", volume: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"hollow\", volume: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\r\n\t\t{ name: \"shine\", volume: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"deep\", volume: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\r\n\t\t{ name: \"cutter\", volume: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t\t{ name: \"metallic\", volume: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\r\n\t]);\r\n\tpublic static readonly filterCutoffMaxHz: number = 8000; // This is carefully calculated to correspond to no change when filtering at 48000 samples per second.\r\n\tpublic static readonly filterCutoffMinHz: number = 1;\r\n\tpublic static readonly filterMax: number = 0.95;\r\n\tpublic static readonly filterMaxResonance: number = 0.95;\r\n\tpublic static readonly filterCutoffRange: number = 11;\r\n\tpublic static readonly filterResonanceRange: number = 8;\r\n\tpublic static readonly transitions: DictionaryArray<Transition> = toNameMap([\r\n\t\t{ name: \"seamless\", isSeamless: true, attackSeconds: 0.0, releases: false, releaseTicks: 1, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard\", isSeamless: false, attackSeconds: 0.0, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft\", isSeamless: false, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"slide\", isSeamless: true, attackSeconds: 0.025, releases: false, releaseTicks: 3, slides: true, slideTicks: 3 },\r\n\t\t{ name: \"cross fade\", isSeamless: false, attackSeconds: 0.04, releases: true, releaseTicks: 6, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"hard fade\", isSeamless: false, attackSeconds: 0.0, releases: true, releaseTicks: 48, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"medium fade\", isSeamless: false, attackSeconds: 0.0125, releases: true, releaseTicks: 72, slides: false, slideTicks: 3 },\r\n\t\t{ name: \"soft fade\", isSeamless: false, attackSeconds: 0.06, releases: true, releaseTicks: 96, slides: false, slideTicks: 6 },\r\n\t]);\r\n\tpublic static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\r\n\t\t{ name: \"none\", amplitude: 0.0, type: 0, delayParts: 0 },\r\n\t\t{ name: \"light\", amplitude: 0.15, type: 0, delayParts: 0 },\r\n\t\t{ name: \"delayed\", amplitude: 0.3, type: 0, delayParts: 18 },\r\n\t\t{ name: \"heavy\", amplitude: 0.45, type: 0, delayParts: 0 },\r\n\t\t{ name: \"shaky\", amplitude: 0.1, type: 1, delayParts: 0 },\r\n\t]);\r\n\tpublic static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\r\n\t\t{ name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\r\n\t\t{ name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\r\n\t]);\r\n\t// This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\r\n\t//                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\r\n\tpublic static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\r\n\tpublic static readonly intervals: DictionaryArray<Interval> = toNameMap([\r\n\t\t{ name: \"union\", spread: 0.0, offset: 0.0, volume: 0.7, sign: 1.0 },\r\n\t\t{ name: \"shimmer\", spread: 0.018, offset: 0.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"hum\", spread: 0.045, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"honky tonk\", spread: 0.09, offset: 0.0, volume: 1.0, sign: 1.0 },\r\n\t\t{ name: \"dissonant\", spread: 0.25, offset: 0.0, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"fifth\", spread: 3.5, offset: 3.5, volume: 0.9, sign: 1.0 },\r\n\t\t{ name: \"octave\", spread: 6.0, offset: 6.0, volume: 0.8, sign: 1.0 },\r\n\t\t{ name: \"bowed\", spread: 0.02, offset: 0.0, volume: 1.0, sign: -1.0 },\r\n\t\t{ name: \"piano\", spread: 0.01, offset: 0.0, volume: 1.0, sign: 0.7 },\r\n\t]);\r\n\tpublic static readonly effectsNames: ReadonlyArray<string> = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\r\n\tpublic static readonly volumeRange: number = 50;\r\n\t// Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\r\n\t// given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\r\n\tpublic static readonly volumeLogScale: number = 0.1428;\r\n\tpublic static readonly panCenter: number = 50;\r\n\tpublic static readonly panMax: number = Config.panCenter * 2;\r\n\tpublic static readonly detuneMin: number = -50;\r\n\tpublic static readonly detuneMax: number = 50;\r\n\tpublic static readonly songDetuneMin: number = -250;\r\n\tpublic static readonly songDetuneMax: number = 250;\r\n\tpublic static readonly chords: DictionaryArray<Chord> = toNameMap([\r\n\t\t{ name: \"harmony\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"strum\", harmonizes: true, customInterval: false, arpeggiates: false, isCustomInterval: false, strumParts: 1 },\r\n\t\t{ name: \"arpeggio\", harmonizes: false, customInterval: false, arpeggiates: true, isCustomInterval: false, strumParts: 0 },\r\n\t\t{ name: \"custom interval\", harmonizes: true, customInterval: true, arpeggiates: true, isCustomInterval: true, strumParts: 0 },\r\n\t]);\r\n\tpublic static readonly maxChordSize: number = 9; // Pandora's box...\r\n\tpublic static readonly operatorCount: number = 4;\r\n\tpublic static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\r\n\t\t{ name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\r\n\t\t{ name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\r\n\t\t{ name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\r\n\t\t{ name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\r\n\t\t{ name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\r\n\t\t{ name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\r\n\t\t{ name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\r\n\t\t{ name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\r\n\t\t{ name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\r\n\t\t{ name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\r\n\t\t{ name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\r\n\t\t{ name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\r\n\t]);\r\n\tpublic static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091];\r\n\tpublic static readonly operatorAmplitudeMax: number = 15;\r\n\tpublic static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\r\n\t\t{ name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\r\n\t\t{ name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\r\n\t\t{ name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t\t{ name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\r\n\t]);\r\n\tpublic static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\r\n\t\t{ name: \"custom\", type: EnvelopeType.custom, speed: 0.0 },\r\n\t\t{ name: \"steady\", type: EnvelopeType.steady, speed: 0.0 },\r\n\t\t{ name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\r\n\t\t{ name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\r\n\t\t{ name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\r\n\t\t{ name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\r\n\t\t{ name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\r\n\t\t{ name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\r\n\t\t{ name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\r\n\t\t{ name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\r\n\t\t{ name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\r\n\t\t{ name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\r\n\t\t{ name: \"tremolo1\", type: EnvelopeType.tremolo, speed: 4.0 },\r\n\t\t{ name: \"tremolo2\", type: EnvelopeType.tremolo, speed: 2.0 },\r\n\t\t{ name: \"tremolo3\", type: EnvelopeType.tremolo, speed: 1.0 },\r\n\t\t{ name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\r\n\t\t{ name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\r\n\t\t{ name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\r\n\t\t{ name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\r\n\t\t{ name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\r\n\t\t{ name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\r\n\t]);\r\n\tpublic static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\r\n\t\t{ name: \"1⟲\", indices: [[1], [], [], []] },\r\n\t\t{ name: \"2⟲\", indices: [[], [2], [], []] },\r\n\t\t{ name: \"3⟲\", indices: [[], [], [3], []] },\r\n\t\t{ name: \"4⟲\", indices: [[], [], [], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\r\n\t\t{ name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\r\n\t\t{ name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\r\n\t\t{ name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\r\n\t\t{ name: \"1→2\", indices: [[], [1], [], []] },\r\n\t\t{ name: \"1→3\", indices: [[], [], [1], []] },\r\n\t\t{ name: \"1→4\", indices: [[], [], [], [1]] },\r\n\t\t{ name: \"2→3\", indices: [[], [], [2], []] },\r\n\t\t{ name: \"2→4\", indices: [[], [], [], [2]] },\r\n\t\t{ name: \"3→4\", indices: [[], [], [], [3]] },\r\n\t\t{ name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\r\n\t\t{ name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\r\n\t\t{ name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\r\n\t]);\r\n\tpublic static readonly chipNoiseLength: number = 1 << 15; // 32768\r\n\tpublic static readonly spectrumBasePitch: number = 24;\r\n\tpublic static readonly spectrumControlPoints: number = 30;\r\n\tpublic static readonly spectrumControlPointsPerOctave: number = 7;\r\n\tpublic static readonly spectrumControlPointBits: number = 3;\r\n\tpublic static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\r\n\tpublic static readonly harmonicsControlPoints: number = 28;\r\n\tpublic static readonly harmonicsRendered: number = 64;\r\n\tpublic static readonly harmonicsControlPointBits: number = 3;\r\n\tpublic static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\r\n\tpublic static readonly harmonicsWavelength: number = 1 << 11; // 2048\r\n\tpublic static readonly pulseWidthRange: number = 50;\r\n\tpublic static readonly pitchChannelCountMin: number = 1;\r\n\tpublic static readonly pitchChannelCountMax: number = 40;\r\n\tpublic static readonly noiseChannelCountMin: number = 0;\r\n\tpublic static readonly noiseChannelCountMax: number = 8;\r\n\tpublic static readonly modChannelCountMin: number = 0;\r\n\tpublic static readonly modChannelCountMax: number = 8;\r\n\tpublic static readonly noiseInterval: number = 6;\r\n\tpublic static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\r\n\tpublic static readonly drumCount: number = 12;\r\n\tpublic static readonly modCount: number = 6;\r\n\tpublic static readonly pitchOctaves: number = 8;\r\n\tpublic static readonly maxScrollableOctaves: number = 5; // Largest number possible with any config setting\r\n\tpublic static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\r\n\tpublic static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\r\n\tpublic static readonly sineWaveLength: number = 1 << 8; // 256\r\n\tpublic static readonly sineWaveMask: number = Config.sineWaveLength - 1;\r\n\tpublic static readonly sineWave: Float64Array = generateSineWave();\r\n\r\n\t// Height of the small editor column for inserting/deleting rows, in pixels.\r\n\tpublic static readonly barEditorHeight: number = 10;\r\n\r\n}\r\n\r\nfunction centerWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = wave[i] - average;\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\nfunction centerAndNormalizeWave(wave: Array<number>): Float64Array {\r\n\tlet sum: number = 0.0;\r\n\tlet magn: number = 0.0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tsum += wave[i];\r\n\t\tmagn += Math.abs(wave[i]);\r\n\t}\r\n\tconst average: number = sum / wave.length;\r\n\tconst magnAvg: number = magn / wave.length;\r\n\r\n\t// Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n\tlet cumulative: number = 0;\r\n\tlet wavePrev: number = 0;\r\n\tfor (let i: number = 0; i < wave.length; i++) {\r\n\t\tcumulative += wavePrev;\r\n\t\twavePrev = (wave[i] - average) / (magnAvg);\r\n\t\twave[i] = cumulative;\r\n\t}\r\n\t// The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n\twave.push(0);\r\n\treturn new Float64Array(wave);\r\n}\r\n\r\n\r\n// The function arguments will be defined in FFT.ts, but I want\r\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\r\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\r\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\r\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\r\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null = null, scaleElementsByFactor: Function | null = null): Float32Array {\r\n\tlet wave: Float32Array | null = Config.chipNoises[index].samples;\r\n\tif (wave == null) {\r\n\t\twave = new Float32Array(Config.chipNoiseLength + 1);\r\n\t\tConfig.chipNoises[index].samples = wave;\r\n\r\n\t\tif (index == 0) {\r\n\t\t\t// The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 1 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 1) {\r\n\t\t\t// White noise is just random values for each sample.\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = Math.random() * 2.0 - 1.0;\r\n\t\t\t}\r\n\t\t} else if (index == 2) {\r\n\t\t\t// The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 2 << 14;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 3) {\r\n\t\t\t// The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\r\n\t\t\tlet drumBuffer: number = 1;\r\n\t\t\tfor (let i: number = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tlet newBuffer: number = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 4) {\r\n\t\t\t// \"hollow\" drums, designed in frequency space and then converted via FFT:\r\n\t\t\tdrawNoiseSpectrum(wave, 10, 11, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 11, 14, .6578, .6578, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 5) {\r\n\t\t\t// \"Shine\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 2.0 - 1.0;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 6) {\r\n\t\t\t// \"Deep\" drums from modbox!\r\n\t\t\tdrawNoiseSpectrum(wave, 1, 10, 1, 1, 0);\r\n\t\t\tdrawNoiseSpectrum(wave, 20, 14, -2, -2, 0);\r\n\t\t\tinverseRealFourierTransform!(wave, Config.chipNoiseLength);\r\n\t\t\tscaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\r\n\t\t} else if (index == 7) {\r\n\t\t\t// \"Cutter\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < Config.chipNoiseLength; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1);\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer += 15 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else if (index == 8) {\r\n\t\t\t// \"Metallic\" drums from modbox!\r\n\t\t\tvar drumBuffer = 1;\r\n\t\t\tfor (var i = 0; i < 32768; i++) {\r\n\t\t\t\twave[i] = (drumBuffer & 1) / 2.0 + 0.5;\r\n\t\t\t\tvar newBuffer = drumBuffer >> 1;\r\n\t\t\t\tif (((drumBuffer + newBuffer) & 1) == 1) {\r\n\t\t\t\t\tnewBuffer -= 10 << 2;\r\n\t\t\t\t}\r\n\t\t\t\tdrumBuffer = newBuffer;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(\"Unrecognized drum index: \" + index);\r\n\t\t}\r\n\r\n\t\twave[Config.chipNoiseLength] = wave[0];\r\n\t}\r\n\r\n\treturn wave;\r\n}\r\n\r\nexport function drawNoiseSpectrum(wave: Float32Array, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\r\n\tconst referenceOctave: number = 11;\r\n\tconst referenceIndex: number = 1 << referenceOctave;\r\n\tconst lowIndex: number = Math.pow(2, lowOctave) | 0;\r\n\tconst highIndex: number = Math.min(Config.chipNoiseLength >> 1, Math.pow(2, highOctave) | 0);\r\n\tconst retroWave: Float32Array = getDrumWave(0);\r\n\tlet combinedAmplitude: number = 0.0;\r\n\tfor (let i: number = lowIndex; i < highIndex; i++) {\r\n\r\n\t\tlet lerped: number = lowPower + (highPower - lowPower) * (Math.log(i) / Math.LN2 - lowOctave) / (highOctave - lowOctave);\r\n\t\t//let amplitude: number = Math.pow(2, lerped);\r\n\t\t//let amplitude: number = Math.pow((lerped + 5) / 7, 4);\r\n\t\tlet amplitude: number = Math.pow(2, (lerped - 1) * Config.spectrumMax + 1) * lerped;\r\n\r\n\t\tamplitude *= Math.pow(i / referenceIndex, overallSlope);\r\n\r\n\t\tcombinedAmplitude += amplitude;\r\n\r\n\t\t// Add two different sources of psuedo-randomness to the noise\r\n\t\t// (individually they aren't random enough) but in a deterministic\r\n\t\t// way so that live spectrum editing doesn't result in audible pops.\r\n\t\t// Multiple all the sine wave amplitudes by 1 or -1 based on the \r\n\t\t// LFSR retro wave (effectively random), and also rotate the phase\r\n\t\t// of each sine wave based on the golden angle to disrupt the symmetry.\r\n\t\tamplitude *= retroWave[i];\r\n\t\tconst radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\r\n\r\n\t\twave[i] = Math.cos(radians) * amplitude;\r\n\t\twave[Config.chipNoiseLength - i] = Math.sin(radians) * amplitude;\r\n\t}\r\n\r\n\treturn combinedAmplitude;\r\n}\r\n\r\nfunction generateSineWave(): Float64Array {\r\n\tconst wave: Float64Array = new Float64Array(Config.sineWaveLength + 1);\r\n\tfor (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\r\n\t\twave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\r\n\t}\r\n\treturn wave;\r\n}\r\n\r\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\r\n\tlet arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\r\n\tif (arpeggioPattern != null) {\r\n\t\tif (pitchCount == 2 && useFastTwoNoteArp == false) {\r\n\t\t\tarpeggioPattern = [0, 0, 1, 1];\r\n\t\t}\r\n\t\treturn arpeggioPattern[arpeggio % arpeggioPattern.length];\r\n\t} else {\r\n\t\treturn arpeggio % pitchCount;\r\n\t}\r\n}\r\n\r\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\r\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\r\n\tconst dictionary: Dictionary<T> = {};\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tconst value: any = array[i];\r\n\t\tvalue.index = i;\r\n\t\tdictionary[value.name] = <T>value;\r\n\t}\r\n\tconst result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\r\n\tresult.dictionary = dictionary;\r\n\treturn result;\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap } from \"../synth/SynthConfig\";\r\n\r\n//namespace beepbox {\r\nexport interface PresetCategory extends BeepBoxOption {\r\n\treadonly presets: DictionaryArray<Preset>;\r\n}\r\n\r\nexport interface Preset extends BeepBoxOption {\r\n\treadonly isNoise?: boolean;\r\n\treadonly isMod?: boolean;\r\n\treadonly generalMidi?: boolean;\r\n\treadonly midiProgram?: number;\r\n\treadonly midiSubharmonicOctaves?: number;\r\n\treadonly customType?: InstrumentType;\r\n\treadonly settings?: any;\r\n}\r\n\r\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\r\n\r\nexport function prettyNumber(value: number): string {\r\n\treturn value.toFixed(2).replace(/\\.?0*$/, \"\");\r\n}\r\n\r\nexport class EditorConfig {\r\n\tpublic static readonly version: string = \"2.3\"; // Not using patch versions in display right now, maybe someday.\r\n\tpublic static readonly versionDisplayName: string = \"JummBox \" + EditorConfig.version;\r\n\r\n\tpublic static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\r\n\t\t{\r\n\t\t\tname: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"chip wave\", customType: InstrumentType.chip },\r\n\t\t\t\t{ name: \"FM (expert)\", customType: InstrumentType.fm },\r\n\t\t\t\t{ name: \"basic noise\", customType: InstrumentType.noise },\r\n\t\t\t\t{ name: \"spectrum\", customType: InstrumentType.spectrum },\r\n\t\t\t\t{ name: \"drumset\", customType: InstrumentType.drumset },\r\n\t\t\t\t{ name: \"harmonics\", customType: InstrumentType.harmonics },\r\n\t\t\t\t{ name: \"pulse width\", customType: InstrumentType.pwm },\r\n\t\t\t\t{ name: \"custom chip\", customType: InstrumentType.customChipWave },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"transition\": \"seamless\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"triangle\", \"interval\": \"union\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"square\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\r\n\t\t\t\t{ name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\r\n\t\t\t\t{ name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\r\n\t\t\t\t{ name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"transition\": \"hard\", \"effects\": \"none\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\r\n\t\t\t\t{ name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\r\n\t\t\t\t{ name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": \"none\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57] } },\r\n\t\t\t\t{ name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 86, 86, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"wave\": \"1/8 pulse\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"interval\": \"honky tonk\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 43, 43, 43, 43, 43, 29, 43, 43, 43, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"piano\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"interval\": \"shimmer\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 2, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0] } },\r\n\t\t\t\t{ name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 14, 14, 14, 14, 14, 14, 43, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 3, \"envelope\": \"twang 2\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14] } },\r\n\t\t\t\t{ name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\r\n\t\t\t\t{ name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 11, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\r\n\t\t\t\t{ name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }, { \"frequency\": \"~2×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 2, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 1\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"pulseWidth\": 18, \"pulseEnvelope\": \"punch\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"distorted synth 2\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 3\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"distorted synth 4\", midiProgram: 30, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 50, \"pulseEnvelope\": \"swell 1\", \"vibrato\": \"delayed\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [86, 100, 100, 86, 71, 57, 29, 14, 14, 14, 29, 43, 43, 43, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [71, 86, 86, 100, 86, 100, 57, 43, 14, 14, 14, 14, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 0, 0] } },\r\n\t\t\t\t{ name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\r\n\t\t\t\t{ name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"transition\": \"slide\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"tremolo5\", \"vibrato\": \"none\", \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"tremolo3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\r\n\t\t\t\t{ name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\r\n\t\t\t\t{ name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 9, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\r\n\t\t\t\t{ name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\r\n\t\t\t\t{ name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t\t{ name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"decay 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\r\n\t\t\t\t{ name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14] } },\r\n\t\t\t\t{ name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\r\n\t\t\t\t{ name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\r\n\t\t\t\t{ name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0] } },\r\n\t\t\t\t{ name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"swell 3\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"swell 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\r\n\t\t\t\t{ name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 71, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"flare 3\" }] } },\r\n\t\t\t\t{ name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"swell 2\" }, { \"frequency\": \"11×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 3\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"twang 3\" }] } },\r\n\t\t\t\t{ name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"interval\": \"octave\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14] } },\r\n\t\t\t\t{ name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"tremolo1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 5, \"envelope\": \"twang 3\" }, { \"frequency\": \"11×\", \"amplitude\": 8, \"envelope\": \"tremolo5\" }] } },\r\n\t\t\t\t{ name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 5, \"envelope\": \"tremolo1\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"punch\" }] } },\r\n\t\t\t\t{ name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"custom interval\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"envelope\": \"custom\" }] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\r\n\t\t\t\t{ name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"flare 1\" }, { \"frequency\": \"3×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 2\" }] } },\r\n\t\t\t\t{ name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 3, \"envelope\": \"flare 2\" }] } },\r\n\t\t\t\t{ name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 2\", \"spectrum\": [0, 0, 0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\r\n\t\t\t\t{ name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\r\n\t\t\t\t{ name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\r\n\t\t\t\t{ name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t\t{\r\n\t\t\tname: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\r\n\t\t\t\t{ name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0] } },\r\n\t\t\t\t{ name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"twang 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 57, \"filterEnvelope\": \"swell 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 3\", \"wave\": \"sawtooth\", \"interval\": \"fifth\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\r\n\t\t\t\t{ name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\r\n\t\t\t\t{ name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"decay 1\", \"interval\": \"hum\", \"vibrato\": \"heavy\", \"harmonics\": [0, 0, 14, 100, 14, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"tremolo1\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\r\n\t\t\t\t{ name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\r\n\t\t\t\t{ name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\r\n\t\t\t\t{ name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 86, \"filterEnvelope\": \"flare 1\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\r\n\t\t\t\t{ name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"custom interval\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"~1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\r\n\t\t\t\t{ name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"pulseWidth\": 4, \"pulseEnvelope\": \"tremolo6\", \"vibrato\": \"shaky\" } },\r\n\t\t\t\t{ name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\r\n\t\t\t\t{ name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\r\n\t\t\t\t{ name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"heavy\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t\t{ name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\r\n\t\t\t])\r\n\t\t},\r\n\t]);\r\n\r\n\tpublic static valueToPreset(presetValue: number): Preset | null {\r\n\t\tconst categoryIndex: number = presetValue >> 6;\r\n\t\tconst presetIndex: number = presetValue & 0x3F;\r\n\t\treturn EditorConfig.presetCategories[categoryIndex].presets[presetIndex];\r\n\t}\r\n\tpublic static midiProgramToPresetValue(program: number): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic static nameToPresetValue(presetName: string): number | null {\r\n\t\tfor (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\r\n\t\t\tconst category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\r\n\t\t\tfor (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\r\n\t\t\t\tconst preset: Preset = category.presets[presetIndex];\r\n\t\t\t\tif (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\r\ninterface NumberArray {\r\n\tlength: number;\r\n\t[index: number]: number;\r\n}\r\n\r\n// A basic FFT operation scales the overall magnitude of elements by the\r\n// square root of the length of the array, √N. Performing a forward FFT and\r\n// then an inverse FFT results in the original array, but multiplied by N.\r\n// This helper function can be used to compensate for that. \r\nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\r\n\tfor (let i: number = 0; i < array.length; i++) {\r\n\t\tarray[i] *= factor;\r\n\t}\r\n}\r\n\r\nfunction isPowerOf2(n: number): boolean {\r\n\treturn !!n && !(n & (n - 1));\r\n}\r\n\r\nfunction countBits(n: number): number {\r\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\treturn Math.round(Math.log(n) / Math.log(2));\r\n}\r\n\r\n// Rearranges the elements of the array, swapping the element at an index\r\n// with an element at an index that is the bitwise reverse of the first\r\n// index in base 2. Useful for computing the FFT.\r\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\r\n\tconst bitCount: number = countBits(fullArrayLength);\r\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\r\n\tconst finalShift: number = 16 - bitCount;\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\r\n\t\tlet j: number;\r\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\r\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\r\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\r\n\t\tj = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;\r\n\t\tif (j > i) {\r\n\t\t\tlet temp: number = array[i];\r\n\t\t\tarray[i] = array[j];\r\n\t\t\tarray[j] = temp;\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Provided for educational purposes. Easier to read than\r\n// fastFourierTransform(), but computes the same result.\r\n// Takes two parallel arrays representing the real and imaginary elements,\r\n// respectively, and returns an array containing two new arrays, which\r\n// contain the complex result of the transform.\r\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\tconst realOut: number[] = [];\r\n\tconst imagOut: number[] = [];\r\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\r\n\t\trealOut[i] = 0.0;\r\n\t\timagOut[i] = 0.0;\r\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\r\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\r\n\t\t\tconst c: number = Math.cos(radians);\r\n\t\t\tconst s: number = Math.sin(radians);\r\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\r\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\r\n\t\t}\r\n\t}\r\n\treturn [realOut, imagOut];\r\n}\r\n\r\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\r\n// input real and imaginary arrays. Can be used for both forward and inverse\r\n// transforms: swap the order of the arguments for the inverse.\r\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\r\n\tconst fullArrayLength: number = realArray.length;\r\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\r\n\r\n\treverseIndexBits(realArray, fullArrayLength);\r\n\treverseIndexBits(imagArray, fullArrayLength);\r\n\r\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\r\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\r\n\t\tconst startIndex1: number = startIndex + 1;\r\n\t\tconst startIndex2: number = startIndex + 2;\r\n\t\tconst startIndex3: number = startIndex + 3;\r\n\t\tconst real0: number = realArray[startIndex];\r\n\t\tconst real1: number = realArray[startIndex1];\r\n\t\tconst real2: number = realArray[startIndex2];\r\n\t\tconst real3: number = realArray[startIndex3];\r\n\t\tconst imag0: number = imagArray[startIndex];\r\n\t\tconst imag1: number = imagArray[startIndex1];\r\n\t\tconst imag2: number = imagArray[startIndex2];\r\n\t\tconst imag3: number = imagArray[startIndex3];\r\n\t\tconst realTemp0: number = real0 + real1;\r\n\t\tconst realTemp1: number = real0 - real1;\r\n\t\tconst realTemp2: number = real2 + real3;\r\n\t\tconst realTemp3: number = real2 - real3;\r\n\t\tconst imagTemp0: number = imag0 + imag1;\r\n\t\tconst imagTemp1: number = imag0 - imag1;\r\n\t\tconst imagTemp2: number = imag2 + imag3;\r\n\t\tconst imagTemp3: number = imag2 - imag3;\r\n\t\trealArray[startIndex] = realTemp0 + realTemp2;\r\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\r\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\r\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\r\n\t\timagArray[startIndex] = imagTemp0 + imagTemp2;\r\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\r\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\r\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\r\n\t}\r\n\r\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\r\n\t\tconst halfLength: number = stride >>> 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tlet c: number = 1.0;\r\n\t\t\tlet s: number = 0.0;\r\n\t\t\tlet cPrev: number = cosIncrement;\r\n\t\t\tlet sPrev: number = sinIncrement;\r\n\t\t\tconst secondHalf: number = startIndex + halfLength;\r\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\r\n\t\t\t\tconst j: number = i + halfLength;\r\n\t\t\t\tconst real0: number = realArray[i];\r\n\t\t\t\tconst imag0: number = imagArray[i];\r\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\r\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\r\n\t\t\t\trealArray[i] = real0 + real1;\r\n\t\t\t\timagArray[i] = imag0 + imag1;\r\n\t\t\t\trealArray[j] = real0 - real1;\r\n\t\t\t\timagArray[j] = imag0 - imag1;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the Fourier transform from an array of real-valued time-domain\r\n// samples. The output is specially formatted for space efficieny: elements\r\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\r\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\r\n// descending frequency. Overwrites the input array.\r\nexport function forwardRealFourierTransform(array: NumberArray): void {\r\n\tconst fullArrayLength: number = array.length;\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n\r\n\t// First and second pass.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\t// no imaginary elements yet since the input is fully real.\r\n\t\tconst tempA: number = real0 + real1;\r\n\t\tconst tempB: number = real2 + real3;\r\n\t\tarray[index] = tempA + tempB;\r\n\t\tarray[index1] = real0 - real1;\r\n\t\tarray[index2] = tempA - tempB;\r\n\t\tarray[index3] = real2 - real3;\r\n\t}\r\n\r\n\t// Third pass.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst imag3: number = array[index3];\r\n\t\tconst real4: number = array[index4];\r\n\t\tconst real5: number = array[index5];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\r\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\r\n\t\tarray[index] = real0 + real4;\r\n\t\tarray[index1] = real1 + tempA;\r\n\t\tarray[index3] = real1 - tempA;\r\n\t\tarray[index4] = real0 - real4;\r\n\t\tarray[index5] = tempB - imag3;\r\n\t\tarray[index7] = tempB + imag3;\r\n\t}\r\n\r\n\t// Handle remaining passes.\r\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst realStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + realStartB;\r\n\t\t\tarray[startIndexB] = realStartA - realStartB;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst imag0: number = array[indexA1];\r\n\t\t\t\tconst real1: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\r\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\r\n\t\t\t\tarray[indexA0] = real0 + tempA;\r\n\t\t\t\tarray[indexA1] = real0 - tempA;\r\n\t\t\t\tarray[indexB0] = -imag0 - tempB;\r\n\t\t\t\tarray[indexB1] = imag0 - tempB;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n// Computes the inverse Fourier transform from a specially formatted array of\r\n// scalar values. Elements 0 through N/2 are expected to be the real values of\r\n// the corresponding complex elements, representing cosine wave amplitudes in\r\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\r\n// imaginary values, representing sine wave amplitudes in descending frequency.\r\n// Generates real-valued time-domain samples. Overwrites the input array.\r\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\r\n\tconst totalPasses: number = countBits(fullArrayLength);\r\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\r\n\r\n\t// Perform all but the last few passes in reverse.\r\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\r\n\t\tconst subStride: number = 1 << pass;\r\n\t\tconst midSubStride: number = subStride >> 1;\r\n\t\tconst stride: number = subStride << 1;\r\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\r\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\r\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\r\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\r\n\r\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\r\n\t\t\tconst startIndexA: number = startIndex;\r\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\r\n\t\t\tconst startIndexB: number = startIndexA + subStride;\r\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\r\n\t\t\tconst stopIndex: number = startIndexB + subStride;\r\n\t\t\tconst realStartA: number = array[startIndexA];\r\n\t\t\tconst imagStartB: number = array[startIndexB];\r\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\r\n\t\t\tarray[midIndexA] *= 2;\r\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\r\n\t\t\tarray[midIndexB] *= 2;\r\n\t\t\tlet c: number = cosIncrement;\r\n\t\t\tlet s: number = -sinIncrement;\r\n\t\t\tlet cPrev: number = 1.0;\r\n\t\t\tlet sPrev: number = 0.0;\r\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\r\n\t\t\t\tconst indexA0: number = startIndexA + index;\r\n\t\t\t\tconst indexA1: number = startIndexB - index;\r\n\t\t\t\tconst indexB0: number = startIndexB + index;\r\n\t\t\t\tconst indexB1: number = stopIndex - index;\r\n\t\t\t\tconst real0: number = array[indexA0];\r\n\t\t\t\tconst real1: number = array[indexA1];\r\n\t\t\t\tconst imag0: number = array[indexB0];\r\n\t\t\t\tconst imag1: number = array[indexB1];\r\n\t\t\t\tconst tempA: number = real0 - real1;\r\n\t\t\t\tconst tempB: number = imag0 + imag1;\r\n\t\t\t\tarray[indexA0] = real0 + real1;\r\n\t\t\t\tarray[indexA1] = imag1 - imag0;\r\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\r\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\r\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\r\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\r\n\t\t\t\tcPrev = c;\r\n\t\t\t\tsPrev = s;\r\n\t\t\t\tc = cTemp;\r\n\t\t\t\ts = sTemp;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/*\r\n\t// Commented out this block (and compensated with an extra pass above)\r\n\t// because it's slower in my testing so far.\r\n\t// Pass with stride 8.\r\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst index4: number = index + 4;\r\n\t\tconst index5: number = index + 5;\r\n\t\tconst index6: number = index + 6;\r\n\t\tconst index7: number = index + 7;\r\n\t\tconst real0: number = array[index ];\r\n\t\tconst real1: number = array[index1];\r\n\t\tconst real2: number = array[index2];\r\n\t\tconst real3: number = array[index3];\r\n\t\tconst imag4: number = array[index4];\r\n\t\tconst imag5: number = array[index5];\r\n\t\tconst imag6: number = array[index6];\r\n\t\tconst imag7: number = array[index7];\r\n\t\tconst tempA: number = real1 - real3;\r\n\t\tconst tempB: number = imag5 + imag7;\r\n\t\tarray[index ] = real0 + imag4;\r\n\t\tarray[index1] = real1 + real3;\r\n\t\tarray[index2] = real2 * 2;\r\n\t\tarray[index3] = imag7 - imag5;\r\n\t\tarray[index4] = real0 - imag4;\r\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\r\n\t\tarray[index6] = imag6 * 2;\r\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\r\n\t}\r\n\t*/\r\n\t// The final passes with strides 4 and 2, combined into one loop.\r\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\r\n\t\tconst index1: number = index + 1;\r\n\t\tconst index2: number = index + 2;\r\n\t\tconst index3: number = index + 3;\r\n\t\tconst real0: number = array[index];\r\n\t\tconst real1: number = array[index1] * 2;\r\n\t\tconst imag2: number = array[index2];\r\n\t\tconst imag3: number = array[index3] * 2;\r\n\t\tconst tempA: number = real0 + imag2;\r\n\t\tconst tempB: number = real0 - imag2;\r\n\t\tarray[index] = tempA + real1;\r\n\t\tarray[index1] = tempA - real1;\r\n\t\tarray[index2] = tempB + imag3;\r\n\t\tarray[index3] = tempB - imag3;\r\n\t}\r\n\r\n\treverseIndexBits(array, fullArrayLength);\r\n}\r\n//}\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\n//namespace beepbox {\r\nexport class Deque<T> {\r\n\tprivate _capacity: number = 1;\r\n\tprivate _buffer: Array<T | undefined> = [undefined];\r\n\tprivate _mask: number = 0;\r\n\tprivate _offset: number = 0;\r\n\tprivate _count: number = 0;\r\n\r\n\tpublic pushFront(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._offset = (this._offset - 1) & this._mask;\r\n\t\tthis._buffer[this._offset] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic pushBack(element: T): void {\r\n\t\tif (this._count >= this._capacity) this._expandCapacity();\r\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\r\n\t\tthis._count++;\r\n\t}\r\n\tpublic popFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tconst element: T = <T>this._buffer[this._offset];\r\n\t\tthis._buffer[this._offset] = undefined;\r\n\t\tthis._offset = (this._offset + 1) & this._mask;\r\n\t\tthis._count--;\r\n\t\treturn element;\r\n\t}\r\n\tpublic popBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\tthis._count--;\r\n\t\tconst index: number = (this._offset + this._count) & this._mask;\r\n\t\tconst element: T = <T>this._buffer[index];\r\n\t\tthis._buffer[index] = undefined;\r\n\t\treturn element;\r\n\t}\r\n\tpublic peakFront(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[this._offset];\r\n\t}\r\n\tpublic peakBack(): T {\r\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\r\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\r\n\t}\r\n\tpublic count(): number {\r\n\t\treturn this._count;\r\n\t}\r\n\tpublic set(index: number, element: T): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\r\n\t}\r\n\tpublic get(index: number): T {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\r\n\t}\r\n\tpublic remove(index: number): void {\r\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\r\n\t\tif (index <= (this._count >> 1)) {\r\n\t\t\twhile (index > 0) {\r\n\t\t\t\tthis.set(index, this.get(index - 1));\r\n\t\t\t\tindex--;\r\n\t\t\t}\r\n\t\t\tthis.popFront();\r\n\t\t} else {\r\n\t\t\tindex++;\r\n\t\t\twhile (index < this._count) {\r\n\t\t\t\tthis.set(index - 1, this.get(index));\r\n\t\t\t\tindex++;\r\n\t\t\t}\r\n\t\t\tthis.popBack();\r\n\t\t}\r\n\t}\r\n\tprivate _expandCapacity(): void {\r\n\t\tif (this._capacity >= 0x40000000) throw new Error(\"Capacity too big.\");\r\n\t\tthis._capacity = this._capacity << 1;\r\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\r\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\r\n\t\tconst size: number = this._count | 0;\r\n\t\tconst offset: number = this._offset | 0;\r\n\t\tfor (let i = 0; i < size; i++) {\r\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\r\n\t\t}\r\n\t\tfor (let i = size; i < this._capacity; i++) {\r\n\t\t\tnewBuffer[i] = undefined;\r\n\t\t}\r\n\t\tthis._offset = 0;\r\n\t\tthis._buffer = newBuffer;\r\n\t\tthis._mask = this._capacity - 1;\r\n\t}\r\n}\r\n//}\r\n\r\n","// Copyright (C) 2020 John Nesky, distributed under the MIT license.\r\n\r\nimport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config, getDrumWave, drawNoiseSpectrum, getArpeggioPitchIndex } from \"./SynthConfig\";\r\nimport { EditorConfig } from \"../editor/EditorConfig\";\r\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\r\nimport { Deque } from \"./Deque\";\r\n\r\ndeclare global {\r\n    interface Window {\r\n        AudioContext: any;\r\n        webkitAudioContext: any;\r\n    }\r\n}\r\n\r\n//namespace beepbox {\r\n// For performance debugging:\r\n//let samplesAccumulated: number = 0;\r\n//let samplePerformance: number = 0;\r\n\r\nconst enum CharCode {\r\n    SPACE = 32,\r\n    HASH = 35,\r\n    PERCENT = 37,\r\n    AMPERSAND = 38,\r\n    PLUS = 43,\r\n    DASH = 45,\r\n    DOT = 46,\r\n    NUM_0 = 48,\r\n    NUM_1 = 49,\r\n    NUM_2 = 50,\r\n    NUM_3 = 51,\r\n    NUM_4 = 52,\r\n    NUM_5 = 53,\r\n    NUM_6 = 54,\r\n    NUM_7 = 55,\r\n    NUM_8 = 56,\r\n    NUM_9 = 57,\r\n    EQUALS = 61,\r\n    A = 65,\r\n    B = 66,\r\n    C = 67,\r\n    D = 68,\r\n    E = 69,\r\n    F = 70,\r\n    G = 71,\r\n    H = 72,\r\n    I = 73,\r\n    J = 74,\r\n    K = 75,\r\n    L = 76,\r\n    M = 77,\r\n    N = 78,\r\n    O = 79,\r\n    P = 80,\r\n    Q = 81,\r\n    R = 82,\r\n    S = 83,\r\n    T = 84,\r\n    U = 85,\r\n    V = 86,\r\n    W = 87,\r\n    X = 88,\r\n    Y = 89,\r\n    Z = 90,\r\n    UNDERSCORE = 95,\r\n    a = 97,\r\n    b = 98,\r\n    c = 99,\r\n    d = 100,\r\n    e = 101,\r\n    f = 102,\r\n    g = 103,\r\n    h = 104,\r\n    i = 105,\r\n    j = 106,\r\n    k = 107,\r\n    l = 108,\r\n    m = 109,\r\n    n = 110,\r\n    o = 111,\r\n    p = 112,\r\n    q = 113,\r\n    r = 114,\r\n    s = 115,\r\n    t = 116,\r\n    u = 117,\r\n    v = 118,\r\n    w = 119,\r\n    x = 120,\r\n    y = 121,\r\n    z = 122,\r\n    LEFT_CURLY_BRACE = 123,\r\n    RIGHT_CURLY_BRACE = 125,\r\n}\r\n\r\nconst enum SongTagCode {\r\n    beatCount = CharCode.a,\r\n    bars = CharCode.b,\r\n    vibrato = CharCode.c,\r\n    transition = CharCode.d,\r\n    loopEnd = CharCode.e,\r\n    filterCutoff = CharCode.f,\r\n    barCount = CharCode.g,\r\n    interval = CharCode.h,\r\n    instrumentCount = CharCode.i,\r\n    patternCount = CharCode.j,\r\n    key = CharCode.k,\r\n    loopStart = CharCode.l,\r\n    reverb = CharCode.m,\r\n    channelCount = CharCode.n,\r\n    channelOctave = CharCode.o,\r\n    patterns = CharCode.p,\r\n    effects = CharCode.q,\r\n    rhythm = CharCode.r,\r\n    scale = CharCode.s,\r\n    tempo = CharCode.t,\r\n    preset = CharCode.u,\r\n    volume = CharCode.v,\r\n    wave = CharCode.w,\r\n\r\n    filterResonance = CharCode.y,\r\n    filterEnvelope = CharCode.z,\r\n    algorithm = CharCode.A,\r\n    feedbackAmplitude = CharCode.B,\r\n    chord = CharCode.C,\r\n    detune = CharCode.D,\r\n    operatorEnvelopes = CharCode.E,\r\n    feedbackType = CharCode.F,\r\n    arpeggioSpeed = CharCode.G,\r\n    harmonics = CharCode.H,\r\n\r\n    squareDuty = CharCode.K,\r\n    panning = CharCode.L,\r\n    customChipWave = CharCode.M,\r\n    songTitle = CharCode.N,\r\n    limiterSettings = CharCode.O,\r\n    operatorAmplitudes = CharCode.P,\r\n    operatorFrequencies = CharCode.Q,\r\n\r\n    spectrum = CharCode.S,\r\n    startInstrument = CharCode.T,\r\n    channelNames = CharCode.U,\r\n    feedbackEnvelope = CharCode.V,\r\n    pulseWidth = CharCode.W,\r\n}\r\n\r\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\r\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\r\n\r\nclass BitFieldReader {\r\n    private _bits: number[] = [];\r\n    private _readIndex: number = 0;\r\n\r\n    constructor(source: string, startIndex: number, stopIndex: number) {\r\n        for (let i: number = startIndex; i < stopIndex; i++) {\r\n            const value: number = base64CharCodeToInt[source.charCodeAt(i)];\r\n            this._bits.push((value >> 5) & 0x1);\r\n            this._bits.push((value >> 4) & 0x1);\r\n            this._bits.push((value >> 3) & 0x1);\r\n            this._bits.push((value >> 2) & 0x1);\r\n            this._bits.push((value >> 1) & 0x1);\r\n            this._bits.push(value & 0x1);\r\n        }\r\n    }\r\n\r\n    public read(bitCount: number): number {\r\n        let result: number = 0;\r\n        while (bitCount > 0) {\r\n            result = result << 1;\r\n            result += this._bits[this._readIndex++];\r\n            bitCount--;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readLongTail(minValue: number, minBits: number): number {\r\n        let result: number = minValue;\r\n        let numBits: number = minBits;\r\n        while (this._bits[this._readIndex++]) {\r\n            result += 1 << numBits;\r\n            numBits++;\r\n        }\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            if (this._bits[this._readIndex++]) {\r\n                result += 1 << numBits;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public readPartDuration(): number {\r\n        return this.readLongTail(1, 3);\r\n    }\r\n\r\n    public readLegacyPartDuration(): number {\r\n        return this.readLongTail(1, 2);\r\n    }\r\n\r\n    public readPinCount(): number {\r\n        return this.readLongTail(1, 0);\r\n    }\r\n\r\n    public readPitchInterval(): number {\r\n        if (this.read(1)) {\r\n            return -this.readLongTail(1, 3);\r\n        } else {\r\n            return this.readLongTail(1, 3);\r\n        }\r\n    }\r\n}\r\n\r\nclass BitFieldWriter {\r\n    private _index: number = 0;\r\n    private _bits: number[] = [];\r\n\r\n    public clear() {\r\n        this._index = 0;\r\n    }\r\n\r\n    public write(bitCount: number, value: number): void {\r\n        bitCount--;\r\n        while (bitCount >= 0) {\r\n            this._bits[this._index++] = (value >>> bitCount) & 1;\r\n            bitCount--;\r\n        }\r\n    }\r\n\r\n    public writeLongTail(minValue: number, minBits: number, value: number): void {\r\n        if (value < minValue) throw new Error(\"value out of bounds\");\r\n        value -= minValue;\r\n        let numBits: number = minBits;\r\n        while (value >= (1 << numBits)) {\r\n            this._bits[this._index++] = 1;\r\n            value -= 1 << numBits;\r\n            numBits++;\r\n        }\r\n        this._bits[this._index++] = 0;\r\n        while (numBits > 0) {\r\n            numBits--;\r\n            this._bits[this._index++] = (value >>> numBits) & 1;\r\n        }\r\n    }\r\n\r\n    public writePartDuration(value: number): void {\r\n        this.writeLongTail(1, 3, value);\r\n    }\r\n\r\n    public writePinCount(value: number): void {\r\n        this.writeLongTail(1, 0, value);\r\n    }\r\n\r\n    public writePitchInterval(value: number): void {\r\n        if (value < 0) {\r\n            this.write(1, 1); // sign\r\n            this.writeLongTail(1, 3, -value);\r\n        } else {\r\n            this.write(1, 0); // sign\r\n            this.writeLongTail(1, 3, value);\r\n        }\r\n    }\r\n\r\n    public concat(other: BitFieldWriter): void {\r\n        for (let i: number = 0; i < other._index; i++) {\r\n            this._bits[this._index++] = other._bits[i];\r\n        }\r\n    }\r\n\r\n    public encodeBase64(buffer: number[]): number[] {\r\n\r\n        for (let i: number = 0; i < this._index; i += 6) {\r\n            const value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\r\n            buffer.push(base64IntToCharCode[value]);\r\n        }\r\n        return buffer;\r\n    }\r\n\r\n    public lengthBase64(): number {\r\n        return Math.ceil(this._index / 6);\r\n    }\r\n}\r\n\r\nexport interface NotePin {\r\n    interval: number;\r\n    time: number;\r\n    volume: number;\r\n}\r\n\r\nexport function makeNotePin(interval: number, time: number, volume: number): NotePin {\r\n    return { interval: interval, time: time, volume: volume };\r\n}\r\n\r\nfunction clamp(min: number, max: number, val: number): number {\r\n    max = max - 1;\r\n    if (val <= max) {\r\n        if (val >= min) return val;\r\n        else return min;\r\n    } else {\r\n        return max;\r\n    }\r\n}\r\n\r\nfunction validateRange(min: number, max: number, val: number): number {\r\n    if (min <= val && val <= max) return val;\r\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\r\n}\r\n\r\nexport class Note {\r\n    public pitches: number[];\r\n    public pins: NotePin[];\r\n    public start: number;\r\n    public end: number;\r\n\r\n    public constructor(pitch: number, start: number, end: number, volume: number, fadeout: boolean = false) {\r\n        this.pitches = [pitch];\r\n        this.pins = [makeNotePin(0, 0, volume), makeNotePin(0, end - start, fadeout ? 0 : volume)];\r\n        this.start = start;\r\n        this.end = end;\r\n    }\r\n\r\n    public pickMainInterval(): number {\r\n        let longestFlatIntervalDuration: number = 0;\r\n        let mainInterval: number = 0;\r\n        for (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\r\n            const pinA: NotePin = this.pins[pinIndex - 1];\r\n            const pinB: NotePin = this.pins[pinIndex];\r\n            if (pinA.interval == pinB.interval) {\r\n                const duration: number = pinB.time - pinA.time;\r\n                if (longestFlatIntervalDuration < duration) {\r\n                    longestFlatIntervalDuration = duration;\r\n                    mainInterval = pinA.interval;\r\n                }\r\n            }\r\n        }\r\n        if (longestFlatIntervalDuration == 0) {\r\n            let loudestVolume: number = 0;\r\n            for (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\r\n                const pin: NotePin = this.pins[pinIndex];\r\n                if (loudestVolume < pin.volume) {\r\n                    loudestVolume = pin.volume;\r\n                    mainInterval = pin.interval;\r\n                }\r\n            }\r\n        }\r\n        return mainInterval;\r\n    }\r\n\r\n    public clone(): Note {\r\n        const newNote: Note = new Note(-1, this.start, this.end, 6);\r\n        newNote.pitches = this.pitches.concat();\r\n        newNote.pins = [];\r\n        for (const pin of this.pins) {\r\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.volume));\r\n        }\r\n        return newNote;\r\n    }\r\n}\r\n\r\nexport class Pattern {\r\n    public notes: Note[] = [];\r\n    public instrument: number = 0;\r\n\r\n    public cloneNotes(): Note[] {\r\n        const result: Note[] = [];\r\n        for (const note of this.notes) {\r\n            result.push(note.clone());\r\n        }\r\n        return result;\r\n    }\r\n\r\n    public reset(): void {\r\n        this.notes.length = 0;\r\n        this.instrument = 0;\r\n    }\r\n}\r\n\r\nexport class Operator {\r\n    public frequency: number = 0;\r\n    public amplitude: number = 0;\r\n    public envelope: number = 0;\r\n\r\n    constructor(index: number) {\r\n        this.reset(index);\r\n    }\r\n\r\n    public reset(index: number): void {\r\n        this.frequency = 0;\r\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\r\n        this.envelope = (index == 0) ? 0 : 1;\r\n    }\r\n\r\n    public copy(other: Operator): void {\r\n        this.frequency = other.frequency;\r\n        this.amplitude = other.amplitude;\r\n        this.envelope = other.envelope;\r\n    }\r\n}\r\n\r\nexport class SpectrumWave {\r\n    public spectrum: number[] = [];\r\n    private _wave: Float32Array | null = null;\r\n    private _waveIsReady: boolean = false;\r\n\r\n    constructor(isNoiseChannel: boolean) {\r\n        this.reset(isNoiseChannel);\r\n    }\r\n\r\n    public reset(isNoiseChannel: boolean): void {\r\n        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n            if (isNoiseChannel) {\r\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\r\n            } else {\r\n                const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\r\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\r\n            }\r\n        }\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public getCustomWave(lowestOctave: number): Float32Array {\r\n        if (!this._waveIsReady || this._wave == null) {\r\n            let waveLength: number = Config.chipNoiseLength;\r\n\r\n            if (this._wave == null || this._wave.length != waveLength + 1) {\r\n                this._wave = new Float32Array(waveLength + 1);\r\n            }\r\n            const wave: Float32Array = this._wave;\r\n\r\n            for (let i: number = 0; i < waveLength; i++) {\r\n                wave[i] = 0;\r\n            }\r\n\r\n            const highestOctave: number = 14;\r\n            const falloffRatio: number = 0.25;\r\n            // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\r\n            const pitchTweak: number[] = [0, 1 / 7, Math.log(5 / 4) / Math.LN2, 3 / 7, Math.log(3 / 2) / Math.LN2, 5 / 7, 6 / 7];\r\n            function controlPointToOctave(point: number): number {\r\n                return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\r\n            }\r\n\r\n            let combinedAmplitude: number = 1;\r\n            for (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\r\n                const value1: number = (i <= 0) ? 0 : this.spectrum[i - 1];\r\n                const value2: number = (i >= Config.spectrumControlPoints) ? this.spectrum[Config.spectrumControlPoints - 1] : this.spectrum[i];\r\n                const octave1: number = controlPointToOctave(i - 1);\r\n                let octave2: number = controlPointToOctave(i);\r\n                if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\r\n                if (value1 == 0 && value2 == 0) continue;\r\n\r\n                combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\r\n            }\r\n            if (this.spectrum[Config.spectrumControlPoints - 1] > 0) {\r\n                combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, this.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\r\n            }\r\n\r\n            inverseRealFourierTransform(wave, waveLength);\r\n            scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\r\n\r\n            // Duplicate the first sample at the end for easier wrap-around interpolation.\r\n            wave[waveLength] = wave[0];\r\n\r\n            this._waveIsReady = true;\r\n        }\r\n        return this._wave;\r\n    }\r\n}\r\n\r\nexport class HarmonicsWave {\r\n    public harmonics: number[] = [];\r\n    private _wave: Float32Array | null = null;\r\n    private _waveIsReady: boolean = false;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n            this.harmonics[i] = 0;\r\n        }\r\n        this.harmonics[0] = Config.harmonicsMax;\r\n        this.harmonics[3] = Config.harmonicsMax;\r\n        this.harmonics[6] = Config.harmonicsMax;\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public markCustomWaveDirty(): void {\r\n        this._waveIsReady = false;\r\n    }\r\n\r\n    public getCustomWave(): Float32Array {\r\n        if (!this._waveIsReady || this._wave == null) {\r\n            let waveLength: number = Config.harmonicsWavelength;\r\n            const retroWave: Float32Array = getDrumWave(0);\r\n\r\n            if (this._wave == null || this._wave.length != waveLength + 1) {\r\n                this._wave = new Float32Array(waveLength + 1);\r\n            }\r\n            const wave: Float32Array = this._wave;\r\n\r\n            for (let i: number = 0; i < waveLength; i++) {\r\n                wave[i] = 0;\r\n            }\r\n\r\n            const overallSlope: number = -0.25;\r\n            let combinedControlPointAmplitude: number = 1;\r\n\r\n            for (let harmonicIndex: number = 0; harmonicIndex < Config.harmonicsRendered; harmonicIndex++) {\r\n                const harmonicFreq: number = harmonicIndex + 1;\r\n                let controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? this.harmonics[harmonicIndex] : this.harmonics[Config.harmonicsControlPoints - 1];\r\n                if (harmonicIndex >= Config.harmonicsControlPoints) {\r\n                    controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (Config.harmonicsRendered - Config.harmonicsControlPoints);\r\n                }\r\n                const normalizedValue: number = controlValue / Config.harmonicsMax;\r\n                let amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\r\n                if (harmonicIndex < Config.harmonicsControlPoints) {\r\n                    combinedControlPointAmplitude += amplitude;\r\n                }\r\n                amplitude *= Math.pow(harmonicFreq, overallSlope);\r\n\r\n                // Multiple all the sine wave amplitudes by 1 or -1 based on the LFSR\r\n                // retro wave (effectively random) to avoid egregiously tall spikes.\r\n                amplitude *= retroWave[harmonicIndex + 589];\r\n\r\n                wave[waveLength - harmonicFreq] = amplitude;\r\n            }\r\n\r\n            inverseRealFourierTransform(wave, waveLength);\r\n\r\n            // Limit the maximum wave amplitude.\r\n            const mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\r\n\r\n            // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n            let cumulative: number = 0;\r\n            let wavePrev: number = 0;\r\n            for (let i: number = 0; i < wave.length; i++) {\r\n                cumulative += wavePrev;\r\n                wavePrev = wave[i] * mult;\r\n                wave[i] = cumulative;\r\n            }\r\n            // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\r\n            wave[waveLength] = wave[0];\r\n\r\n            this._waveIsReady = true;\r\n        }\r\n        return this._wave;\r\n    }\r\n}\r\n\r\nexport class Instrument {\r\n    public type: InstrumentType = InstrumentType.chip;\r\n    public preset: number = 0;\r\n    public chipWave: number = 2;\r\n    public chipNoise: number = 1;\r\n    public filterCutoff: number = 12;\r\n    public filterResonance: number = 0;\r\n    public filterEnvelope: number = 1;\r\n    public transition: number = 1;\r\n    public vibrato: number = 0;\r\n    public vibratoDepth: number = 0;\r\n    public vibratoSpeed: number = 10;\r\n    public vibratoDelay: number = 0;\r\n    public vibratoType: number = 0;\r\n    public interval: number = 0;\r\n    public effects: number = 0;\r\n    public chord: number = 1;\r\n    public volume: number = 0;\r\n    public pan: number = Config.panCenter;\r\n    public panDelay: number = 10;\r\n    public arpeggioSpeed: number = 12;\r\n    public fastTwoNoteArp: boolean = false;\r\n    public tieNoteTransition: boolean = false;\r\n    public clicklessTransition: boolean = false;\r\n    public detune: number = 0;\r\n    public pulseWidth: number = Config.pulseWidthRange;\r\n    public pulseEnvelope: number = 1;\r\n    public algorithm: number = 0;\r\n    public feedbackType: number = 0;\r\n    public feedbackAmplitude: number = 0;\r\n    public feedbackEnvelope: number = 1;\r\n    public LFOtime: number = 0;\r\n    public nextLFOtime: number = 0;\r\n    public arpTime: number = 0;\r\n    public customChipWave: Float64Array = new Float64Array(64);\r\n    public customChipWaveIntegral: Float64Array = new Float64Array(65); // One extra element for wrap-around in chipSynth.\r\n    public readonly operators: Operator[] = [];\r\n    public readonly spectrumWave: SpectrumWave;\r\n    public readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\r\n    public readonly drumsetEnvelopes: number[] = [];\r\n    public readonly drumsetSpectrumWaves: SpectrumWave[] = [];\r\n    public modChannels: number[] = [];\r\n    public modStatuses: ModStatus[] = [];\r\n    public modInstruments: number[] = [];\r\n    public modSettings: ModSetting[] = [];\r\n\r\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\r\n\r\n        if (isModChannel) {\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                this.modChannels.push(0);\r\n                this.modStatuses.push(ModStatus.msNone);\r\n                this.modInstruments.push(0);\r\n                this.modSettings.push(ModSetting.mstNone);\r\n            }\r\n        }\r\n\r\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            this.operators[i] = new Operator(i);\r\n        }\r\n        for (let i: number = 0; i < Config.drumCount; i++) {\r\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n        }\r\n\r\n        for (let i = 0; i < 64; i++) {\r\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\r\n        }\r\n\r\n        let sum: number = 0.0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            sum += this.customChipWave[i];\r\n        }\r\n        const average: number = sum / this.customChipWave.length;\r\n\r\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n        let cumulative: number = 0;\r\n        let wavePrev: number = 0;\r\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n            cumulative += wavePrev;\r\n            wavePrev = this.customChipWave[i] - average;\r\n            this.customChipWaveIntegral[i] = cumulative;\r\n        }\r\n\r\n        // 65th, last sample is for anti-aliasing\r\n        this.customChipWaveIntegral[64] = 0.0;\r\n\r\n    }\r\n\r\n    public setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\r\n        // Mod channels are forced to one type.\r\n        if (isModChannel) type = InstrumentType.mod;\r\n        this.type = type;\r\n        this.preset = type;\r\n        this.volume = 0;\r\n        this.pan = Config.panCenter;\r\n        this.panDelay = 10;\r\n        this.arpeggioSpeed = 12;\r\n        this.detune = 0;\r\n        this.tieNoteTransition = false;\r\n        this.clicklessTransition = false;\r\n        switch (type) {\r\n            case InstrumentType.chip:\r\n                this.chipWave = 2;\r\n                this.filterCutoff = 6;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 2;\r\n                break;\r\n            case InstrumentType.customChipWave:\r\n                this.chipWave = 2;\r\n                this.filterCutoff = 6;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 2;\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n                break;\r\n            case InstrumentType.fm:\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.effects = 1;\r\n                this.chord = 3;\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = 1;\r\n                this.algorithm = 0;\r\n                this.feedbackType = 0;\r\n                this.feedbackAmplitude = 0;\r\n                this.feedbackEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                for (let i: number = 0; i < this.operators.length; i++) {\r\n                    this.operators[i].reset(i);\r\n                }\r\n                break;\r\n            case InstrumentType.noise:\r\n                this.chipNoise = 1;\r\n                this.transition = 1;\r\n                this.effects = 0;\r\n                this.chord = 2;\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                break;\r\n            case InstrumentType.spectrum:\r\n                this.transition = 1;\r\n                this.effects = 1;\r\n                this.chord = 0;\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.spectrumWave.reset(isNoiseChannel);\r\n                break;\r\n            case InstrumentType.drumset:\r\n                this.effects = 0;\r\n                for (let i: number = 0; i < Config.drumCount; i++) {\r\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\r\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\r\n                    }\r\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\r\n                }\r\n                break;\r\n            case InstrumentType.harmonics:\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 0;\r\n                this.harmonicsWave.reset();\r\n                break;\r\n            case InstrumentType.pwm:\r\n                this.filterCutoff = 10;\r\n                this.filterResonance = 0;\r\n                this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n                this.transition = 1;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 1;\r\n                this.chord = 2;\r\n                this.pulseWidth = Config.pulseWidthRange;\r\n                this.pulseEnvelope = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                break;\r\n            case InstrumentType.mod:\r\n                this.transition = 0;\r\n                this.vibrato = 0;\r\n                this.interval = 0;\r\n                this.effects = 0;\r\n                this.chord = 0;\r\n                this.modChannels = [];\r\n                this.modStatuses = [];\r\n                this.modInstruments = [];\r\n                this.modSettings = [];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels.push(0);\r\n                    this.modStatuses.push(ModStatus.msNone);\r\n                    this.modInstruments.push(0);\r\n                    this.modSettings.push(ModSetting.mstNone);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(\"Unrecognized instrument type: \" + type);\r\n        }\r\n    }\r\n\r\n    public toJsonObject(): Object {\r\n        const instrumentObject: any = {\r\n            \"type\": Config.instrumentTypeNames[this.type],\r\n            \"volume\": this.volume,\r\n            \"pan\": (this.pan - Config.panCenter) * 100 / Config.panCenter,\r\n            \"panDelay\": this.panDelay,\r\n            \"arpeggioSpeed\": this.arpeggioSpeed,\r\n            \"fastTwoNoteArp\": this.fastTwoNoteArp,\r\n            \"tieNoteTransition\": this.tieNoteTransition,\r\n            \"clicklessTransition\": this.clicklessTransition,\r\n            \"vibrato\": this.vibrato,\r\n            \"vibratoDepth\": this.vibratoDepth,\r\n            \"vibratoDelay\": this.vibratoDelay,\r\n            \"vibratoSpeed\": this.vibratoSpeed,\r\n            \"vibratoType\": this.vibratoType,\r\n            \"detune\": this.detune,\r\n            \"effects\": Config.effectsNames[this.effects],\r\n        };\r\n\r\n        if (this.preset != this.type) {\r\n            instrumentObject[\"preset\"] = this.preset;\r\n        }\r\n\r\n        if (this.type != InstrumentType.drumset) {\r\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\r\n            instrumentObject[\"chord\"] = this.getChord().name;\r\n            instrumentObject[\"filterCutoffHz\"] = Math.round(Config.filterCutoffMaxHz * Math.pow(2.0, this.getFilterCutoffOctaves()));\r\n            instrumentObject[\"filterResonance\"] = Math.round(100 * this.filterResonance / (Config.filterResonanceRange - 1));\r\n            instrumentObject[\"filterEnvelope\"] = this.getFilterEnvelope().name;\r\n        }\r\n\r\n        if (this.type == InstrumentType.noise) {\r\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            instrumentObject[\"spectrum\"] = [];\r\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\r\n            }\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            instrumentObject[\"drums\"] = [];\r\n            for (let j: number = 0; j < Config.drumCount; j++) {\r\n                const spectrum: number[] = [];\r\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\r\n                }\r\n                instrumentObject[\"drums\"][j] = {\r\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\r\n                    \"spectrum\": spectrum,\r\n                };\r\n            }\r\n        } else if (this.type == InstrumentType.chip) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            instrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n        } else if (this.type == InstrumentType.customChipWave) {\r\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\r\n            instrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\r\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\r\n            for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\r\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\r\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\r\n            }\r\n\r\n            instrumentObject[\"customChipWaveIntegral\"][64] = 0;\r\n        } else if (this.type == InstrumentType.pwm) {\r\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\r\n            instrumentObject[\"pulseEnvelope\"] = Config.envelopes[this.pulseEnvelope].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            instrumentObject[\"interval\"] = Config.intervals[this.interval].name;\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"harmonics\"] = [];\r\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\r\n            }\r\n        } else if (this.type == InstrumentType.fm) {\r\n            const operatorArray: Object[] = [];\r\n            for (const operator of this.operators) {\r\n                operatorArray.push({\r\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\r\n                    \"amplitude\": operator.amplitude,\r\n                    \"envelope\": Config.envelopes[operator.envelope].name,\r\n                });\r\n            }\r\n            if (this.vibrato != 5) {\r\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\r\n            } else {\r\n                instrumentObject[\"vibrato\"] = \"custom\";\r\n            }\r\n            instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\r\n            instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\r\n            instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\r\n            instrumentObject[\"feedbackEnvelope\"] = Config.envelopes[this.feedbackEnvelope].name;\r\n            instrumentObject[\"operators\"] = operatorArray;\r\n        } else if (this.type == InstrumentType.mod) {\r\n            instrumentObject[\"modChannels\"] = [];\r\n            instrumentObject[\"modInstruments\"] = [];\r\n            instrumentObject[\"modSettings\"] = [];\r\n            instrumentObject[\"modStatuses\"] = [];\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\r\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\r\n                instrumentObject[\"modSettings\"][mod] = this.modSettings[mod];\r\n                instrumentObject[\"modStatuses\"][mod] = this.modStatuses[mod];\r\n            }\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type\");\r\n        }\r\n        return instrumentObject;\r\n    }\r\n\r\n    public fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean): void {\r\n        if (instrumentObject == undefined) instrumentObject = {};\r\n\r\n        let type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\r\n//         if (type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip); // TODO: a\r\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\r\n\r\n        if (instrumentObject[\"preset\"] != undefined) {\r\n            this.preset = instrumentObject[\"preset\"] >>> 0;\r\n        }\r\n\r\n        if (instrumentObject[\"volume\"] != undefined) {\r\n            this.volume = clamp(-Config.volumeRange / 2, Config.volumeRange / 2, instrumentObject[\"volume\"] | 0);\r\n        } else {\r\n            this.volume = 0;\r\n        }\r\n\r\n        if (instrumentObject[\"pan\"] != undefined) {\r\n            this.pan = clamp(0, Config.panMax + 1, Math.round(Config.panCenter + (instrumentObject[\"pan\"] | 0) * Config.panCenter / 100));\r\n        } else {\r\n            this.pan = Config.panCenter;\r\n        }\r\n\r\n        if (instrumentObject[\"panDelay\"] != undefined) {\r\n            this.panDelay = (instrumentObject[\"panDelay\"] | 0);\r\n        } else {\r\n            this.panDelay = 10;\r\n        }\r\n\r\n        if (instrumentObject[\"detune\"] != undefined) {\r\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\r\n        }\r\n        else {\r\n            this.detune = 0;\r\n        }\r\n\r\n        const oldTransitionNames: Dictionary<number> = { \"binary\": 0, \"sudden\": 1, \"smooth\": 2 };\r\n        const transitionObject = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so try that too.\r\n        this.transition = oldTransitionNames[transitionObject] != undefined ? oldTransitionNames[transitionObject] : Config.transitions.findIndex(transition => transition.name == transitionObject);\r\n        if (this.transition == -1) this.transition = 1;\r\n\r\n        this.effects = Config.effectsNames.indexOf(instrumentObject[\"effects\"]);\r\n        if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\r\n\r\n        if (instrumentObject[\"filterCutoffHz\"] != undefined) {\r\n            this.filterCutoff = clamp(0, Config.filterCutoffRange, Math.round((Config.filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / Config.filterCutoffMaxHz) / Math.LN2));\r\n        } else {\r\n            this.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\r\n        }\r\n        if (instrumentObject[\"filterResonance\"] != undefined) {\r\n            this.filterResonance = clamp(0, Config.filterResonanceRange, Math.round((Config.filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\r\n        } else {\r\n            this.filterResonance = 0;\r\n        }\r\n        this.filterEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"filterEnvelope\"]);\r\n        if (this.filterEnvelope == -1) this.filterEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n\r\n        if (instrumentObject[\"filter\"] != undefined) {\r\n            const legacyToCutoff: number[] = [20, 12, 6, 0, 16, 10, 4];\r\n            const legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n            const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n            const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\r\n            let legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\r\n            if (legacyFilter == -1) legacyFilter = 0;\r\n            this.filterCutoff = legacyToCutoff[legacyFilter];\r\n            this.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n            this.filterResonance = 0;\r\n        }\r\n\r\n        const legacyEffectNames: ReadonlyArray<string> = [\"none\", \"vibrato light\", \"vibrato delayed\", \"vibrato heavy\"];\r\n        if (this.type == InstrumentType.noise) {\r\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            if (this.chipNoise == -1) this.chipNoise = 1;\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 2;\r\n\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            if (instrumentObject[\"spectrum\"] != undefined) {\r\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                    this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\r\n                }\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 0;\r\n\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            if (instrumentObject[\"drums\"] != undefined) {\r\n                for (let j: number = 0; j < Config.drumCount; j++) {\r\n                    const drum: any = instrumentObject[\"drums\"][j];\r\n                    if (drum == undefined) continue;\r\n\r\n                    if (drum[\"filterEnvelope\"] != undefined) {\r\n                        this.drumsetEnvelopes[j] = Config.envelopes.findIndex(envelope => envelope.name == drum[\"filterEnvelope\"]);\r\n                        if (this.drumsetEnvelopes[j] == -1) this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index;\r\n                    }\r\n                    if (drum[\"spectrum\"] != undefined) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            if (instrumentObject[\"harmonics\"] != undefined) {\r\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                    this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\r\n                }\r\n            }\r\n\r\n            if (instrumentObject[\"interval\"] != undefined) {\r\n                this.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 0;\r\n        } else if (this.type == InstrumentType.pwm) {\r\n            if (instrumentObject[\"pulseWidth\"] != undefined) {\r\n                this.pulseWidth = clamp(0, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\r\n            } else {\r\n                this.pulseWidth = Config.pulseWidthRange;\r\n            }\r\n\r\n            if (instrumentObject[\"pulseEnvelope\"] != undefined) {\r\n                this.pulseEnvelope = Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"pulseEnvelope\"]);\r\n                if (this.pulseEnvelope == -1) this.pulseEnvelope = Config.envelopes.dictionary[\"steady\"].index;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 0;\r\n        } else if (this.type == InstrumentType.chip) {\r\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\r\n            this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\r\n            if (this.chipWave == -1) this.chipWave = 1;\r\n\r\n            if (instrumentObject[\"interval\"] != undefined) {\r\n                this.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            } else if (instrumentObject[\"chorus\"] != undefined) {\r\n                const legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n                this.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            } else if (instrumentObject[\"effect\"] != undefined) {\r\n                this.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n                if (this.vibrato == -1) this.vibrato = 0;\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 2;\r\n\r\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n            if (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n                this.interval = 2;\r\n                this.chord = 3;\r\n            }\r\n        } else if (this.type == InstrumentType.fm) {\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            } else if (instrumentObject[\"effect\"] != undefined) {\r\n                this.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n                if (this.vibrato == -1) this.vibrato = 0;\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 3;\r\n\r\n            this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\r\n            if (this.algorithm == -1) this.algorithm = 0;\r\n            this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\r\n            if (this.feedbackType == -1) this.feedbackType = 0;\r\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\r\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\r\n            } else {\r\n                this.feedbackAmplitude = 0;\r\n            }\r\n\r\n            const legacyEnvelopeNames: Dictionary<number> = { \"pluck 1\": 6, \"pluck 2\": 7, \"pluck 3\": 8 };\r\n            this.feedbackEnvelope = legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] != undefined ? legacyEnvelopeNames[instrumentObject[\"feedbackEnvelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == instrumentObject[\"feedbackEnvelope\"]);\r\n            if (this.feedbackEnvelope == -1) this.feedbackEnvelope = 0;\r\n\r\n            for (let j: number = 0; j < Config.operatorCount; j++) {\r\n                const operator: Operator = this.operators[j];\r\n                let operatorObject: any = undefined;\r\n                if (instrumentObject[\"operators\"]) operatorObject = instrumentObject[\"operators\"][j];\r\n                if (operatorObject == undefined) operatorObject = {};\r\n\r\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\r\n                if (operator.frequency == -1) operator.frequency = 0;\r\n                if (operatorObject[\"amplitude\"] != undefined) {\r\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\r\n                } else {\r\n                    operator.amplitude = 0;\r\n                }\r\n                operator.envelope = legacyEnvelopeNames[operatorObject[\"envelope\"]] != undefined ? legacyEnvelopeNames[operatorObject[\"envelope\"]] : Config.envelopes.findIndex(envelope => envelope.name == operatorObject[\"envelope\"]);\r\n                if (operator.envelope == -1) operator.envelope = 0;\r\n            }\r\n        } else if (this.type == InstrumentType.customChipWave) {\r\n            if (instrumentObject[\"interval\"] != undefined) {\r\n                this.interval = Config.intervals.findIndex(interval => interval.name == instrumentObject[\"interval\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            } else if (instrumentObject[\"chorus\"] != undefined) {\r\n                const legacyChorusNames: Dictionary<number> = { \"fifths\": 5, \"octaves\": 6 };\r\n                this.interval = legacyChorusNames[instrumentObject[\"chorus\"]] != undefined ? legacyChorusNames[instrumentObject[\"chorus\"]] : Config.intervals.findIndex(interval => interval.name == instrumentObject[\"chorus\"]);\r\n                if (this.interval == -1) this.interval = 0;\r\n            }\r\n\r\n            if (instrumentObject[\"vibrato\"] != undefined) {\r\n                this.vibrato = Config.vibratos.findIndex(vibrato => vibrato.name == instrumentObject[\"vibrato\"]);\r\n                if (this.vibrato == -1) this.vibrato = Config.vibratos.length; //custom\r\n                if (this.vibrato == Config.vibratos.length) {\r\n                    this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\r\n                    this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\r\n                    this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\r\n                    this.vibratoType = instrumentObject[\"vibratoType\"];\r\n                }\r\n                else { // Set defaults for the vibrato profile\r\n                    this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\r\n                    this.vibratoDelay = Config.vibratos[this.vibrato].delayParts;\r\n                    this.vibratoSpeed = 10; // default;\r\n                    this.vibratoType = Config.vibratos[this.vibrato].type;\r\n                }\r\n            } else if (instrumentObject[\"effect\"] != undefined) {\r\n                this.vibrato = legacyEffectNames.indexOf(instrumentObject[\"effect\"]);\r\n                if (this.vibrato == -1) this.vibrato = 0;\r\n            }\r\n\r\n            this.chord = Config.chords.findIndex(chord => chord.name == instrumentObject[\"chord\"]);\r\n            if (this.chord == -1) this.chord = 2;\r\n\r\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\r\n            if (instrumentObject[\"chorus\"] == \"custom harmony\") {\r\n                this.interval = 2;\r\n                this.chord = 3;\r\n            }\r\n\r\n            if (instrumentObject[\"customChipWave\"]) {\r\n\r\n                for (let i: number = 0; i < 64; i++) {\r\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\r\n                }\r\n\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    sum += this.customChipWave[i];\r\n                }\r\n                const average: number = sum / this.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = this.customChipWave[i] - average;\r\n                    this.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                this.customChipWaveIntegral[64] = 0.0;\r\n            }\r\n\r\n        } else if (this.type == InstrumentType.mod) {\r\n            if (instrumentObject[\"modChannels\"] != undefined) {\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\r\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\r\n                    this.modSettings[mod] = instrumentObject[\"modSettings\"][mod];\r\n                    this.modStatuses[mod] = instrumentObject[\"modStatuses\"][mod];\r\n                }\r\n            }\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type.\");\r\n        }\r\n\r\n        if (this.type != InstrumentType.mod) {\r\n            // Arpeggio speed\r\n            if (this.chord == 2 && instrumentObject[\"arpeggioSpeed\"] != undefined) {\r\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\r\n            }\r\n            else {\r\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\r\n            }\r\n\r\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\r\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\r\n            }\r\n            else {\r\n                this.fastTwoNoteArp = useFastTwoNoteArp;\r\n            }\r\n\r\n            if (instrumentObject[\"tieNoteTransition\"] != undefined) {\r\n                this.tieNoteTransition = instrumentObject[\"tieNoteTransition\"];\r\n            }\r\n            else {\r\n                this.tieNoteTransition = false;\r\n            }\r\n\r\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\r\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\r\n            }\r\n            else {\r\n                this.clicklessTransition = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    public static frequencyFromPitch(pitch: number): number {\r\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\r\n    }\r\n\r\n    public static drumsetIndexReferenceDelta(index: number): number {\r\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\r\n    }\r\n\r\n    private static _drumsetIndexToSpectrumOctave(index: number) {\r\n        return 15 + Math.log(Instrument.drumsetIndexReferenceDelta(index)) / Math.LN2;\r\n    }\r\n\r\n    public warmUp(): void {\r\n        this.LFOtime = 0;\r\n        this.nextLFOtime = 0;\r\n        this.arpTime = 0;\r\n        if (this.type == InstrumentType.noise) {\r\n            getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n        } else if (this.type == InstrumentType.harmonics) {\r\n            this.harmonicsWave.getCustomWave();\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            this.spectrumWave.getCustomWave(8);\r\n        } else if (this.type == InstrumentType.drumset) {\r\n            for (let i: number = 0; i < Config.drumCount; i++) {\r\n                this.drumsetSpectrumWaves[i].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    public getDrumWave(): Float32Array {\r\n        if (this.type == InstrumentType.noise) {\r\n            return getDrumWave(this.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\r\n        } else if (this.type == InstrumentType.spectrum) {\r\n            return this.spectrumWave.getCustomWave(8);\r\n        } else {\r\n            throw new Error(\"Unhandled instrument type in getDrumWave\");\r\n        }\r\n    }\r\n\r\n    public getDrumsetWave(pitch: number): Float32Array {\r\n        if (this.type == InstrumentType.drumset) {\r\n            return this.drumsetSpectrumWaves[pitch].getCustomWave(Instrument._drumsetIndexToSpectrumOctave(pitch));\r\n        } else {\r\n            throw new Error(\"Unhandled instrument type in getDrumWave\");\r\n        }\r\n    }\r\n\r\n    public getTransition(): Transition {\r\n        return this.type == InstrumentType.drumset ? Config.transitions.dictionary[\"hard fade\"] :\r\n            this.type == InstrumentType.mod ? Config.transitions.dictionary[\"seamless\"] : Config.transitions[this.transition];\r\n    }\r\n    public getChord(): Chord {\r\n        return this.type == InstrumentType.drumset ? Config.chords.dictionary[\"harmony\"] : Config.chords[this.chord];\r\n    }\r\n    public getFilterCutoffOctaves(): number {\r\n        return this.type == InstrumentType.drumset ? 0 : (this.filterCutoff - (Config.filterCutoffRange - 1)) * 0.5;\r\n    }\r\n    public getFilterIsFirstOrder(): boolean {\r\n        return this.type == InstrumentType.drumset ? false : this.filterResonance == 0;\r\n    }\r\n    public getFilterResonance(): number {\r\n        return this.type == InstrumentType.drumset ? 1 : this.filterResonance;\r\n    }\r\n    public getFilterEnvelope(): Envelope {\r\n        if (this.type == InstrumentType.drumset) throw new Error(\"Can't getFilterEnvelope() for drumset.\");\r\n        return Config.envelopes[this.filterEnvelope];\r\n    }\r\n    public getDrumsetEnvelope(pitch: number): Envelope {\r\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\r\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\r\n    }\r\n}\r\n\r\nexport enum ModStatus {\r\n    msForPitch = 0,\r\n    msForNoise = 1,\r\n    msForSong = 2,\r\n    msNone = 3,\r\n}\r\n\r\nexport enum ModSetting {\r\n    mstNone = 0,\r\n    mstSongVolume = 1,\r\n    mstTempo = 2,\r\n    mstReverb = 3,\r\n    mstNextBar = 4,\r\n    mstInsVolume = 5,\r\n    mstPan = 6,\r\n    mstFilterCut = 7,\r\n    mstFilterPeak = 8,\r\n    mstFMSlider1 = 9,\r\n    mstFMSlider2 = 10,\r\n    mstFMSlider3 = 11,\r\n    mstFMSlider4 = 12,\r\n    mstFMFeedback = 13,\r\n    mstPulseWidth = 14,\r\n    mstDetune = 15,\r\n    mstVibratoDepth = 16,\r\n    mstSongDetune = 17,\r\n    mstVibratoSpeed = 18,\r\n    mstVibratoDelay = 19,\r\n    mstArpeggioSpeed = 20,\r\n    mstPanDelay = 21,\r\n    mstResetArpeggio = 22,\r\n    mstMaxValue = 23,\r\n}\r\n\r\nexport class Channel {\r\n    public octave: number = 0;\r\n    public readonly instruments: Instrument[] = [];\r\n    public readonly patterns: Pattern[] = [];\r\n    public readonly bars: number[] = [];\r\n    public muted: boolean = false;\r\n    public name: string = \"\";\r\n}\r\n\r\nexport class Song {\r\n    private static readonly _format: string = \"BeepBox\";\r\n    private static readonly _oldestBeepboxVersion: number = 2;\r\n    private static readonly _latestBeepboxVersion: number = 8;\r\n    private static readonly _oldestJummBoxVersion: number = 1;\r\n    private static readonly _latestJummBoxVersion: number = 4;\r\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox.\r\n    private static readonly _variant = 0x6A; //\"j\" ~ jummbox\r\n\r\n    public title: string;\r\n    public scale: number;\r\n    public key: number;\r\n    public tempo: number;\r\n    public reverb: number;\r\n    public beatsPerBar: number;\r\n    public barCount: number;\r\n    public patternsPerChannel: number;\r\n    public rhythm: number;\r\n    public instrumentsPerChannel: number;\r\n    public loopStart: number;\r\n    public loopLength: number;\r\n    public pitchChannelCount: number;\r\n    public noiseChannelCount: number;\r\n    public modChannelCount: number;\r\n    public readonly channels: Channel[] = [];\r\n    public limitDecay: number = 4.0;\r\n    public limitRise: number = 4000.0;\r\n    public compressionThreshold: number = 1.0;\r\n    public limitThreshold: number = 1.0;\r\n    public compressionRatio: number = 1.0;\r\n    public limitRatio: number = 1.0;\r\n    public masterGain: number = 1.0;\r\n    public inVolumeCap: number = 0.0;\r\n    public outVolumeCap: number = 0.0;\r\n\r\n    // Maximum value possible for the mod (total number of possible positions)\r\n    public mstMaxVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n        [ModSetting.mstNone, 6],\r\n        [ModSetting.mstSongVolume, 100],\r\n        [ModSetting.mstTempo, Config.tempoMax - Config.tempoMin],\r\n        [ModSetting.mstReverb, Config.reverbRange - 1],\r\n        [ModSetting.mstNextBar, 1],\r\n        [ModSetting.mstInsVolume, Config.volumeRange],\r\n        [ModSetting.mstPan, Config.panMax],\r\n        [ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n        [ModSetting.mstFilterPeak, Config.filterResonanceRange - 1],\r\n        [ModSetting.mstFMSlider1, 15],\r\n        [ModSetting.mstFMSlider2, 15],\r\n        [ModSetting.mstFMSlider3, 15],\r\n        [ModSetting.mstFMSlider4, 15],\r\n        [ModSetting.mstFMFeedback, 15],\r\n        [ModSetting.mstPulseWidth, Config.pulseWidthRange],\r\n        [ModSetting.mstDetune, Config.detuneMax - Config.detuneMin],\r\n        [ModSetting.mstVibratoDepth, 50],\r\n        [ModSetting.mstSongDetune, Config.songDetuneMax - Config.songDetuneMin],\r\n        [ModSetting.mstVibratoSpeed, 30],\r\n        [ModSetting.mstVibratoDelay, 50],\r\n        [ModSetting.mstArpeggioSpeed, 50],\r\n        [ModSetting.mstPanDelay, 20],\r\n        [ModSetting.mstResetArpeggio, 1],\r\n        [ModSetting.mstMaxValue, 6],\r\n    ]\r\n    );\r\n\r\n    // When creating a new note, this is the value to set a mod note to (generally the most \"neutral\" value possible)\r\n    public mstNewNoteVols: Map<ModSetting, number> = new Map<ModSetting, number>([\r\n        [ModSetting.mstNone, 6],\r\n        [ModSetting.mstSongVolume, 100],\r\n        [ModSetting.mstTempo, Math.ceil((Config.tempoMax - Config.tempoMin) / 2)],\r\n        [ModSetting.mstReverb, 0],\r\n        [ModSetting.mstNextBar, 1],\r\n        [ModSetting.mstInsVolume, Math.ceil(Config.volumeRange / 2)],\r\n        [ModSetting.mstPan, Math.ceil(Config.panMax / 2)],\r\n        [ModSetting.mstFilterCut, Config.filterCutoffRange - 1],\r\n        [ModSetting.mstFilterPeak, 0],\r\n        [ModSetting.mstFMSlider1, 15],\r\n        [ModSetting.mstFMSlider2, 15],\r\n        [ModSetting.mstFMSlider3, 15],\r\n        [ModSetting.mstFMSlider4, 15],\r\n        [ModSetting.mstFMFeedback, 15],\r\n        [ModSetting.mstPulseWidth, Math.ceil(Config.pulseWidthRange)],\r\n        [ModSetting.mstDetune, Math.ceil((Config.detuneMax - Config.detuneMin) / 2)],\r\n        [ModSetting.mstVibratoDepth, 0],\r\n        [ModSetting.mstSongDetune, Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2)],\r\n        [ModSetting.mstVibratoSpeed, 0],\r\n        [ModSetting.mstVibratoDelay, 0],\r\n        [ModSetting.mstArpeggioSpeed, 10],\r\n        [ModSetting.mstPanDelay, 10],\r\n        [ModSetting.mstResetArpeggio, 1],\r\n        [ModSetting.mstMaxValue, 6],\r\n    ])\r\n\r\n    constructor(string?: string) {\r\n        if (string != undefined) {\r\n            this.fromBase64String(string);\r\n        } else {\r\n            this.initToDefault(true);\r\n        }\r\n    }\r\n\r\n    public modValueToReal(value: number, setting: ModSetting): number {\r\n        switch (setting) {\r\n            case ModSetting.mstTempo:\r\n                value += Config.tempoMin;\r\n                break;\r\n            case ModSetting.mstInsVolume:\r\n                value -= Config.volumeRange / 2.0;\r\n                break;\r\n            case ModSetting.mstDetune:\r\n                value += Config.detuneMin;\r\n                break;\r\n            case ModSetting.mstSongDetune:\r\n                value += Config.songDetuneMin;\r\n                break;\r\n            case ModSetting.mstFilterCut:\r\n            case ModSetting.mstFilterPeak:\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstPan:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstNextBar:\r\n            case ModSetting.mstFMSlider1:\r\n            case ModSetting.mstFMSlider2:\r\n            case ModSetting.mstFMSlider3:\r\n            case ModSetting.mstFMSlider4:\r\n            case ModSetting.mstFMFeedback:\r\n            case ModSetting.mstPulseWidth:\r\n            case ModSetting.mstVibratoDepth:\r\n            case ModSetting.mstVibratoSpeed:\r\n            case ModSetting.mstVibratoDelay:\r\n            case ModSetting.mstArpeggioSpeed:\r\n            case ModSetting.mstPanDelay:\r\n            case ModSetting.mstResetArpeggio:\r\n            case ModSetting.mstNone:\r\n            default:\r\n                break;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    public isSettingForSong(setting: ModSetting): boolean {\r\n        switch (setting) {\r\n            case ModSetting.mstTempo:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstNextBar:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    public realToModValue(value: number, setting: ModSetting): number {\r\n        switch (setting) {\r\n            case ModSetting.mstTempo:\r\n                value -= Config.tempoMin;\r\n                break;\r\n            case ModSetting.mstInsVolume:\r\n                value += Config.volumeRange / 2.0;\r\n                break;\r\n            case ModSetting.mstDetune:\r\n                value -= Config.detuneMin;\r\n                break;\r\n            case ModSetting.mstSongDetune:\r\n                value -= Config.songDetuneMin;\r\n                break;\r\n            case ModSetting.mstFilterCut:\r\n            case ModSetting.mstFilterPeak:\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstPan:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstNextBar:\r\n            case ModSetting.mstFMSlider1:\r\n            case ModSetting.mstFMSlider2:\r\n            case ModSetting.mstFMSlider3:\r\n            case ModSetting.mstFMSlider4:\r\n            case ModSetting.mstFMFeedback:\r\n            case ModSetting.mstPulseWidth:\r\n            case ModSetting.mstVibratoDepth:\r\n            case ModSetting.mstVibratoSpeed:\r\n            case ModSetting.mstVibratoDelay:\r\n            case ModSetting.mstArpeggioSpeed:\r\n            case ModSetting.mstPanDelay:\r\n            case ModSetting.mstResetArpeggio:\r\n            case ModSetting.mstNone:\r\n            default:\r\n                break;\r\n        }\r\n        return value;\r\n    }\r\n\r\n    // Returns the ideal new note volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\r\n    public getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let cap: number | undefined = this.mstNewNoteVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n            \r\n            // For tempo, actually use user defined tempo\r\n            if (this.channels[modChannel].instruments[modInstrument].modSettings[modCount] == ModSetting.mstTempo) {\r\n                cap = this.realToModValue(this.tempo, ModSetting.mstTempo);\r\n            }\r\n            \r\n            if (cap != undefined)\r\n                return cap;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n\r\n    public getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\r\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\r\n            return 6;\r\n        else {\r\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\r\n            modCount = Config.modCount - modCount - 1;\r\n\r\n            let cap: number | undefined = this.mstMaxVols.get(this.channels[modChannel].instruments[modInstrument].modSettings[modCount]);\r\n            if (cap != undefined)\r\n                return cap;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n    public getVolumeCapForSetting = (isMod: boolean, modSetting: ModSetting): number => {\r\n        if (!isMod)\r\n            return 6;\r\n        else {\r\n            let cap: number | undefined = this.mstMaxVols.get(modSetting);\r\n            if (cap != undefined)\r\n                return cap;\r\n            else\r\n                return 6;\r\n        }\r\n    }\r\n\r\n    public getChannelCount(): number {\r\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\r\n    }\r\n\r\n    public getChannelIsNoise(channel: number): boolean {\r\n        return (channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public getChannelIsMod(channel: number): boolean {\r\n        return (channel >= this.pitchChannelCount + this.noiseChannelCount);\r\n    }\r\n\r\n    public initToDefault(andResetChannels: boolean = true): void {\r\n        this.scale = 0;\r\n        this.key = 0;\r\n        this.loopStart = 0;\r\n        this.loopLength = 4;\r\n        this.tempo = 150;\r\n        this.reverb = 0;\r\n        this.beatsPerBar = 8;\r\n        this.barCount = 16;\r\n        this.patternsPerChannel = 8;\r\n        this.rhythm = 1;\r\n        this.instrumentsPerChannel = 1;\r\n\r\n        this.title = \"Unnamed\";\r\n        document.title = EditorConfig.versionDisplayName;\r\n\r\n        if (andResetChannels) {\r\n            this.pitchChannelCount = 3;\r\n            this.noiseChannelCount = 1;\r\n            this.modChannelCount = 0;\r\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                if (this.channels.length <= channelIndex) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                const channel: Channel = this.channels[channelIndex];\r\n                channel.octave = Math.max(3 - channelIndex, 0); // [3, 2, 1, 0, 0, ...]; Descending octaves with drums at zero in last channel and onward.\r\n\r\n                for (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\r\n                    if (channel.patterns.length <= pattern) {\r\n                        channel.patterns[pattern] = new Pattern();\r\n                    } else {\r\n                        channel.patterns[pattern].reset();\r\n                    }\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\r\n                const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\r\n                for (let instrument = 0; instrument < this.instrumentsPerChannel; instrument++) {\r\n                    if (channel.instruments.length <= instrument) {\r\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\r\n                    }\r\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\r\n                }\r\n                channel.instruments.length = this.instrumentsPerChannel;\r\n\r\n                for (let bar = 0; bar < this.barCount; bar++) {\r\n                    channel.bars[bar] = bar < 4 ? 1 : 0;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n            }\r\n            this.channels.length = this.getChannelCount();\r\n        }\r\n    }\r\n\r\n    public toBase64String(): string {\r\n        let bits: BitFieldWriter;\r\n        let buffer: number[] = [];\r\n\r\n        buffer.push(Song._variant);\r\n        buffer.push(base64IntToCharCode[Song._latestJummBoxVersion]);\r\n\r\n        buffer.push(SongTagCode.songTitle);\r\n\r\n        // Length of the song name string\r\n        var encodedSongTitle: string = encodeURIComponent(this.title);\r\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\r\n\r\n        // Actual encoded string follows\r\n        for (let i: number = 0; i < encodedSongTitle.length; i++) {\r\n            buffer.push(encodedSongTitle.charCodeAt(i));\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\r\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\r\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key]);\r\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\r\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\r\n        buffer.push(SongTagCode.reverb, base64IntToCharCode[this.reverb]);\r\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\r\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\r\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[this.instrumentsPerChannel - 1]);\r\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\r\n\r\n        // Push limiter settings, but only if they aren't the default!\r\n        buffer.push(SongTagCode.limiterSettings);\r\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\r\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\r\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\r\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\r\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\r\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\r\n        }\r\n        else {\r\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelNames);\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            // Length of the channel name string\r\n            var encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\r\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\r\n\r\n            // Actual encoded string follows\r\n            for (let i: number = 0; i < encodedChannelName.length; i++) {\r\n                buffer.push(encodedChannelName.charCodeAt(i));\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.channelOctave);\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            buffer.push(base64IntToCharCode[this.channels[channel].octave]);\r\n        }\r\n\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                const instrument: Instrument = this.channels[channel].instruments[i];\r\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\r\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\r\n                buffer.push(SongTagCode.panning, base64IntToCharCode[instrument.pan >> 6], base64IntToCharCode[instrument.pan & 0x3f]);\r\n                buffer.push(base64IntToCharCode[instrument.panDelay]); // Piggybacks after panning to reduce song tag code usage :P\r\n                buffer.push(SongTagCode.detune, base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3f]);\r\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\r\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effects]);\r\n\r\n\r\n                if (instrument.type != InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.transition, base64IntToCharCode[instrument.transition]);\r\n                    // Transition info follows transition song tag\r\n                    buffer.push(base64IntToCharCode[+instrument.tieNoteTransition]);\r\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\r\n                    buffer.push(SongTagCode.filterCutoff, base64IntToCharCode[instrument.filterCutoff]);\r\n                    buffer.push(SongTagCode.filterResonance, base64IntToCharCode[instrument.filterResonance]);\r\n                    buffer.push(SongTagCode.filterEnvelope, base64IntToCharCode[instrument.filterEnvelope]);\r\n                    buffer.push(SongTagCode.chord, base64IntToCharCode[instrument.chord]);\r\n                }\r\n\r\n                if (instrument.type == InstrumentType.chip) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.fm) {\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                    buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\r\n                    buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\r\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\r\n                    buffer.push(SongTagCode.feedbackEnvelope, base64IntToCharCode[instrument.feedbackEnvelope]);\r\n\r\n                    buffer.push(SongTagCode.operatorFrequencies);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorAmplitudes);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\r\n                    }\r\n                    buffer.push(SongTagCode.operatorEnvelopes);\r\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                        buffer.push(base64IntToCharCode[instrument.operators[o].envelope]);\r\n                    }\r\n                } else if (instrument.type == InstrumentType.customChipWave) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipWave]);\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n                    buffer.push(SongTagCode.customChipWave);\r\n                    // Push custom wave values\r\n                    for (let j: number = 0; j < 64; j++) {\r\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\r\n                    }\r\n                } else if (instrument.type == InstrumentType.noise) {\r\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.spectrum) {\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    buffer.push(SongTagCode.filterEnvelope);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\r\n                    }\r\n\r\n                    buffer.push(SongTagCode.spectrum);\r\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\r\n                        }\r\n                    }\r\n                    spectrumBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.harmonics) {\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n\r\n                    buffer.push(SongTagCode.harmonics);\r\n                    const harmonicsBits: BitFieldWriter = new BitFieldWriter();\r\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\r\n                    }\r\n                    harmonicsBits.encodeBase64(buffer);\r\n                } else if (instrument.type == InstrumentType.pwm) {\r\n                    buffer.push(SongTagCode.vibrato, base64IntToCharCode[instrument.vibrato]);\r\n                    // Custom vibrato settings\r\n                    if (instrument.vibrato == Config.vibratos.length) {\r\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoDelay]);\r\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\r\n                    }\r\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\r\n                    if (instrument.chord == 2) {\r\n                        buffer.push(SongTagCode.arpeggioSpeed, base64IntToCharCode[instrument.arpeggioSpeed]);\r\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\r\n                    }\r\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth], base64IntToCharCode[instrument.pulseEnvelope]);\r\n                    buffer.push(SongTagCode.interval, base64IntToCharCode[instrument.interval]);\r\n                } else if (instrument.type == InstrumentType.mod) {\r\n                    // Handled down below. Could be moved, but meh.\r\n                }\r\n                else {\r\n                    throw new Error(\"Unknown instrument type.\");\r\n                }\r\n            }\r\n        }\r\n\r\n        buffer.push(SongTagCode.bars);\r\n        bits = new BitFieldWriter();\r\n        let neededBits: number = 0;\r\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) for (let i: number = 0; i < this.barCount; i++) {\r\n            bits.write(neededBits, this.channels[channel].bars[i]);\r\n        }\r\n        bits.encodeBase64(buffer);\r\n\r\n        buffer.push(SongTagCode.patterns);\r\n        bits = new BitFieldWriter();\r\n        const shapeBits: BitFieldWriter = new BitFieldWriter();\r\n        let neededInstrumentBits: number = 0;\r\n        while ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n            const isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n            // Some info about modulator settings immediately follows in mod channels.\r\n            if (isModChannel) {\r\n                for (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n                    let instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        const modStatus: ModStatus = instrument.modStatuses[mod];\r\n                        const modChannel: number = instrument.modChannels[mod];\r\n                        const modInstrument: number = instrument.modInstruments[mod];\r\n                        const modSetting: number = instrument.modSettings[mod];\r\n\r\n                        bits.write(2, modStatus);\r\n\r\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n                        if (modStatus == ModStatus.msForPitch || modStatus == ModStatus.msForNoise) {\r\n                            bits.write(8, modChannel);\r\n                            bits.write(neededInstrumentBits, modInstrument);\r\n                        }\r\n\r\n                        // Mod setting is only used if the status isn't \"none\".\r\n                        if (modStatus != ModStatus.msNone) {\r\n                            bits.write(6, modSetting);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * 12;\r\n            let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : 12) + octaveOffset;\r\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n            const recentShapes: any[] = [];\r\n\r\n            for (let i: number = 0; i < recentPitches.length; i++) {\r\n                recentPitches[i] += octaveOffset;\r\n            }\r\n            for (const pattern of this.channels[channel].patterns) {\r\n                bits.write(neededInstrumentBits, pattern.instrument);\r\n\r\n                if (pattern.notes.length > 0) {\r\n                    bits.write(1, 1);\r\n\r\n                    let curPart: number = 0;\r\n                    for (const note of pattern.notes) {\r\n\r\n                        // For mod channels, a negative offset may be necessary.\r\n                        if (note.start < curPart && isModChannel) {\r\n                            bits.write(2, 0); // rest, then...\r\n                            bits.write(1, 1); // negative offset\r\n                            bits.writePartDuration(curPart - note.start);\r\n                        }\r\n\r\n                        if (note.start > curPart) {\r\n                            bits.write(2, 0); // rest, then...\r\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\r\n                            bits.writePartDuration(note.start - curPart);\r\n                        }\r\n\r\n                        shapeBits.clear();\r\n\r\n                        // Old format was:\r\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\r\n                        // New format is:\r\n                        //      0: 1 pitch\r\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                        if (note.pitches.length == 1) {\r\n                            shapeBits.write(1, 0);\r\n                        } else {\r\n                            shapeBits.write(1, 1);\r\n                            shapeBits.write(3, note.pitches.length - 2);\r\n                        }\r\n\r\n                        shapeBits.writePinCount(note.pins.length - 1);\r\n\r\n                        if (!isModChannel) {\r\n                            shapeBits.write(3, note.pins[0].volume); // volume\r\n                        }\r\n                        else {\r\n                            shapeBits.write(9, note.pins[0].volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n                        }\r\n\r\n                        let shapePart: number = 0;\r\n                        let startPitch: number = note.pitches[0];\r\n                        let currentPitch: number = startPitch;\r\n                        const pitchBends: number[] = [];\r\n                        for (let i: number = 1; i < note.pins.length; i++) {\r\n                            const pin: NotePin = note.pins[i];\r\n                            const nextPitch: number = startPitch + pin.interval;\r\n                            if (currentPitch != nextPitch) {\r\n                                shapeBits.write(1, 1);\r\n                                pitchBends.push(nextPitch);\r\n                                currentPitch = nextPitch;\r\n                            } else {\r\n                                shapeBits.write(1, 0);\r\n                            }\r\n                            shapeBits.writePartDuration(pin.time - shapePart);\r\n                            shapePart = pin.time;\r\n\r\n                            if (!isModChannel) {\r\n                                shapeBits.write(3, pin.volume); // volume\r\n                            }\r\n                            else {\r\n                                shapeBits.write(9, pin.volume); // Modulator value. 9 bits for now = 512 max mod value?\r\n                            }\r\n                        }\r\n\r\n                        const shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\r\n                        const shapeIndex: number = recentShapes.indexOf(shapeString);\r\n                        if (shapeIndex == -1) {\r\n                            bits.write(2, 1); // new shape\r\n                            bits.concat(shapeBits);\r\n                        } else {\r\n                            bits.write(1, 1); // old shape\r\n                            bits.writeLongTail(0, 0, shapeIndex);\r\n                            recentShapes.splice(shapeIndex, 1);\r\n                        }\r\n                        recentShapes.unshift(shapeString);\r\n                        if (recentShapes.length > 10) recentShapes.pop();\r\n\r\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\r\n                        for (let i: number = 0; i < allPitches.length; i++) {\r\n                            const pitch: number = allPitches[i];\r\n                            const pitchIndex: number = recentPitches.indexOf(pitch);\r\n                            if (pitchIndex == -1) {\r\n                                let interval: number = 0;\r\n                                let pitchIter: number = lastPitch;\r\n                                if (pitchIter < pitch) {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter++;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\r\n                                    }\r\n                                } else {\r\n                                    while (pitchIter != pitch) {\r\n                                        pitchIter--;\r\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\r\n                                    }\r\n                                }\r\n                                bits.write(1, 0);\r\n                                bits.writePitchInterval(interval);\r\n                            } else {\r\n                                bits.write(1, 1);\r\n                                bits.write(4, pitchIndex);\r\n                                recentPitches.splice(pitchIndex, 1);\r\n                            }\r\n                            recentPitches.unshift(pitch);\r\n                            if (recentPitches.length > 16) recentPitches.pop();\r\n\r\n                            if (i == note.pitches.length - 1) {\r\n                                lastPitch = note.pitches[0];\r\n                            } else {\r\n                                lastPitch = pitch;\r\n                            }\r\n                        }\r\n                        curPart = note.end;\r\n                    }\r\n\r\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n                        bits.write(2, 0); // rest, then...\r\n                        if (isModChannel) bits.write(1, 0); // positive offset\r\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\r\n                    }\r\n                } else {\r\n                    bits.write(1, 0);\r\n                }\r\n\r\n            }\r\n        }\r\n        let stringLength: number = bits.lengthBase64();\r\n        let digits: number[] = [];\r\n        while (stringLength > 0) {\r\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\r\n            stringLength = stringLength >> 6;\r\n        }\r\n        buffer.push(base64IntToCharCode[digits.length]);\r\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\r\n        bits.encodeBase64(buffer);\r\n\r\n        const maxApplyArgs: number = 64000;\r\n        if (buffer.length < maxApplyArgs) {\r\n            // Note: Function.apply may break for long argument lists.\r\n            return String.fromCharCode.apply(null, buffer);\r\n        } else {\r\n            let result: string = \"\";\r\n            for (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\r\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\r\n            }\r\n            return result;\r\n        }\r\n    }\r\n\r\n    public fromBase64String(compressed: string): void {\r\n        if (compressed == null || compressed == \"\") {\r\n            this.initToDefault(true);\r\n            return;\r\n        }\r\n        let charIndex: number = 0;\r\n        // skip whitespace.\r\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\r\n        // skip hash mark.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\r\n        // if it starts with curly brace, treat it as JSON.\r\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\r\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)));\r\n            return;\r\n        }\r\n\r\n        const variantTest: number = compressed.charCodeAt(charIndex);\r\n        var variant: string = \"beepbox\";\r\n\r\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\r\n        if (variantTest == 0x6A) { //\"j\"\r\n            variant = \"jummbox\";\r\n            charIndex++;\r\n        }\r\n\r\n        const version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n        if (variant == \"beepbox\" && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\r\n        if (variant == \"jummbox\" && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\r\n\r\n        const beforeTwo: boolean = version < 2;\r\n        const beforeThree: boolean = version < 3;\r\n        const beforeFour: boolean = version < 4;\r\n        const beforeFive: boolean = version < 5;\r\n        const beforeSix: boolean = version < 6;\r\n        const beforeSeven: boolean = version < 7;\r\n        const beforeEight: boolean = version < 8;\r\n        this.initToDefault(variant == \"beepbox\" && beforeSix);\r\n\r\n        if (beforeThree && variant == \"beepbox\") {\r\n            // Originally, the only instrument transition was \"seamless\" and the only drum wave was \"retro\".\r\n            for (const channel of this.channels) channel.instruments[0].transition = 0;\r\n            this.channels[3].instruments[0].chipNoise = 0;\r\n        }\r\n\r\n        let instrumentChannelIterator: number = 0;\r\n        let instrumentIndexIterator: number = -1;\r\n        let toSetOctaves: number[] = [];\r\n        let command: number;\r\n        let channel: number;\r\n        let useSlowerArpSpeed: boolean = false;\r\n        let useFastTwoNoteArp: boolean = false;\r\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\r\n            case SongTagCode.songTitle: {\r\n                // Length of song name string\r\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\r\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\r\n\r\n                charIndex += songNameLength;\r\n            } break;\r\n            case SongTagCode.channelCount: {\r\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                if (variant == \"beepbox\" || beforeTwo) {\r\n                    // No mod channel support before jummbox v2\r\n                    this.modChannelCount = 0;\r\n                }\r\n                else {\r\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\r\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\r\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\r\n\r\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\r\n                    this.channels[channelIndex] = new Channel();\r\n                }\r\n                this.channels.length = this.getChannelCount();\r\n            } break;\r\n            case SongTagCode.scale: {\r\n                this.scale = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                // All the scales were jumbled around by Jummbox. Just convert to free.\r\n                if (variant == \"beepbox\") this.scale = 0;\r\n            } break;\r\n            case SongTagCode.key: {\r\n                if (beforeSeven && variant == \"beepbox\") {\r\n                    this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else {\r\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.loopStart: {\r\n                if (beforeFive && variant == \"beepbox\") {\r\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                }\r\n            } break;\r\n            case SongTagCode.loopEnd: {\r\n                if (beforeFive && variant == \"beepbox\") {\r\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n            } break;\r\n            case SongTagCode.tempo: {\r\n                if (beforeFour && variant == \"beepbox\") {\r\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\r\n            } break;\r\n            case SongTagCode.reverb: {\r\n                if (variant == \"beepbox\") {\r\n                    this.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 8;\r\n                    this.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n                }\r\n                else {\r\n                    this.reverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.reverb = clamp(0, Config.reverbRange, this.reverb);\r\n                }\r\n            } break;\r\n            case SongTagCode.beatCount: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\r\n                } else {\r\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\r\n            } break;\r\n            case SongTagCode.barCount: {\r\n                const barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\r\n                for (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n                    for (let bar = this.channels[channel].bars.length; bar < this.barCount; bar++) {\r\n                        this.channels[channel].bars[bar] = (bar < 4) ? 1 : 0;\r\n                    }\r\n                    this.channels[channel].bars.length = this.barCount;\r\n                }\r\n            } break;\r\n            case SongTagCode.patternCount: {\r\n                if (variant == \"beepbox\" && beforeEight) {\r\n                    this.patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                } else {\r\n                    this.patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                }\r\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, this.patternsPerChannel);\r\n                for (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n                    for (let pattern = this.channels[channel].patterns.length; pattern < this.patternsPerChannel; pattern++) {\r\n                        this.channels[channel].patterns[pattern] = new Pattern();\r\n                    }\r\n                    this.channels[channel].patterns.length = this.patternsPerChannel;\r\n                }\r\n            } break;\r\n            case SongTagCode.instrumentCount: {\r\n                const instrumentsPerChannel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\r\n                this.instrumentsPerChannel = validateRange(Config.instrumentsPerChannelMin, Config.instrumentsPerChannelMax, instrumentsPerChannel);\r\n                for (let channel = 0; channel < this.getChannelCount(); channel++) {\r\n                    const isNoiseChannel: boolean = channel >= this.pitchChannelCount && channel < this.pitchChannelCount + this.noiseChannelCount;\r\n                    const isModChannel: boolean = channel >= this.pitchChannelCount + this.noiseChannelCount;\r\n                    for (let instrumentIndex = this.channels[channel].instruments.length; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n                        this.channels[channel].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\r\n                    }\r\n                    this.channels[channel].instruments.length = this.instrumentsPerChannel;\r\n                    if (beforeSix && variant == \"beepbox\") {\r\n                        for (let instrumentIndex = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n                            this.channels[channel].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\r\n                        }\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.rhythm: {\r\n                this.rhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                // Port all arpeggio speeds over to match what they were, before arpeggio speed was decoupled from rhythm.\r\n                if (variant == \"jummbox\" && beforeThree || variant == \"beepbox\") {\r\n                    // These are all the rhythms that had 4 ticks/arpeggio instead of 3.\r\n                    if (this.rhythm == 0 || this.rhythm == 2) {\r\n                        useSlowerArpSpeed = true;\r\n                    }\r\n                    // Use faster two note arp on these rhythms\r\n                    if (this.rhythm >= 2) {\r\n                        useFastTwoNoteArp = true;\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.channelOctave: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    // Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n                    this.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    toSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n                } else {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        // Set octave properly after note values are calculated, for now clamp it to the max possible window\r\n                        this.channels[channel].octave = clamp(0, Config.maxScrollableOctaves + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        toSetOctaves[channel] = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, this.channels[channel].octave);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.startInstrument: {\r\n                instrumentIndexIterator++;\r\n                if (instrumentIndexIterator >= this.instrumentsPerChannel) {\r\n                    instrumentChannelIterator++;\r\n                    instrumentIndexIterator = 0;\r\n                }\r\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const instrumentType: number = clamp(0, InstrumentType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\r\n                if (useSlowerArpSpeed) {\r\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\r\n                }\r\n                if (useFastTwoNoteArp) {\r\n                    instrument.fastTwoNoteArp = true;\r\n                }\r\n            } break;\r\n            case SongTagCode.preset: {\r\n                const presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\r\n            } break;\r\n            case SongTagCode.wave: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    const channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channel].instruments[0].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            if (channel >= this.pitchChannelCount) {\r\n                                this.channels[channel].instruments[i].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            } else {\r\n                                this.channels[channel].instruments[i].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                            }\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\r\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\r\n                    }\r\n                } else {\r\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    } else {\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                }\r\n            } break;\r\n            case SongTagCode.filterCutoff: {\r\n                if (beforeSeven && variant == \"beepbox\") {\r\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\r\n                    const legacyToEnvelope: number[] = [1, 1, 1, 1, 18, 19, 20];\r\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\r\n\r\n                    if (beforeThree && variant == \"beepbox\") {\r\n                        channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        const instrument: Instrument = this.channels[channel].instruments[0];\r\n                        const legacyFilter: number = [1, 3, 4, 5][clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\r\n                        instrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n                        instrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n                        instrument.filterResonance = 0;\r\n                    } else if (beforeSix && variant == \"beepbox\") {\r\n                        for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                            for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                                const instrument: Instrument = this.channels[channel].instruments[i];\r\n                                const legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\r\n                                if (channel < this.pitchChannelCount) {\r\n                                    instrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n                                    instrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n                                    instrument.filterResonance = 0;\r\n                                } else {\r\n                                    instrument.filterCutoff = 10;\r\n                                    instrument.filterEnvelope = 1;\r\n                                    instrument.filterResonance = 0;\r\n                                }\r\n                            }\r\n                        }\r\n                    } else {\r\n                        const legacyFilter: number = clamp(0, filterNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                        instrument.filterCutoff = legacyToCutoff[legacyFilter];\r\n                        instrument.filterEnvelope = legacyToEnvelope[legacyFilter];\r\n                        instrument.filterResonance = 0;\r\n                    }\r\n                } else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.filterCutoff = clamp(0, Config.filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.filterResonance: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].filterResonance = clamp(0, Config.filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.filterEnvelope: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.drumset) {\r\n                    for (let i: number = 0; i < Config.drumCount; i++) {\r\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                } else {\r\n                    instrument.filterEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.pulseWidth: {\r\n                if (variant == \"beepbox\") {\r\n                    // Convert back from beepbox's weird pulse width storage formula, rounding. The \"7\" in there is the old\r\n                    // piece of the formula \"beepbox.Config.pulseWidthRange - 1\".\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pulseWidth = Math.round(clamp(0, Config.pulseWidthRange + 1, Math.pow(0.5, (7 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 0.5) * 50));\r\n                    instrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.pulseWidth = clamp(0, Config.pulseWidthRange + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    instrument.pulseEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.transition: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channel].instruments[0].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            this.channels[channel].instruments[i].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        }\r\n                    }\r\n                } else if (beforeFour || variant == \"beepbox\") {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n                else {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].tieNoteTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\r\n                }\r\n            } break;\r\n            case SongTagCode.vibrato: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    const legacyEffects: number[] = [0, 3, 2, 0];\r\n                    const legacyEnvelopes: number[] = [1, 1, 1, 13];\r\n                    const channel: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument: Instrument = this.channels[channel].instruments[0];\r\n                    instrument.vibrato = legacyEffects[effect];\r\n                    instrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n                        ? legacyEnvelopes[effect]\r\n                        : instrument.filterEnvelope;\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                    const legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                            const instrument: Instrument = this.channels[channel].instruments[i];\r\n                            instrument.vibrato = legacyEffects[effect];\r\n                            instrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n                                ? legacyEnvelopes[effect]\r\n                                : instrument.filterEnvelope;\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\r\n                    const legacyEnvelopes: number[] = [1, 1, 1, 1, 16, 13];\r\n                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.vibrato = legacyEffects[effect];\r\n                    instrument.filterEnvelope = (instrument.filterEnvelope == 1)\r\n                        ? legacyEnvelopes[effect]\r\n                        : instrument.filterEnvelope;\r\n                } else {\r\n                    const vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.vibrato = vibrato;\r\n                    // Custom vibrato\r\n                    if (vibrato == Config.vibratos.length) {\r\n                        instrument.vibratoDepth = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDepth)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\r\n                        instrument.vibratoSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.vibratoDelay = clamp(0, this.mstMaxVols.get(ModSetting.mstVibratoDelay)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                        instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    }\r\n                    // Enforce standard vibrato settings\r\n                    else {\r\n                        instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\r\n                        instrument.vibratoSpeed = 10; // Normal speed\r\n                        instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayParts;\r\n                        instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\r\n                    }\r\n                }\r\n\r\n            } break;\r\n            case SongTagCode.arpeggioSpeed: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                instrument.arpeggioSpeed = clamp(0, this.mstMaxVols.get(ModSetting.mstArpeggioSpeed)! + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\r\n            } break;\r\n            case SongTagCode.interval: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.channels[channel].instruments[0].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                            let interval: number = clamp(0, Config.intervals.length, originalValue);\r\n                            if (originalValue == 8) {\r\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                                interval = 2;\r\n                                this.channels[channel].instruments[i].chord = 3;\r\n                            }\r\n                            this.channels[channel].instruments[i].interval = interval;\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    let interval: number = clamp(0, Config.intervals.length, originalValue);\r\n                    if (originalValue == 8) {\r\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\r\n                        interval = 2;\r\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = 3;\r\n                    }\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = interval;\r\n                } else {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].interval = clamp(0, Config.intervals.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.chord: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.effects: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].effects = clamp(0, Config.effectsNames.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.volume: {\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const instrument: Instrument = this.channels[channel].instruments[0];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (beforeSix && variant == \"beepbox\") {\r\n                    for (channel = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                            const instrument: Instrument = this.channels[channel].instruments[i];\r\n                            instrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                        }\r\n                    }\r\n                } else if (beforeSeven && variant == \"beepbox\") {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\r\n                } else if (variant == \"beepbox\") {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    // Beepbox v7's volume range is 0-7 (0 is max, 7 is mute)\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\r\n                }\r\n                else {\r\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                    // Volume is stored in two bytes in jummbox just in case range ever exceeds one byte, e.g. through later waffling on the subject.\r\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\r\n                }\r\n            } break;\r\n            case SongTagCode.panning: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                if (variant == \"beepbox\") {\r\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\r\n                    instrument.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\r\n                }\r\n                else {\r\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n\r\n                // Now, pan delay follows on new versions of jummbox.\r\n                if (variant == \"jummbox\" && !beforeThree)\r\n                    instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n            } break;\r\n            case SongTagCode.detune: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n\r\n                instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) + Config.detuneMin);\r\n            } break;\r\n            case SongTagCode.customChipWave: {\r\n                let instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                // Pop custom wave values\r\n                for (let j: number = 0; j < 64; j++) {\r\n                    instrument.customChipWave[j]\r\n                        = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\r\n                }\r\n\r\n                let sum: number = 0.0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    sum += instrument.customChipWave[i];\r\n                }\r\n                const average: number = sum / instrument.customChipWave.length;\r\n\r\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\r\n                let cumulative: number = 0;\r\n                let wavePrev: number = 0;\r\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\r\n                    cumulative += wavePrev;\r\n                    wavePrev = instrument.customChipWave[i] - average;\r\n                    instrument.customChipWaveIntegral[i] = cumulative;\r\n                }\r\n\r\n                // 65th, last sample is for anti-aliasing\r\n                instrument.customChipWaveIntegral[64] = 0.0;\r\n\r\n            } break;\r\n            case SongTagCode.limiterSettings: {\r\n                let nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                // Check if limiter settings are used... if not, restore to default\r\n                if (nextValue == 0x3f) {\r\n                    // Limiter isn't used\r\n                    this.compressionRatio = 1.0;\r\n                    this.limitRatio = 1.0;\r\n                    this.limitRise = 4000.0;\r\n                    this.limitDecay = 4.0;\r\n                    this.limitThreshold = 1.0;\r\n                    this.compressionThreshold = 1.0;\r\n                    this.masterGain = 1.0;\r\n                }\r\n                else {\r\n                    // Limiter is used, grab values\r\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\r\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\r\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\r\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\r\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\r\n                }\r\n            } break;\r\n            case SongTagCode.channelNames: {\r\n                for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\r\n                    var channelNameLength;\r\n                    if (beforeFour)\r\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\r\n                    else\r\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\r\n\r\n                    charIndex += channelNameLength;\r\n                }\r\n            } break;\r\n            case SongTagCode.algorithm: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackType: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackAmplitude: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.feedbackEnvelope: {\r\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackEnvelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n            } break;\r\n            case SongTagCode.operatorFrequencies: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorAmplitudes: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.operatorEnvelopes: {\r\n                for (let o: number = 0; o < Config.operatorCount; o++) {\r\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].operators[o].envelope = clamp(0, Config.envelopes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                }\r\n            } break;\r\n            case SongTagCode.spectrum: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                if (instrument.type == InstrumentType.spectrum) {\r\n                    const byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                    }\r\n                    instrument.spectrumWave.markCustomWaveDirty();\r\n                    charIndex += byteCount;\r\n                } else if (instrument.type == InstrumentType.drumset) {\r\n                    const byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                    for (let j: number = 0; j < Config.drumCount; j++) {\r\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\r\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\r\n                        }\r\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\r\n                    }\r\n                    charIndex += byteCount;\r\n                } else {\r\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\r\n                }\r\n            } break;\r\n            case SongTagCode.harmonics: {\r\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\r\n                const byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6)\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\r\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\r\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\r\n                }\r\n                instrument.harmonicsWave.markCustomWaveDirty();\r\n                charIndex += byteCount;\r\n            } break;\r\n            case SongTagCode.bars: {\r\n                let subStringLength: number;\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    const barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    subStringLength = Math.ceil(barCount * 0.5);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let i: number = 0; i < barCount; i++) {\r\n                        this.channels[channel].bars[i] = bits.read(3) + 1;\r\n                    }\r\n                } else if (beforeFive && variant == \"beepbox\") {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channel].bars[i] = bits.read(neededBits) + 1;\r\n                        }\r\n                    }\r\n                } else {\r\n                    let neededBits: number = 0;\r\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\r\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\r\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\r\n                    for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n                        for (let i: number = 0; i < this.barCount; i++) {\r\n                            this.channels[channel].bars[i] = bits.read(neededBits);\r\n                        }\r\n                    }\r\n                }\r\n                charIndex += subStringLength;\r\n            } break;\r\n            case SongTagCode.patterns: {\r\n                let bitStringLength: number = 0;\r\n                let channel: number;\r\n                let largerChords: boolean = !((beforeFour && variant == \"jummbox\") || variant == \"beepbox\");\r\n                let recentPitchBitLength: number = ( largerChords ? 4 : 3 );\r\n                let recentPitchLength: number = ( largerChords ? 16 : 8 );\r\n                if (beforeThree && variant == \"beepbox\") {\r\n                    channel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default.\r\n                    charIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n\r\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                    bitStringLength = bitStringLength << 6;\r\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                } else {\r\n                    channel = 0;\r\n                    let bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\r\n                    while (bitStringLengthLength > 0) {\r\n                        bitStringLength = bitStringLength << 6;\r\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\r\n                        bitStringLengthLength--;\r\n                    }\r\n                }\r\n\r\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\r\n                charIndex += bitStringLength;\r\n\r\n                let neededInstrumentBits: number = 0;\r\n                while ((1 << neededInstrumentBits) < this.instrumentsPerChannel) neededInstrumentBits++;\r\n                while (true) {\r\n                    const isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n                    const isModChannel: boolean = this.getChannelIsMod(channel);\r\n\r\n                    // Some info about modulator settings immediately follows in mod channels.\r\n                    if (isModChannel) {\r\n                        for (let instrumentIndex: number = 0; instrumentIndex < this.instrumentsPerChannel; instrumentIndex++) {\r\n\r\n                            let instrument: Instrument = this.channels[channel].instruments[instrumentIndex];\r\n\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                instrument.modStatuses[mod] = bits.read(2);\r\n\r\n                                // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\r\n                                if (instrument.modStatuses[mod] == ModStatus.msForPitch || instrument.modStatuses[mod] == ModStatus.msForNoise) {\r\n\r\n                                    // Clamp to pitch/noise max\r\n                                    if (instrument.modStatuses[mod] == ModStatus.msForPitch) {\r\n                                        instrument.modChannels[mod] = clamp(0, this.pitchChannelCount + 1, bits.read(8));\r\n                                    }\r\n                                    else {\r\n                                        instrument.modChannels[mod] = clamp(0, this.noiseChannelCount + 1, bits.read(8));\r\n                                    }\r\n\r\n                                    instrument.modInstruments[mod] = clamp(0, this.instrumentsPerChannel + 1, bits.read(neededInstrumentBits));\r\n                                }\r\n\r\n                                // Mod setting is only used if the status isn't \"none\".\r\n                                if (instrument.modStatuses[mod] != ModStatus.msNone) {\r\n                                    instrument.modSettings[mod] = bits.read(6);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : this.channels[channel].octave * 12;\r\n                    let note: Note | null = null;\r\n                    let pin: NotePin | null = null;\r\n                    let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : 12) + octaveOffset;\r\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [12, 19, 24, 31, 36, 7, 0]);\r\n                    const recentShapes: any[] = [];\r\n                    for (let i: number = 0; i < recentPitches.length; i++) {\r\n                        recentPitches[i] += octaveOffset;\r\n                    }\r\n                    for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                        const newPattern: Pattern = this.channels[channel].patterns[i];\r\n                        newPattern.reset();\r\n                        newPattern.instrument = bits.read(neededInstrumentBits);\r\n\r\n                        if (!(variant == \"beepbox\" && beforeThree) && bits.read(1) == 0) continue;\r\n\r\n                        let curPart: number = 0;\r\n                        const newNotes: Note[] = newPattern.notes;\r\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\r\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\r\n\r\n                            const useOldShape: boolean = bits.read(1) == 1;\r\n                            let newNote: boolean = false;\r\n                            let shapeIndex: number = 0;\r\n                            if (useOldShape) {\r\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\r\n                            } else {\r\n                                newNote = bits.read(1) == 1;\r\n                            }\r\n\r\n                            if (!useOldShape && !newNote) {\r\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\r\n                                if (isModChannel) {\r\n                                    const isBackwards: boolean = bits.read(1) == 1;\r\n                                    const restLength: number = bits.readPartDuration();\r\n                                    if (isBackwards) {\r\n                                        curPart -= restLength;\r\n                                    }\r\n                                    else {\r\n                                        curPart += restLength;\r\n                                    }\r\n                                } else {\r\n                                    const restLength: number = (beforeSeven && variant == \"beepbox\")\r\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                        : bits.readPartDuration();\r\n                                    curPart += restLength;\r\n\r\n                                }\r\n                            } else {\r\n                                let shape: any;\r\n                                let pinObj: any;\r\n                                let pitch: number;\r\n                                if (useOldShape) {\r\n                                    shape = recentShapes[shapeIndex];\r\n                                    recentShapes.splice(shapeIndex, 1);\r\n                                } else {\r\n                                    shape = {};\r\n\r\n                                    if (!largerChords) {\r\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\r\n                                        shape.pitchCount = 1;\r\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\r\n                                    }\r\n                                    else {\r\n                                        // New format is:\r\n                                        //      0: 1 pitch\r\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\r\n                                        if (bits.read(1) == 1) {\r\n                                            shape.pitchCount = bits.read(3) + 2;\r\n                                        }\r\n                                        else {\r\n                                            shape.pitchCount = 1;\r\n                                        }\r\n                                    }\r\n                                    shape.pinCount = bits.readPinCount();\r\n\r\n                                    if (variant == \"beepbox\") {\r\n                                        shape.initialVolume = bits.read(2) * 2;\r\n                                    } else if (!isModChannel) {\r\n                                        shape.initialVolume = bits.read(3);\r\n                                    } else {\r\n                                        shape.initialVolume = bits.read(9);\r\n                                    }\r\n\r\n                                    shape.pins = [];\r\n                                    shape.length = 0;\r\n                                    shape.bendCount = 0;\r\n                                    for (let j: number = 0; j < shape.pinCount; j++) {\r\n                                        pinObj = {};\r\n                                        pinObj.pitchBend = bits.read(1) == 1;\r\n                                        if (pinObj.pitchBend) shape.bendCount++;\r\n                                        shape.length += (beforeSeven && variant == \"beepbox\")\r\n                                            ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\r\n                                            : bits.readPartDuration();\r\n                                        pinObj.time = shape.length;\r\n\r\n                                        if (variant == \"beepbox\") {\r\n                                            pinObj.volume = bits.read(2) * 2;\r\n                                        } else if (!isModChannel) {\r\n                                            pinObj.volume = bits.read(3);\r\n                                        }\r\n                                        else {\r\n                                            pinObj.volume = bits.read(9);\r\n                                        }\r\n                                        shape.pins.push(pinObj);\r\n                                    }\r\n                                }\r\n                                recentShapes.unshift(shape);\r\n                                if (recentShapes.length > 10) recentShapes.pop();\r\n\r\n                                note = new Note(0, curPart, curPart + shape.length, shape.initialVolume);\r\n                                note.pitches = [];\r\n                                note.pins.length = 1;\r\n                                const pitchBends: number[] = [];\r\n                                for (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\r\n                                    const useOldPitch: boolean = bits.read(1) == 1;\r\n                                    if (!useOldPitch) {\r\n                                        const interval: number = bits.readPitchInterval();\r\n                                        pitch = lastPitch;\r\n                                        let intervalIter: number = interval;\r\n                                        while (intervalIter > 0) {\r\n                                            pitch++;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\r\n                                            intervalIter--;\r\n                                        }\r\n                                        while (intervalIter < 0) {\r\n                                            pitch--;\r\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\r\n                                            intervalIter++;\r\n                                        }\r\n                                    } else {\r\n                                        const pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\r\n                                        pitch = recentPitches[pitchIndex];\r\n                                        recentPitches.splice(pitchIndex, 1);\r\n                                    }\r\n\r\n                                    recentPitches.unshift(pitch);\r\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\r\n\r\n                                    if (j < shape.pitchCount) {\r\n                                        note.pitches.push(pitch);\r\n                                    } else {\r\n                                        pitchBends.push(pitch);\r\n                                    }\r\n\r\n                                    if (j == shape.pitchCount - 1) {\r\n                                        lastPitch = note.pitches[0];\r\n                                    } else {\r\n                                        lastPitch = pitch;\r\n                                    }\r\n                                }\r\n\r\n                                pitchBends.unshift(note.pitches[0]);\r\n\r\n                                for (const pinObj of shape.pins) {\r\n                                    if (pinObj.pitchBend) pitchBends.shift();\r\n                                    pin = makeNotePin(pitchBends[0] - note.pitches[0], pinObj.time, pinObj.volume);\r\n                                    note.pins.push(pin);\r\n                                }\r\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\r\n                                newNotes.push(note);\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (beforeThree && variant == \"beepbox\") {\r\n                        break;\r\n                    } else {\r\n                        channel++;\r\n                        if (channel >= this.getChannelCount()) break;\r\n                    }\r\n                } // while (true)\r\n            } break;\r\n            default: {\r\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1));\r\n            } break;\r\n        }\r\n\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            if (toSetOctaves[channel] != null) {\r\n                this.channels[channel].octave = toSetOctaves[channel];\r\n            }\r\n        }\r\n    }\r\n\r\n    public toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\r\n        const channelArray: Object[] = [];\r\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\r\n            const instrumentArray: Object[] = [];\r\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channel);\r\n            const isModChannel: boolean = this.getChannelIsMod(channel);\r\n            for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                instrumentArray.push(this.channels[channel].instruments[i].toJsonObject());\r\n            }\r\n\r\n            const patternArray: Object[] = [];\r\n            for (const pattern of this.channels[channel].patterns) {\r\n                const noteArray: Object[] = [];\r\n                for (const note of pattern.notes) {\r\n                    let volumeCap: number = this.getVolumeCapForSetting(isModChannel, this.channels[channel].instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n                    const pointArray: Object[] = [];\r\n                    for (const pin of note.pins) {\r\n                        let useVol: number = isModChannel ? Math.round(pin.volume) : Math.round(pin.volume * 100 / volumeCap);\r\n                        pointArray.push({\r\n                            \"tick\": (pin.time + note.start) * Config.rhythms[this.rhythm].stepsPerBeat / Config.partsPerBeat,\r\n                            \"pitchBend\": pin.interval,\r\n                            \"volume\": useVol,\r\n                            \"forMod\": isModChannel,\r\n                        });\r\n                    }\r\n\r\n                    noteArray.push({\r\n                        \"pitches\": note.pitches,\r\n                        \"points\": pointArray,\r\n                    });\r\n                }\r\n\r\n                patternArray.push({\r\n                    \"instrument\": pattern.instrument + 1,\r\n                    \"notes\": noteArray,\r\n                });\r\n            }\r\n\r\n            const sequenceArray: number[] = [];\r\n            if (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\r\n                sequenceArray.push(this.channels[channel].bars[i]);\r\n            }\r\n            for (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\r\n                sequenceArray.push(this.channels[channel].bars[i]);\r\n            }\r\n            if (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\r\n                sequenceArray.push(this.channels[channel].bars[i]);\r\n            }\r\n\r\n            channelArray.push({\r\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\r\n                \"octaveScrollBar\": this.channels[channel].octave,\r\n                \"instruments\": instrumentArray,\r\n                \"patterns\": patternArray,\r\n                \"sequence\": sequenceArray,\r\n            });\r\n        }\r\n\r\n        return {\r\n            \"name\": this.title,\r\n            \"format\": Song._format,\r\n            \"version\": Song._latestJummBoxVersion,\r\n            \"scale\": Config.scales[this.scale].name,\r\n            \"key\": Config.keys[this.key].name,\r\n            \"introBars\": this.loopStart,\r\n            \"loopBars\": this.loopLength,\r\n            \"beatsPerBar\": this.beatsPerBar,\r\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\r\n            \"beatsPerMinute\": this.tempo,\r\n            \"reverb\": this.reverb,\r\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\r\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\r\n            //\"instrumentsPerChannel\": this.instrumentsPerChannel, //derive this from instrument arrays?\r\n            \"channels\": channelArray,\r\n        };\r\n    }\r\n\r\n    public fromJsonObject(jsonObject: any): void {\r\n        this.initToDefault(true);\r\n        if (!jsonObject) return;\r\n\r\n        //const version: number = jsonObject[\"version\"] | 0;\r\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\r\n\r\n        if (jsonObject[\"name\"] != undefined) {\r\n            this.title = jsonObject[\"name\"];\r\n        }\r\n\r\n        this.scale = 0; // default to free.\r\n        if (jsonObject[\"scale\"] != undefined) {\r\n            const oldScaleNames: Dictionary<string> = {\r\n                \"romani :)\": \"dbl harmonic :)\",\r\n                \"romani :(\": \"dbl harmonic :(\",\r\n                \"enigma\": \"strange\",\r\n            };\r\n            const scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\r\n            const scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\r\n            if (scale != -1) this.scale = scale;\r\n        }\r\n\r\n        if (jsonObject[\"key\"] != undefined) {\r\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\r\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\r\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\r\n                const key: string = jsonObject[\"key\"];\r\n                const letter: string = key.charAt(0).toUpperCase();\r\n                const symbol: string = key.charAt(1).toLowerCase();\r\n                const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\r\n                const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\r\n                let index: number | undefined = letterMap[letter];\r\n                const offset: number | undefined = accidentalMap[symbol];\r\n                if (index != undefined) {\r\n                    if (offset != undefined) index += offset;\r\n                    if (index < 0) index += 12;\r\n                    index = index % 12;\r\n                    this.key = index;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\r\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"reverb\"] != undefined) {\r\n            this.reverb = clamp(0, Config.reverbRange, jsonObject[\"reverb\"] | 0);\r\n        }\r\n\r\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\r\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\r\n        }\r\n\r\n        let importedPartsPerBeat: number = 4;\r\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\r\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\r\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\r\n            if (this.rhythm == -1) {\r\n                this.rhythm = 1;\r\n            }\r\n        }\r\n\r\n        let maxInstruments: number = 1;\r\n        let maxPatterns: number = 1;\r\n        let maxBars: number = 1;\r\n        if (jsonObject[\"channels\"]) {\r\n            for (const channelObject of jsonObject[\"channels\"]) {\r\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\r\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\r\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\r\n            }\r\n        }\r\n\r\n        this.instrumentsPerChannel = Math.min(maxInstruments, Config.instrumentsPerChannelMax);\r\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\r\n        this.barCount = Math.min(maxBars, Config.barCountMax);\r\n\r\n        if (jsonObject[\"introBars\"] != undefined) {\r\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\r\n        }\r\n        if (jsonObject[\"loopBars\"] != undefined) {\r\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\r\n        }\r\n\r\n        const newPitchChannels: Channel[] = [];\r\n        const newNoiseChannels: Channel[] = [];\r\n        const newModChannels: Channel[] = [];\r\n        if (jsonObject[\"channels\"]) {\r\n            for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\r\n                let channelObject: any = jsonObject[\"channels\"][channelIndex];\r\n\r\n                const channel: Channel = new Channel();\r\n\r\n                let isNoiseChannel: boolean = false;\r\n                let isModChannel: boolean = false;\r\n                if (channelObject[\"type\"] != undefined) {\r\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\r\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\r\n                } else {\r\n                    // for older files, assume drums are channel 3.\r\n                    isNoiseChannel = (channelIndex >= 3);\r\n                }\r\n                if (isNoiseChannel) {\r\n                    newNoiseChannels.push(channel);\r\n                } else if (isModChannel) {\r\n                    newModChannels.push(channel);\r\n                }\r\n                else {\r\n                    newPitchChannels.push(channel);\r\n                }\r\n\r\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\r\n                    channel.octave = clamp(0, Config.maxScrollableOctaves - (+(window.localStorage.getItem(\"extraOctaves\") || \"0\")) + 1, channelObject[\"octaveScrollBar\"] | 0);\r\n                }\r\n\r\n                for (let i: number = channel.instruments.length; i < this.instrumentsPerChannel; i++) {\r\n                    channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\r\n                }\r\n                channel.instruments.length = this.instrumentsPerChannel;\r\n\r\n                for (let i: number = channel.patterns.length; i < this.patternsPerChannel; i++) {\r\n                    channel.patterns[i] = new Pattern();\r\n                }\r\n                channel.patterns.length = this.patternsPerChannel;\r\n\r\n                for (let i: number = 0; i < this.barCount; i++) {\r\n                    channel.bars[i] = 1;\r\n                }\r\n                channel.bars.length = this.barCount;\r\n\r\n                for (let i: number = 0; i < this.instrumentsPerChannel; i++) {\r\n                    const instrument: Instrument = channel.instruments[i];\r\n                    instrument.fromJsonObject(channelObject[\"instruments\"][i], isNoiseChannel, isModChannel, this.rhythm == 0 || this.rhythm == 2, this.rhythm >= 2);\r\n                }\r\n\r\n                for (let i: number = 0; i < this.patternsPerChannel; i++) {\r\n                    const pattern: Pattern = channel.patterns[i];\r\n\r\n                    let patternObject: any = undefined;\r\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\r\n                    if (patternObject == undefined) continue;\r\n\r\n                    pattern.instrument = clamp(0, this.instrumentsPerChannel, (patternObject[\"instrument\"] | 0) - 1);\r\n\r\n                    if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\r\n                        const maxNoteCount: number = Math.min(this.beatsPerBar * Config.partsPerBeat, patternObject[\"notes\"].length >>> 0);\r\n\r\n                        //let tickClock: number = 0;\r\n                        for (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\r\n                            if (j >= maxNoteCount) break;\r\n\r\n                            const noteObject = patternObject[\"notes\"][j];\r\n                            if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\r\n                                continue;\r\n                            }\r\n\r\n                            const note: Note = new Note(0, 0, 0, 0);\r\n                            note.pitches = [];\r\n                            note.pins = [];\r\n\r\n                            for (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\r\n                                const pitch: number = noteObject[\"pitches\"][k] | 0;\r\n                                if (note.pitches.indexOf(pitch) != -1) continue;\r\n                                note.pitches.push(pitch);\r\n                                if (note.pitches.length >= Config.maxChordSize) break;\r\n                            }\r\n                            if (note.pitches.length < 1) continue;\r\n\r\n                            //let noteClock: number = tickClock;\r\n                            let startInterval: number = 0;\r\n                            for (let k: number = 0; k < noteObject[\"points\"].length; k++) {\r\n                                const pointObject: any = noteObject[\"points\"][k];\r\n                                if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\r\n                                const interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\r\n\r\n                                const time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\r\n\r\n                                let volumeCap: number = this.getVolumeCapForSetting(isModChannel, channel.instruments[pattern.instrument].modSettings[Config.modCount - note.pitches[0] - 1]);\r\n\r\n                                // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\r\n                                // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\r\n                                let volume: number;\r\n                                if (pointObject[\"volume\"] == undefined) {\r\n                                    volume = volumeCap;\r\n                                } else if (pointObject[\"forMod\"] == undefined) {\r\n                                    volume = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                                }\r\n                                else {\r\n                                    volume = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\r\n                                }\r\n\r\n                                if (time > this.beatsPerBar * Config.partsPerBeat) continue;\r\n                                if (note.pins.length == 0) {\r\n                                    //if (time < noteClock) continue;\r\n                                    note.start = time;\r\n                                    startInterval = interval;\r\n                                } else {\r\n                                    //if (time <= noteClock) continue;\r\n                                }\r\n                                //noteClock = time;\r\n\r\n                                note.pins.push(makeNotePin(interval - startInterval, time - note.start, volume));\r\n                            }\r\n                            if (note.pins.length < 2) continue;\r\n\r\n                            note.end = note.pins[note.pins.length - 1].time + note.start;\r\n\r\n                            const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\r\n                            let lowestPitch: number = maxPitch;\r\n                            let highestPitch: number = 0;\r\n                            for (let k: number = 0; k < note.pitches.length; k++) {\r\n                                note.pitches[k] += startInterval;\r\n                                if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\r\n                                    note.pitches.splice(k, 1);\r\n                                    k--;\r\n                                }\r\n                                if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\r\n                                if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\r\n                            }\r\n                            if (note.pitches.length < 1) continue;\r\n\r\n                            for (let k: number = 0; k < note.pins.length; k++) {\r\n                                const pin: NotePin = note.pins[k];\r\n                                if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\r\n                                if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\r\n                                if (k >= 2) {\r\n                                    if (pin.interval == note.pins[k - 1].interval &&\r\n                                        pin.interval == note.pins[k - 2].interval &&\r\n                                        pin.volume == note.pins[k - 1].volume &&\r\n                                        pin.volume == note.pins[k - 2].volume) {\r\n                                        note.pins.splice(k - 1, 1);\r\n                                        k--;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            pattern.notes.push(note);\r\n                            //tickClock = note.end;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                for (let i: number = 0; i < this.barCount; i++) {\r\n                    channel.bars[i] = channelObject[\"sequence\"] ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\r\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\r\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\r\n        this.pitchChannelCount = newPitchChannels.length;\r\n        this.noiseChannelCount = newNoiseChannels.length;\r\n        this.modChannelCount = newModChannels.length;\r\n        this.channels.length = 0;\r\n        Array.prototype.push.apply(this.channels, newPitchChannels);\r\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\r\n        Array.prototype.push.apply(this.channels, newModChannels);\r\n    }\r\n\r\n    public getPattern(channel: number, bar: number): Pattern | null {\r\n        if (bar < 0 || bar >= this.barCount) return null;\r\n        const patternIndex: number = this.channels[channel].bars[bar];\r\n        if (patternIndex == 0) return null;\r\n        return this.channels[channel].patterns[patternIndex - 1];\r\n    }\r\n\r\n    public getPatternInstrument(channel: number, bar: number): number {\r\n        const pattern: Pattern | null = this.getPattern(channel, bar);\r\n        return pattern == null ? 0 : pattern.instrument;\r\n    }\r\n\r\n    public getBeatsPerMinute(): number {\r\n        return this.tempo;\r\n    }\r\n\r\n}\r\n\r\nclass Tone {\r\n    public instrument: Instrument;\r\n    public readonly pitches: number[] = [0, 0, 0, 0];\r\n    public pitchCount: number = 0;\r\n    public chordSize: number = 0;\r\n    public drumsetPitch: number = 0;\r\n    public note: Note | null = null;\r\n    public prevNote: Note | null = null;\r\n    public nextNote: Note | null = null;\r\n    public prevNotePitchIndex: number = 0;\r\n    public nextNotePitchIndex: number = 0;\r\n    public active: boolean = false;\r\n    public noteStart: number = 0;\r\n    public noteEnd: number = 0;\r\n    public noteLengthTicks: number = 0;\r\n    public ticksSinceReleased: number = 0;\r\n    public liveInputSamplesHeld: number = 0;\r\n    public lastInterval: number = 0;\r\n    public lastVolume: number = 0;\r\n    public stereoVolume1: number = 0.0;\r\n    public stereoVolume2: number = 0.0;\r\n    public stereoOffset: number = 0.0;\r\n    public stereoDelay: number = 0.0;\r\n    public sample: number = 0.0;\r\n    public readonly phases: number[] = [];\r\n    public readonly phaseDeltas: number[] = [];\r\n    public readonly volumeStarts: number[] = [];\r\n    public readonly volumeDeltas: number[] = [];\r\n    public volumeStart: number = 0.0;\r\n    public volumeDelta: number = 0.0;\r\n    public phaseDeltaScale: number = 0.0;\r\n    public pulseWidth: number = 0.0;\r\n    public pulseWidthDelta: number = 0.0;\r\n    public filter: number = 0.0;\r\n    public filterScale: number = 0.0;\r\n    public filterSample0: number = 0.0;\r\n    public filterSample1: number = 0.0;\r\n    public vibratoScale: number = 0.0;\r\n    public intervalMult: number = 0.0;\r\n    public intervalVolumeMult: number = 1.0;\r\n    public feedbackOutputs: number[] = [];\r\n    public feedbackMult: number = 0.0;\r\n    public feedbackDelta: number = 0.0;\r\n    public stereoVolumeLStart: number = 0.0;\r\n    public stereoVolumeRStart: number = 0.0;\r\n    public stereoVolumeLDelta: number = 0.0;\r\n    public stereoVolumeRDelta: number = 0.0;\r\n    public stereoDelayStart: number = 0.0;\r\n    public stereoDelayEnd: number = 0.0;\r\n    public stereoDelayDelta: number = 0.0;\r\n    public customVolumeStart: number = 0.0;\r\n    public customVolumeEnd: number = 0.0;\r\n    public filterResonanceStart: number = 0.0;\r\n    public filterResonanceDelta: number = 0.0;\r\n    public isFirstOrder: boolean = false;\r\n\r\n    constructor() {\r\n        this.reset();\r\n    }\r\n\r\n    public reset(): void {\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            this.phases[i] = 0.0;\r\n            this.feedbackOutputs[i] = 0.0;\r\n        }\r\n        this.sample = 0.0;\r\n        this.filterSample0 = 0.0;\r\n        this.filterSample1 = 0.0;\r\n        this.liveInputSamplesHeld = 0.0;\r\n    }\r\n\r\n}\r\n\r\nexport class Synth {\r\n\r\n    public warmUpSynthesizer(song: Song | null): void {\r\n        // Don't bother to generate the drum waves unless the song actually\r\n        // uses them, since they may require a lot of computation.\r\n        if (song != null) {\r\n            for (let channel: number = 0; channel < song.getChannelCount(); channel++) {\r\n                for (let instrument: number = 0; instrument < song.instrumentsPerChannel; instrument++) {\r\n                    Synth.getInstrumentSynthFunction(song.channels[channel].instruments[instrument]);\r\n                    song.channels[channel].instruments[instrument].warmUp();\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    public computeLatestModValues(): void {\r\n\r\n        if (this.song != null && this.song.modChannelCount > 0) {\r\n\r\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\r\n            let latestModTimes: (number | null)[] = [];\r\n            let latestModInsTimes: (number | null)[][][] = [];\r\n            this.modValues = [];\r\n            this.nextModValues = [];\r\n            this.modInsValues = [];\r\n            this.nextModInsValues = [];\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                latestModInsTimes[channel] = [];\r\n                this.modInsValues[channel] = [];\r\n                this.nextModInsValues[channel] = [];\r\n                for (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n                    this.modInsValues[channel][instrument] = [];\r\n                    this.nextModInsValues[channel][instrument] = [];\r\n                    latestModInsTimes[channel][instrument] = [];\r\n                }\r\n            }\r\n\r\n            // Find out where we're at in the fraction of the current bar.\r\n            let currentPart: number = this.beat * Config.partsPerBeat + this.part;\r\n\r\n            // For mod channels, calculate last set value for each mod\r\n            for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                if (!(this.song.channels[channel].muted)) {\r\n\r\n                    let pattern: Pattern | null;\r\n\r\n                    for (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\r\n                        pattern = this.song.getPattern(channel, currentBar);\r\n\r\n                        if (pattern != null) {\r\n                            let instrumentIdx: number = this.song.getPatternInstrument(channel, currentBar);\r\n                            let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                            let latestPinParts: number[] = [];\r\n                            let latestPinValues: number[] = [];\r\n\r\n                            let partsInBar: number = (currentBar == this.bar)\r\n                                ? currentPart\r\n                                : this.findPartsInBar(currentBar);\r\n\r\n                            for (const note of pattern.notes) {\r\n                                if (note.start < partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\r\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].volume;\r\n                                    }\r\n                                    else {\r\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            // Set modulator value, if it wasn't set in another pattern already scanned\r\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                if (latestPinParts[mod] != null) {\r\n                                    if (instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                                        if (latestModTimes[instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modSettings[mod]] as number)) {\r\n                                            this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n                                            latestModTimes[instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                        }\r\n                                    }\r\n                                    else if (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] as number)) {\r\n                                        this.setModValue(latestPinValues[mod], latestPinValues[mod], mod, instrument, instrument.modSettings[mod]);\r\n                                        latestModInsTimes[instrument.modChannels[mod]][instrument.modInstruments[mod]][instrument.modSettings[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private static operatorAmplitudeCurve(amplitude: number): number {\r\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\r\n    }\r\n\r\n    public samplesPerSecond: number = 44100;\r\n\r\n    public song: Song | null = null;\r\n    public liveInputDuration: number = 0;\r\n    public liveInputStarted: boolean = false;\r\n    public liveInputPitches: number[] = [];\r\n    public liveInputChannel: number = 0;\r\n    public loopRepeatCount: number = -1;\r\n    public volume: number = 1.0;\r\n\r\n    private wantToSkip: boolean = false;\r\n    private playheadInternal: number = 0.0;\r\n    private bar: number = 0;\r\n    private beat: number = 0;\r\n    private part: number = 0;\r\n    private tick: number = 0;\r\n    private tickSampleCountdown: number = 0;\r\n    private modValues: (number | null)[];\r\n    private modInsValues: (number | null)[][][];\r\n    private nextModValues: (number | null)[];\r\n    private nextModInsValues: (number | null)[][][];\r\n    private isPlayingSong: boolean = false;\r\n    private liveInputEndTime: number = 0.0;\r\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\r\n    private readonly activeTones: Array<Deque<Tone>> = [];\r\n    private tyingOver: number[] = [];\r\n    private readonly activeModTones: Array<Array<Deque<Tone>>> = [];\r\n    //private readonly releasedModTones: Array<Array<Deque<Tone>>> = [];\r\n    private readonly releasedTones: Array<Deque<Tone>> = [];\r\n    private readonly liveInputTones: Deque<Tone> = new Deque<Tone>();\r\n\r\n    //private highpassInput: number = 0.0;\r\n    //private highpassOutput: number = 0.0;\r\n    private limit: number = 0.0;\r\n\r\n    private stereoBufferIndex: number = 0;\r\n    private samplesForNone: Float32Array | null = null;\r\n    private samplesForReverb: Float32Array | null = null;\r\n    private samplesForChorus: Float32Array | null = null;\r\n    private samplesForChorusReverb: Float32Array | null = null;\r\n\r\n    private chorusDelayLine: Float32Array = new Float32Array(2048);\r\n    private chorusDelayPos: number = 0;\r\n    private chorusPhase: number = 0;\r\n\r\n    private reverbDelayLine: Float32Array = new Float32Array(16384);\r\n    private reverbDelayPos: number = 0;\r\n    private reverbFeedback0: number = 0.0;\r\n    private reverbFeedback1: number = 0.0;\r\n    private reverbFeedback2: number = 0.0;\r\n    private reverbFeedback3: number = 0.0;\r\n\r\n    private audioCtx: any | null = null;\r\n    private scriptNode: any | null = null;\r\n\r\n    public get playing(): boolean {\r\n        return this.isPlayingSong;\r\n    }\r\n\r\n    public get playhead(): number {\r\n        return this.playheadInternal;\r\n    }\r\n\r\n    public set playhead(value: number) {\r\n        if (this.song != null) {\r\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\r\n            let remainder: number = this.playheadInternal;\r\n            this.bar = Math.floor(remainder);\r\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\r\n            this.beat = Math.floor(remainder);\r\n            remainder = Config.partsPerBeat * (remainder - this.beat);\r\n            this.part = Math.floor(remainder);\r\n            remainder = Config.ticksPerPart * (remainder - this.part);\r\n            this.tick = Math.floor(remainder);\r\n            const samplesPerTick: number = this.getSamplesPerTick();\r\n            remainder = samplesPerTick * (remainder - this.tick);\r\n            this.tickSampleCountdown = samplesPerTick - remainder;\r\n        }\r\n    }\r\n\r\n    public getSamplesPerBar(): number {\r\n        if (this.song == null) throw new Error();\r\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\r\n    }\r\n\r\n    // Calculate the total number of parts that will be played in the current bar before any next bar mods trigger.\r\n    private findPartsInBar(bar: number): number {\r\n        if (this.song == null) return 0;\r\n        let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n            if (pattern != null) {\r\n                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    if (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                        for (const note of pattern.notes) {\r\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                // Find the earliest next bar note.\r\n                                if (partsInBar > note.start)\r\n                                    partsInBar = note.start;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return partsInBar;\r\n    }\r\n\r\n    // Returns the total samples in the song\r\n    public getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\r\n        if (this.song == null)\r\n            return -1;\r\n\r\n        // Compute the window to be checked (start bar to end bar)\r\n        let startBar: number = enableIntro ? 0 : this.song.loopStart;\r\n        let endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\r\n        let hasTempoMods: boolean = false;\r\n        let hasNextBarMods: boolean = false;\r\n        let prevTempo: number = this.song.tempo;\r\n\r\n        // Determine if any tempo or next bar mods happen anywhere in the window\r\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n            for (let bar: number = startBar; bar < endBar; bar++) {\r\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                if (pattern != null) {\r\n                    let instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                        if (instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                            hasTempoMods = true;\r\n                        }\r\n                        if (instrument.modSettings[mod] == ModSetting.mstNextBar && instrument.modStatuses[mod] == ModStatus.msForSong) {\r\n                            hasNextBarMods = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\r\n        if (startBar > 0) {\r\n            let latestTempoPin: number | null = null;\r\n            let latestTempoValue: number = 0;\r\n\r\n            for (let bar: number = startBar - 1; bar >= 0; bar--) {\r\n                for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                    let pattern = this.song.getPattern(channel, bar);\r\n\r\n                    if (pattern != null) {\r\n                        let instrumentIdx: number = this.song.getPatternInstrument(channel, bar);\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n\r\n                        let partsInBar: number = this.findPartsInBar(bar);\r\n\r\n                        for (const note of pattern.notes) {\r\n                            if (instrument.modSettings[Config.modCount - 1 - note.pitches[0]] == ModSetting.mstTempo && instrument.modStatuses[Config.modCount - 1 - note.pitches[0]] == ModStatus.msForSong) {\r\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\r\n                                    if (note.end <= partsInBar) {\r\n                                        latestTempoPin = note.end;\r\n                                        latestTempoValue = note.pins[note.pins.length - 1].volume;\r\n                                    }\r\n                                    else {\r\n                                        latestTempoPin = partsInBar;\r\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\r\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\r\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\r\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\r\n                                                const deltaVolume: number = note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume;\r\n\r\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].volume + deltaVolume * toNextBarLength / transitionLength);\r\n                                                pinIdx = note.pins.length;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n\r\n                    }\r\n                }\r\n\r\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\r\n                if (latestTempoPin != null) {\r\n                    prevTempo = this.song.modValueToReal(latestTempoValue, ModSetting.mstTempo);\r\n                    bar = -1;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (hasTempoMods || hasNextBarMods) {\r\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\r\n            let bar: number = startBar;\r\n            let ended: boolean = false;\r\n            let totalSamples: number = 0;\r\n\r\n            while (!ended) {\r\n                // Compute the subsection of the pattern that will play\r\n                let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\r\n                let currentPart: number = 0;\r\n\r\n                if (hasNextBarMods) {\r\n                    partsInBar = this.findPartsInBar(bar);\r\n                }\r\n\r\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\r\n                if (hasTempoMods) {\r\n                    let foundMod: boolean = false;\r\n                    for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\r\n                        if (foundMod == false) {\r\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\r\n                            if (pattern != null) {\r\n                                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instrument];\r\n                                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                                    if (foundMod == false && instrument.modSettings[mod] == ModSetting.mstTempo && instrument.modStatuses[mod] == ModStatus.msForSong\r\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\r\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\r\n                                        foundMod = true;\r\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\r\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\r\n                                        for (const note of pattern.notes) {\r\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\r\n                                                // Compute samples up to this note\r\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                                                if (note.start < partsInBar) {\r\n                                                    for (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\r\n                                                        // Compute samples up to this pin\r\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\r\n                                                            const tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\r\n                                                            const prevPinTempo: number = this.song.modValueToReal(note.pins[pinIdx - 1].volume, ModSetting.mstTempo);\r\n                                                            let currPinTempo: number = this.song.modValueToReal(note.pins[pinIdx].volume, ModSetting.mstTempo);\r\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\r\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\r\n                                                                currPinTempo = this.song.modValueToReal(note.pins[pinIdx - 1].volume + (note.pins[pinIdx].volume - note.pins[pinIdx - 1].volume) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time), ModSetting.mstTempo);\r\n                                                            }\r\n                                                            let bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\r\n\r\n                                                            if (currPinTempo != prevPinTempo) {\r\n\r\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\r\n                                                                // The starting formula is\r\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\r\n                                                                //\r\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\r\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\r\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\r\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\r\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\r\n                                                                //\r\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\r\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\r\n\r\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\r\n\r\n                                                            }\r\n                                                            else {\r\n\r\n                                                                // No tempo change between the two pins.\r\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\r\n\r\n                                                            }\r\n                                                            prevTempo = currPinTempo;\r\n                                                        }\r\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Compute samples for the rest of the bar\r\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\r\n\r\n                bar++;\r\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\r\n                    bar = this.song.loopStart;\r\n                    if (loop > 0) loop--;\r\n                }\r\n                if (bar >= endBar) {\r\n                    ended = true;\r\n                }\r\n            }\r\n\r\n            return Math.ceil(totalSamples);\r\n        }\r\n        else {\r\n            // No tempo or next bar mods... phew! Just calculate normally.\r\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\r\n        }\r\n    }\r\n\r\n    public getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\r\n        if (this.song == null) throw new Error();\r\n        let bars: number = this.song.loopLength * (useLoopCount + 1);\r\n        if (enableIntro) bars += this.song.loopStart;\r\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\r\n        return bars;\r\n    }\r\n\r\n    constructor(song: Song | string | null = null) {\r\n        if (song != null) this.setSong(song);\r\n    }\r\n\r\n    public setSong(song: Song | string): void {\r\n        if (typeof (song) == \"string\") {\r\n            this.song = new Song(song);\r\n        } else if (song instanceof Song) {\r\n            this.song = song;\r\n        }\r\n    }\r\n\r\n    public setModValue(volumeStart: number, volumeEnd: number, mod: number, instrument: Instrument, setting: ModSetting): number {\r\n        let val: number;\r\n        let nextVal: number;\r\n        switch (setting) {\r\n            case ModSetting.mstSongVolume:\r\n            case ModSetting.mstReverb:\r\n            case ModSetting.mstTempo:\r\n            case ModSetting.mstSongDetune:\r\n                val = (this.song as Song).modValueToReal(volumeStart, setting);\r\n                nextVal = (this.song as Song).modValueToReal(volumeEnd, setting);\r\n                if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\r\n                    this.modValues[setting] = val;\r\n                    this.nextModValues[setting] = nextVal;\r\n                }\r\n                break;\r\n            case ModSetting.mstInsVolume:\r\n            case ModSetting.mstPan:\r\n            case ModSetting.mstPulseWidth:\r\n            case ModSetting.mstFilterCut:\r\n            case ModSetting.mstFilterPeak:\r\n            case ModSetting.mstFMSlider1:\r\n            case ModSetting.mstFMSlider2:\r\n            case ModSetting.mstFMSlider3:\r\n            case ModSetting.mstFMSlider4:\r\n            case ModSetting.mstFMFeedback:\r\n            case ModSetting.mstVibratoDepth:\r\n            case ModSetting.mstVibratoSpeed:\r\n            case ModSetting.mstVibratoDelay:\r\n            case ModSetting.mstArpeggioSpeed:\r\n            case ModSetting.mstPanDelay:\r\n            case ModSetting.mstResetArpeggio:\r\n            case ModSetting.mstDetune:\r\n                val = this.song!.modValueToReal(volumeStart, setting);\r\n                nextVal = this.song!.modValueToReal(volumeEnd, setting);\r\n                let channelAdjust: number = instrument.modChannels[mod] + ((instrument.modStatuses[mod] == ModStatus.msForNoise) ? this.song!.pitchChannelCount : 0);\r\n\r\n                if (this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] == null\r\n                    || this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != val\r\n                    || this.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] != nextVal) {\r\n                    this.modInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = val;\r\n                    this.nextModInsValues[channelAdjust][instrument.modInstruments[mod]][setting] = nextVal;\r\n                }\r\n                break;\r\n            case ModSetting.mstNextBar:\r\n                val = (this.song as Song).modValueToReal(volumeStart, setting);\r\n                break;\r\n            case ModSetting.mstNone:\r\n            default:\r\n                val = -1;\r\n                break;\r\n        }\r\n\r\n        return val;\r\n    }\r\n\r\n    public getModValue(setting: ModSetting, forSong: boolean, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\r\n        if (forSong) {\r\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\r\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\r\n            }\r\n        } else if (channel != undefined && instrument != undefined) {\r\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\r\n    public isAnyModActive(channel: number, instrument: number): boolean {\r\n        for (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n            if ((this.modValues != undefined && this.modValues[setting] != null)\r\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public unsetMod(setting: ModSetting, channel?: number, instrument?: number) {\r\n        if (this.isModActive(setting, true) || (channel != undefined && instrument != undefined && this.isModActive(setting, false, channel, instrument))) {\r\n            this.modValues[setting] = null;\r\n            this.nextModValues[setting] = null;\r\n            if (channel != undefined && instrument != undefined) {\r\n                this.modInsValues[channel][instrument][setting] = null;\r\n                this.nextModInsValues[channel][instrument][setting] = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    public isModActive(setting: ModSetting, forSong: boolean, channel?: number, instrument?: number): boolean {\r\n        if (forSong) {\r\n            return (this.modValues != undefined && this.modValues[setting] != null);\r\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null && this.modInsValues[channel][instrument][setting] != null) {\r\n            return (this.modInsValues[channel][instrument][setting] != null);\r\n        }\r\n        return false;\r\n    }\r\n\r\n    private activateAudio(): void {\r\n        if (this.audioCtx == null || this.scriptNode == null) {\r\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)();\r\n            this.samplesPerSecond = this.audioCtx.sampleRate;\r\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(2048, 0, 2) : this.audioCtx.createJavaScriptNode(2048, 0, 2); // 2048, 0 input channels, 2 output channels\r\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\r\n            this.scriptNode.channelCountMode = 'explicit';\r\n            this.scriptNode.channelInterpretation = 'speakers';\r\n            this.scriptNode.connect(this.audioCtx.destination);\r\n        }\r\n        this.audioCtx.resume();\r\n    }\r\n\r\n    private deactivateAudio(): void {\r\n        if (this.audioCtx != null && this.scriptNode != null) {\r\n            this.scriptNode.disconnect(this.audioCtx.destination);\r\n            this.scriptNode = null;\r\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\r\n            this.audioCtx = null;\r\n        }\r\n    }\r\n\r\n    public maintainLiveInput(): void {\r\n        this.activateAudio();\r\n        this.liveInputEndTime = performance.now() + 10000.0;\r\n    }\r\n\r\n    public play(): void {\r\n        if (this.isPlayingSong) return;\r\n        this.isPlayingSong = true;\r\n        this.warmUpSynthesizer(this.song);\r\n        this.computeLatestModValues();\r\n        this.activateAudio();\r\n    }\r\n\r\n    public pause(): void {\r\n        if (!this.isPlayingSong) return;\r\n        this.isPlayingSong = false;\r\n        if (this.song != null) {\r\n            this.song.inVolumeCap = 0.0;\r\n            this.song.outVolumeCap = 0.0;\r\n        }\r\n        this.modValues = [];\r\n        this.modInsValues = [];\r\n        this.nextModValues = [];\r\n        this.nextModInsValues = [];\r\n        this.tyingOver = [];\r\n    }\r\n\r\n    public snapToStart(): void {\r\n        this.bar = 0;\r\n        this.snapToBar();\r\n    }\r\n\r\n    public goToBar(bar: number): void {\r\n        this.bar = bar;\r\n        this.playheadInternal = this.bar;\r\n    }\r\n\r\n    public snapToBar(): void {\r\n        this.playheadInternal = this.bar;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = 0;\r\n    }\r\n\r\n    public resetEffects(): void {\r\n        this.reverbDelayPos = 0;\r\n        this.reverbFeedback0 = 0.0;\r\n        this.reverbFeedback1 = 0.0;\r\n        this.reverbFeedback2 = 0.0;\r\n        this.reverbFeedback3 = 0.0;\r\n        //this.highpassInput = 0.0;\r\n        //this.highpassOutput = 0.0;\r\n        this.freeAllTones();\r\n        for (let i: number = 0; i < this.reverbDelayLine.length; i++) this.reverbDelayLine[i] = 0.0;\r\n        for (let i: number = 0; i < this.chorusDelayLine.length; i++) this.chorusDelayLine[i] = 0.0;\r\n        if (this.samplesForNone != null) for (let i: number = 0; i < this.samplesForNone.length; i++) this.samplesForNone[i] = 0.0;\r\n        if (this.samplesForReverb != null) for (let i: number = 0; i < this.samplesForReverb.length; i++) this.samplesForReverb[i] = 0.0;\r\n        if (this.samplesForChorus != null) for (let i: number = 0; i < this.samplesForChorus.length; i++) this.samplesForChorus[i] = 0.0;\r\n        if (this.samplesForChorusReverb != null) for (let i: number = 0; i < this.samplesForChorusReverb.length; i++) this.samplesForChorusReverb[i] = 0.0;\r\n    }\r\n\r\n    public jumpIntoLoop(): void {\r\n        if (!this.song) return;\r\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\r\n            const oldBar: number = this.bar;\r\n            this.bar = this.song.loopStart;\r\n            this.playheadInternal += this.bar - oldBar;\r\n\r\n            if (this.playing)\r\n                this.computeLatestModValues();\r\n        }\r\n    }\r\n\r\n    public nextBar(): void {\r\n        if (!this.song) return;\r\n        const oldBar: number = this.bar;\r\n        this.bar++;\r\n        if (this.bar >= this.song.barCount) {\r\n            this.bar = 0;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public skipBar(): void {\r\n        if (!this.song) return;\r\n        const samplesPerTick: number = this.getSamplesPerTick();\r\n        this.bar++;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n        this.tick = 0;\r\n        this.tickSampleCountdown = samplesPerTick;\r\n\r\n        if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n            this.bar = this.song.loopStart;\r\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n        }\r\n\r\n    }\r\n\r\n    public firstBar(): void {\r\n        if (!this.song) return;\r\n        this.bar = 0;\r\n        this.playheadInternal = 0;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public jumpToEditingBar(bar: number): void {\r\n        if (!this.song) return;\r\n\r\n        this.bar = bar;\r\n\r\n        this.playheadInternal = bar;\r\n        this.beat = 0;\r\n        this.part = 0;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    public prevBar(): void {\r\n        if (!this.song) return;\r\n        const oldBar: number = this.bar;\r\n        this.bar--;\r\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\r\n            this.bar = this.song.barCount - 1;\r\n        }\r\n        this.playheadInternal += this.bar - oldBar;\r\n\r\n        // Reset note ties\r\n        for ( let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++ ) {\r\n            this.tyingOver[channel] = -1;\r\n        }\r\n\r\n        if (this.playing)\r\n            this.computeLatestModValues();\r\n    }\r\n\r\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\r\n        const outputBuffer = audioProcessingEvent.outputBuffer;\r\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\r\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\r\n\r\n        const isPlayingLiveTones = performance.now() < this.liveInputEndTime;\r\n        if (!isPlayingLiveTones && !this.isPlayingSong) {\r\n            for (let i: number = 0; i < outputBuffer.length; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n            this.deactivateAudio();\r\n        } else {\r\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\r\n        }\r\n    }\r\n\r\n    public synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\r\n        if (this.song == null) {\r\n            for (let i: number = 0; i < outputBufferLength; i++) {\r\n                outputDataL[i] = 0.0;\r\n                outputDataR[i] = 0.0;\r\n            }\r\n            this.deactivateAudio();\r\n            return;\r\n        }\r\n\r\n        this.song.inVolumeCap = 0.0; // Reset volume cap for this run\r\n        this.song.outVolumeCap = 0.0;\r\n\r\n        const channelCount: number = this.song.pitchChannelCount + this.song.noiseChannelCount;\r\n\r\n        for (let i: number = this.activeTones.length; i < channelCount; i++) {\r\n            this.activeTones[i] = new Deque<Tone>();\r\n            this.releasedTones[i] = new Deque<Tone>();\r\n        }\r\n        this.activeTones.length = channelCount;\r\n        this.releasedTones.length = channelCount;\r\n        if ( channelCount != this.tyingOver.length ) {\r\n            let idx: number = this.tyingOver.length;\r\n            this.tyingOver.length = channelCount;\r\n            while ( idx < this.tyingOver.length ) {\r\n                this.tyingOver[idx++] = -1;\r\n            }\r\n        }\r\n\r\n        for (let i: number = this.activeModTones.length; i < this.song.modChannelCount; i++) {\r\n            this.activeModTones[i] = [];\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                this.activeModTones[i][mod] = new Deque<Tone>();\r\n            }\r\n            this.activeModTones[i].length = Config.modCount;\r\n        }\r\n        this.activeModTones.length = this.song.modChannelCount;\r\n\r\n        let samplesPerTick: number = this.getSamplesPerTick();\r\n        let bufferIndex: number = 0;\r\n        let ended: boolean = false;\r\n\r\n        // Check the bounds of the playhead:\r\n        while (this.tickSampleCountdown <= 0) this.tickSampleCountdown += samplesPerTick;\r\n        if (this.tickSampleCountdown > samplesPerTick) this.tickSampleCountdown = samplesPerTick;\r\n        if (playSong) {\r\n            if (this.beat >= this.song.beatsPerBar) {\r\n                this.bar++;\r\n                this.beat = 0;\r\n                this.part = 0;\r\n                this.tick = 0;\r\n                this.tickSampleCountdown = samplesPerTick;\r\n\r\n                if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n                    this.bar = this.song.loopStart;\r\n                    if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n                }\r\n            }\r\n            if (this.bar >= this.song.barCount) {\r\n                this.bar = 0;\r\n                if (this.loopRepeatCount != -1) {\r\n                    ended = true;\r\n                    this.pause();\r\n                }\r\n            }\r\n        }\r\n\r\n        //const synthStartTime: number = performance.now();\r\n\r\n        const stereoBufferLength: number = outputBufferLength * 4;\r\n        if (this.samplesForNone == null || this.samplesForNone.length != stereoBufferLength ||\r\n            this.samplesForReverb == null || this.samplesForReverb.length != stereoBufferLength ||\r\n            this.samplesForChorus == null || this.samplesForChorus.length != stereoBufferLength ||\r\n            this.samplesForChorusReverb == null || this.samplesForChorusReverb.length != stereoBufferLength) {\r\n            this.samplesForNone = new Float32Array(stereoBufferLength);\r\n            this.samplesForReverb = new Float32Array(stereoBufferLength);\r\n            this.samplesForChorus = new Float32Array(stereoBufferLength);\r\n            this.samplesForChorusReverb = new Float32Array(stereoBufferLength);\r\n            this.stereoBufferIndex = 0;\r\n        }\r\n        let stereoBufferIndex: number = this.stereoBufferIndex;\r\n        const samplesForNone: Float32Array = this.samplesForNone;\r\n        const samplesForReverb: Float32Array = this.samplesForReverb;\r\n        const samplesForChorus: Float32Array = this.samplesForChorus;\r\n        const samplesForChorusReverb: Float32Array = this.samplesForChorusReverb;\r\n\r\n        // Post processing parameters:\r\n        const volume: number = +this.volume;\r\n        const chorusDelayLine: Float32Array = this.chorusDelayLine;\r\n        const reverbDelayLine: Float32Array = this.reverbDelayLine;\r\n        const chorusDuration: number = 2.0;\r\n        const chorusAngle: number = Math.PI * 2.0 / (chorusDuration * this.samplesPerSecond);\r\n        const chorusRange: number = 150 * this.samplesPerSecond / 44100;\r\n        const chorusOffset0: number = 0x800 - 1.51 * chorusRange;\r\n        const chorusOffset1: number = 0x800 - 2.10 * chorusRange;\r\n        const chorusOffset2: number = 0x800 - 3.35 * chorusRange;\r\n        const chorusOffset3: number = 0x800 - 1.47 * chorusRange;\r\n        const chorusOffset4: number = 0x800 - 2.15 * chorusRange;\r\n        const chorusOffset5: number = 0x800 - 3.25 * chorusRange;\r\n        let chorusPhase: number = this.chorusPhase % (Math.PI * 2.0);\r\n        let chorusDelayPos: number = this.chorusDelayPos & 0x7FF;\r\n        let reverbDelayPos: number = this.reverbDelayPos & 0x3FFF;\r\n        let reverbFeedback0: number = +this.reverbFeedback0;\r\n        let reverbFeedback1: number = +this.reverbFeedback1;\r\n        let reverbFeedback2: number = +this.reverbFeedback2;\r\n        let reverbFeedback3: number = +this.reverbFeedback3;\r\n        let useReverb: number = this.song.reverb;\r\n        if (this.isModActive(ModSetting.mstReverb, true)) {\r\n            useReverb = this.getModValue(ModSetting.mstReverb, true);\r\n        }\r\n        let reverb: number = Math.pow(useReverb / Config.reverbRange, 0.667) * 0.425;\r\n        //const highpassFilter: number = Math.pow(0.5, 400 / this.samplesPerSecond);\r\n        const limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond); // Default 4.0\r\n        const limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond); // Default 4000.0;\r\n        const compressionThreshold: number = this.song.compressionThreshold; // Default 1\r\n        const limitThreshold: number = this.song.limitThreshold; // Default 1\r\n        const compressionRatio: number = this.song.compressionRatio; // Default 1\r\n        const limitRatio: number = this.song.limitRatio; // Default 1\r\n        const masterGain: number = this.song.masterGain; // Default 1\r\n        //let highpassInput: number = +this.highpassInput;\r\n        //let highpassOutput: number = +this.highpassOutput;\r\n        let limit: number = +this.limit;\r\n\r\n        while (bufferIndex < outputBufferLength && !ended) {\r\n\r\n            const samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\r\n            const runLength: number = Math.min(Math.ceil(this.tickSampleCountdown), samplesLeftInBuffer);\r\n\r\n            for (let modChannel: number = 0, channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; modChannel < this.song.modChannelCount; modChannel++, channel++) {\r\n                // Also determines mod tones.\r\n                this.determineCurrentActiveTones(this.song, channel, playSong);\r\n\r\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                    for (let i: number = 0; i < this.activeModTones[modChannel][mod].count(); i++) {\r\n                        const tone: Tone = this.activeModTones[modChannel][mod].get(i);\r\n\r\n                        if (this.song.channels[channel].muted == false)\r\n                            this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Handle next bar mods if they were set\r\n            if ( this.wantToSkip ) {\r\n                this.wantToSkip = false;\r\n                this.skipBar();\r\n            }\r\n\r\n            if (this.isModActive(ModSetting.mstReverb, true)) {\r\n                reverb = Math.pow(this.getModValue(ModSetting.mstReverb, true) / Config.reverbRange, 0.667) * 0.425;\r\n            }\r\n\r\n            // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\r\n\r\n            const tickSampleCountdown: number = this.tickSampleCountdown;\r\n            const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n            const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n            const ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\r\n            const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n            const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n            const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n            const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                for (let instrumentIdx: number = 0; instrumentIdx < this.song.instrumentsPerChannel; instrumentIdx++) {\r\n                    let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                    let useVibratoSpeed: number = instrument.vibratoSpeed;\r\n\r\n                    instrument.LFOtime = instrument.nextLFOtime;\r\n\r\n                    if (this.isModActive(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx)) {\r\n                        useVibratoSpeed = this.getModValue(ModSetting.mstVibratoSpeed, false, channel, instrumentIdx, false);\r\n                    }\r\n\r\n                    if (useVibratoSpeed == 0) {\r\n                        instrument.LFOtime = 0;\r\n                        instrument.nextLFOtime = 0;\r\n                    }\r\n                    else {\r\n                        instrument.nextLFOtime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n\r\n                if (channel == this.liveInputChannel) {\r\n                    this.determineLiveInputTones(this.song);\r\n\r\n                    for (let i: number = 0; i < this.liveInputTones.count(); i++) {\r\n                        const tone: Tone = this.liveInputTones.get(i);\r\n                        // Hmm. Will allow active input from a muted channel for now.\r\n                        //if (this.song.channels[channel].muted == false)\r\n                        this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n                    }\r\n                }\r\n\r\n                this.determineCurrentActiveTones(this.song, channel, playSong);\r\n                for (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n                    const tone: Tone = this.activeTones[channel].get(i);\r\n                    this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, false, false);\r\n                }\r\n\r\n                for (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n                    const tone: Tone = this.releasedTones[channel].get(i);\r\n                    if (tone.ticksSinceReleased >= tone.instrument.getTransition().releaseTicks) {\r\n                        this.freeReleasedTone(channel, i);\r\n                        i--;\r\n                        continue;\r\n                    }\r\n\r\n                    const shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n\r\n                    this.playTone(this.song, stereoBufferIndex, stereoBufferLength, channel, samplesPerTick, runLength, tone, true, shouldFadeOutFast);\r\n\r\n                }\r\n            }\r\n\r\n            // Post processing:\r\n            let chorusTap0Index: number = chorusDelayPos + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n            let chorusTap1Index: number = chorusDelayPos + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n            let chorusTap2Index: number = chorusDelayPos + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n            let chorusTap3Index: number = chorusDelayPos + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n            let chorusTap4Index: number = chorusDelayPos + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n            let chorusTap5Index: number = chorusDelayPos + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n            chorusPhase += chorusAngle * runLength;\r\n            const chorusTap0End: number = chorusDelayPos + runLength + chorusOffset0 - chorusRange * Math.sin(chorusPhase + 0);\r\n            const chorusTap1End: number = chorusDelayPos + runLength + chorusOffset1 - chorusRange * Math.sin(chorusPhase + 2.1);\r\n            const chorusTap2End: number = chorusDelayPos + runLength + chorusOffset2 - chorusRange * Math.sin(chorusPhase + 4.2);\r\n            const chorusTap3End: number = chorusDelayPos + runLength + 0x400 + chorusOffset3 - chorusRange * Math.sin(chorusPhase + 3.2);\r\n            const chorusTap4End: number = chorusDelayPos + runLength + 0x400 + chorusOffset4 - chorusRange * Math.sin(chorusPhase + 5.3);\r\n            const chorusTap5End: number = chorusDelayPos + runLength + 0x400 + chorusOffset5 - chorusRange * Math.sin(chorusPhase + 1.0);\r\n            const chorusTap0Delta: number = (chorusTap0End - chorusTap0Index) / runLength;\r\n            const chorusTap1Delta: number = (chorusTap1End - chorusTap1Index) / runLength;\r\n            const chorusTap2Delta: number = (chorusTap2End - chorusTap2Index) / runLength;\r\n            const chorusTap3Delta: number = (chorusTap3End - chorusTap3Index) / runLength;\r\n            const chorusTap4Delta: number = (chorusTap4End - chorusTap4Index) / runLength;\r\n            const chorusTap5Delta: number = (chorusTap5End - chorusTap5Index) / runLength;\r\n            const runEnd: number = bufferIndex + runLength;\r\n            for (let i: number = bufferIndex; i < runEnd; i++) {\r\n                const bufferIndexL: number = stereoBufferIndex;\r\n                const bufferIndexR: number = stereoBufferIndex + 1;\r\n                const sampleForNoneL: number = samplesForNone[bufferIndexL]; samplesForNone[bufferIndexL] = 0.0;\r\n                const sampleForNoneR: number = samplesForNone[bufferIndexR]; samplesForNone[bufferIndexR] = 0.0;\r\n                const sampleForReverbL: number = samplesForReverb[bufferIndexL]; samplesForReverb[bufferIndexL] = 0.0;\r\n                const sampleForReverbR: number = samplesForReverb[bufferIndexR]; samplesForReverb[bufferIndexR] = 0.0;\r\n                const sampleForChorusL: number = samplesForChorus[bufferIndexL]; samplesForChorus[bufferIndexL] = 0.0;\r\n                const sampleForChorusR: number = samplesForChorus[bufferIndexR]; samplesForChorus[bufferIndexR] = 0.0;\r\n                const sampleForChorusReverbL: number = samplesForChorusReverb[bufferIndexL]; samplesForChorusReverb[bufferIndexL] = 0.0;\r\n                const sampleForChorusReverbR: number = samplesForChorusReverb[bufferIndexR]; samplesForChorusReverb[bufferIndexR] = 0.0;\r\n                stereoBufferIndex += 2;\r\n\r\n                const combinedChorusL: number = sampleForChorusL + sampleForChorusReverbL;\r\n                const combinedChorusR: number = sampleForChorusR + sampleForChorusReverbR;\r\n\r\n                const chorusTap0Ratio: number = chorusTap0Index % 1;\r\n                const chorusTap1Ratio: number = chorusTap1Index % 1;\r\n                const chorusTap2Ratio: number = chorusTap2Index % 1;\r\n                const chorusTap3Ratio: number = chorusTap3Index % 1;\r\n                const chorusTap4Ratio: number = chorusTap4Index % 1;\r\n                const chorusTap5Ratio: number = chorusTap5Index % 1;\r\n                const chorusTap0A: number = chorusDelayLine[(chorusTap0Index) & 0x7FF];\r\n                const chorusTap0B: number = chorusDelayLine[(chorusTap0Index + 1) & 0x7FF];\r\n                const chorusTap1A: number = chorusDelayLine[(chorusTap1Index) & 0x7FF];\r\n                const chorusTap1B: number = chorusDelayLine[(chorusTap1Index + 1) & 0x7FF];\r\n                const chorusTap2A: number = chorusDelayLine[(chorusTap2Index) & 0x7FF];\r\n                const chorusTap2B: number = chorusDelayLine[(chorusTap2Index + 1) & 0x7FF];\r\n                const chorusTap3A: number = chorusDelayLine[(chorusTap3Index) & 0x7FF];\r\n                const chorusTap3B: number = chorusDelayLine[(chorusTap3Index + 1) & 0x7FF];\r\n                const chorusTap4A: number = chorusDelayLine[(chorusTap4Index) & 0x7FF];\r\n                const chorusTap4B: number = chorusDelayLine[(chorusTap4Index + 1) & 0x7FF];\r\n                const chorusTap5A: number = chorusDelayLine[(chorusTap5Index) & 0x7FF];\r\n                const chorusTap5B: number = chorusDelayLine[(chorusTap5Index + 1) & 0x7FF];\r\n                const chorusTap0: number = chorusTap0A + (chorusTap0B - chorusTap0A) * chorusTap0Ratio;\r\n                const chorusTap1: number = chorusTap1A + (chorusTap1B - chorusTap1A) * chorusTap1Ratio;\r\n                const chorusTap2: number = chorusTap2A + (chorusTap2B - chorusTap2A) * chorusTap2Ratio;\r\n                const chorusTap3: number = chorusTap3A + (chorusTap3B - chorusTap3A) * chorusTap3Ratio;\r\n                const chorusTap4: number = chorusTap4A + (chorusTap4B - chorusTap4A) * chorusTap4Ratio;\r\n                const chorusTap5: number = chorusTap5A + (chorusTap5B - chorusTap5A) * chorusTap5Ratio;\r\n                const chorusSampleL = 0.5 * (combinedChorusL - chorusTap0 + chorusTap1 - chorusTap2);\r\n                const chorusSampleR = 0.5 * (combinedChorusR - chorusTap3 + chorusTap4 - chorusTap5);\r\n                chorusDelayLine[chorusDelayPos] = combinedChorusL;\r\n                chorusDelayLine[(chorusDelayPos + 0x400) & 0x7FF] = combinedChorusR;\r\n                chorusDelayPos = (chorusDelayPos + 1) & 0x7FF;\r\n                chorusTap0Index += chorusTap0Delta;\r\n                chorusTap1Index += chorusTap1Delta;\r\n                chorusTap2Index += chorusTap2Delta;\r\n                chorusTap3Index += chorusTap3Delta;\r\n                chorusTap4Index += chorusTap4Delta;\r\n                chorusTap5Index += chorusTap5Delta;\r\n\r\n                // Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\r\n                // good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\r\n                // Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\r\n                // Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\r\n                const reverbDelayPos1: number = (reverbDelayPos + 3041) & 0x3FFF;\r\n                const reverbDelayPos2: number = (reverbDelayPos + 6426) & 0x3FFF;\r\n                const reverbDelayPos3: number = (reverbDelayPos + 10907) & 0x3FFF;\r\n                const reverbSample0: number = (reverbDelayLine[reverbDelayPos]);\r\n                const reverbSample1: number = reverbDelayLine[reverbDelayPos1];\r\n                const reverbSample2: number = reverbDelayLine[reverbDelayPos2];\r\n                const reverbSample3: number = reverbDelayLine[reverbDelayPos3];\r\n                const reverbTemp0: number = -(reverbSample0 + sampleForChorusReverbL + sampleForReverbL) + reverbSample1;\r\n                const reverbTemp1: number = -(reverbSample0 + sampleForChorusReverbR + sampleForReverbR) - reverbSample1;\r\n                const reverbTemp2: number = -reverbSample2 + reverbSample3;\r\n                const reverbTemp3: number = -reverbSample2 - reverbSample3;\r\n                reverbFeedback0 += ((reverbTemp0 + reverbTemp2) * reverb - reverbFeedback0) * 0.5;\r\n                reverbFeedback1 += ((reverbTemp1 + reverbTemp3) * reverb - reverbFeedback1) * 0.5;\r\n                reverbFeedback2 += ((reverbTemp0 - reverbTemp2) * reverb - reverbFeedback2) * 0.5;\r\n                reverbFeedback3 += ((reverbTemp1 - reverbTemp3) * reverb - reverbFeedback3) * 0.5;\r\n                reverbDelayLine[reverbDelayPos1] = reverbFeedback0;\r\n                reverbDelayLine[reverbDelayPos2] = reverbFeedback1;\r\n                reverbDelayLine[reverbDelayPos3] = reverbFeedback2;\r\n                reverbDelayLine[reverbDelayPos] = reverbFeedback3;\r\n                reverbDelayPos = (reverbDelayPos + 1) & 0x3FFF;\r\n\r\n                // Apply master pre-gain to the sound, before limiting. Master gain slider is 0-5, but it's squared for more range (0-25).\r\n                const sampleL = masterGain * masterGain * (sampleForNoneL + chorusSampleL + sampleForReverbL + reverbSample1 + reverbSample2 + reverbSample3);\r\n                const sampleR = masterGain * masterGain * (sampleForNoneR + chorusSampleR + sampleForReverbR + reverbSample0 + reverbSample2 - reverbSample3);\r\n\r\n                /*\r\n                highpassOutput = highpassOutput * highpassFilter + sample - highpassInput;\r\n                highpassInput = sample;\r\n                // use highpassOutput instead of sample below?\r\n                */\r\n\r\n                // A compressor/limiter.\r\n                const absL: number = sampleL < 0.0 ? -sampleL : sampleL;\r\n                const absR: number = sampleR < 0.0 ? -sampleR : sampleR;\r\n                const abs: number = absL > absR ? absL : absR;\r\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\r\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\r\n                const limitRange: number = (+(abs > compressionThreshold)) + (+(abs > limitThreshold));\r\n                // Determine the target amplification based on the range of the curve\r\n                const limitTarget: number =\r\n                    (+(limitRange == 0)) * (((abs + 1 - compressionThreshold) * 0.8 + 0.25) * compressionRatio + 1.05 * (1 - compressionRatio))\r\n                    + (+(limitRange == 1)) * (1.05)\r\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - limitThreshold) * limitRatio + (1 - limitThreshold)));\r\n                // Move the limit towards the target\r\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\r\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\r\n                outputDataL[i] = sampleL * limitedVolume;\r\n                outputDataR[i] = sampleR * limitedVolume;\r\n\r\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\r\n            }\r\n\r\n            bufferIndex += runLength;\r\n\r\n            this.tickSampleCountdown -= runLength;\r\n            if (this.tickSampleCountdown <= 0) {\r\n\r\n                // Track how long tones have been released, and free them if there are too many.\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let i: number = 0; i < this.releasedTones[channel].count(); i++) {\r\n                        const tone: Tone = this.releasedTones[channel].get(i);\r\n                        tone.ticksSinceReleased++;\r\n\r\n                        const shouldFadeOutFast: boolean = (i + this.activeTones[channel].count() >= Config.maximumTonesPerChannel);\r\n                        if (shouldFadeOutFast) {\r\n                            this.freeReleasedTone(channel, i);\r\n                            i--;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Update arpeggio time, which is used to calculate arpeggio position\r\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\r\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\r\n                        let useArpeggioSpeed: number = instrument.arpeggioSpeed;\r\n                        if (this.isModActive(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx)) {\r\n                            useArpeggioSpeed = this.getModValue(ModSetting.mstArpeggioSpeed, false, channel, instrumentIdx, false);\r\n                            if (Number.isInteger(useArpeggioSpeed)) {\r\n                                instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                            } else {\r\n                                // Linear interpolate arpeggio values\r\n                                instrument.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\r\n                            }\r\n                        }\r\n                        else {\r\n                            instrument.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                this.tick++;\r\n                this.tickSampleCountdown += samplesPerTick;\r\n                if (this.tick == Config.ticksPerPart) {\r\n                    this.tick = 0;\r\n                    this.part++;\r\n                    this.liveInputDuration--;\r\n                    var atEnd = this.part + this.beat * Config.partsPerBeat >= this.findPartsInBar(this.bar) - 1;\r\n                    // Check if any active tones should be released.\r\n                    for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\r\n                        // Check if we're at the end of the bar and have a tie-over transition. If so, do not free tone\r\n                        var carryOver = false;\r\n                        var toneCount = this.activeTones[channel].count();\r\n                        var pattern = this.song.getPattern(channel, this.bar);\r\n                        if ( pattern != null && atEnd ) {\r\n                            var instrument = pattern.instrument;\r\n                            if ( this.song.channels[channel].instruments[instrument].tieNoteTransition && toneCount > 0 ) {\r\n                                // Verify that all tie conditions are met\r\n                                // 1. Check for a note in this channel at the start of the next bar\r\n                                // 2. Check that the note's volume start matches the current volume\r\n                                // 3. Check that the shape (pitches, chord size) is a match\r\n                                // 4. Check that the instruments are the same\r\n                                var targetBar = this.bar + 1;\r\n                                if ( targetBar >= this.song.barCount || (targetBar >= this.song.loopStart + this.song.loopLength && this.loopRepeatCount != 0)) {\r\n                                    targetBar = this.song.loopStart;\r\n                                }\r\n                                var nextPattern = this.song.getPattern(channel, targetBar);\r\n                                var currNote = this.activeTones[channel].get(0).note;\r\n                                if ( currNote != null ) {\r\n                                    var pin = 0;\r\n                                    while ( currNote.pins[pin].time + currNote.start < this.part + this.beat * Config.partsPerBeat && pin < currNote.pins.length-1 )\r\n                                        pin++;\r\n                                    var currVolume = currNote.pins[pin].volume;\r\n                                    var lastInterval = currNote.pins[pin].interval;\r\n\r\n                                    if ( nextPattern != null && nextPattern.instrument == instrument ) {\r\n                                        for( let i: number = 0; i < nextPattern.notes.length; i++ ) {\r\n                                            if ( nextPattern.notes[i].start == 0\r\n                                                && nextPattern.notes[i].pins[0].volume == currVolume\r\n                                                && nextPattern.notes[i].pitches.length == currNote.pitches.length ) {\r\n                                                \r\n                                                carryOver = true;\r\n                                                for ( let j: number = 0; j < currNote.pitches.length; j++ ) {\r\n                                                    // Allow any pitch order\r\n                                                    if ( nextPattern.notes[i].pitches.findIndex( (p) => p == currNote!.pitches[j] + lastInterval ) == -1 ) {\r\n                                                        carryOver = false;\r\n                                                        j = currNote.pitches.length;\r\n                                                    }\r\n                                                }\r\n                                                i = nextPattern.notes.length;\r\n                                                \r\n                                                if ( carryOver ) {\r\n                                                    // Prior to an actual tie, all releasing for hard transitions also needs to be\r\n                                                    // cancelled. So, this check is ran a few parts before the end of a bar too.\r\n                                                    // In those cases, just set tyingOver to 0 for that duration to cancel release\r\n                                                    // handling, but not affect note start time calculations.\r\n                                                    if ( this.part + this.beat * Config.partsPerBeat < this.findPartsInBar(this.bar) ) {\r\n                                                        // Only does this if it is needed, so if we're long tying (next else-if below) then don't ruin the math.\r\n                                                        if ( this.tyingOver[channel] < 0 ) {\r\n                                                            this.tyingOver[channel] = 0;\r\n                                                        }\r\n                                                    }\r\n                                                    // Special case: tying over a whole bar, just add the length.\r\n                                                    else if ( currNote.start == 0 && this.tyingOver[channel] >= 0 ) {\r\n                                                        this.tyingOver[channel] += this.part + this.beat * Config.partsPerBeat;\r\n                                                    }\r\n                                                    else {\r\n                                                        // Set tyingOver to a number >= 0 representing how many parts back the tie note started.\r\n                                                        this.tyingOver[channel] = this.part + this.beat * Config.partsPerBeat - currNote.start;\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        for (let i: number = 0; i < this.activeTones[channel].count(); i++) {\r\n                            const tone: Tone = this.activeTones[channel].get(i);\r\n                            const transition: Transition = tone.instrument.getTransition();\r\n                            \r\n                            if (tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n                                // Free tone if the transition allows\r\n                                if (!(transition.isSeamless || tone.instrument.clicklessTransition || this.tyingOver[channel] >= 0)) {\r\n                                    if (transition.releases) {\r\n                                        this.releaseTone(channel, tone);\r\n                                    } else {\r\n                                        this.freeTone(tone);\r\n                                    }\r\n                                    this.activeTones[channel].remove(i);\r\n                                    i--;\r\n                                }\r\n\r\n                                // End of note: if not actively trying to carry over, kill note tie\r\n                                if ( !carryOver ) {\r\n                                    this.tyingOver[channel] = -1;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    for (let channel: number = 0; channel < this.song.modChannelCount; channel++) {\r\n                        for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                            for (let i: number = 0; i < this.activeModTones[channel][mod].count(); i++) {\r\n                                const tone: Tone = this.activeModTones[channel][mod].get(i);\r\n                                const transition: Transition = tone.instrument.getTransition();\r\n                                if (!transition.isSeamless && tone.note != null && tone.note.end == this.part + this.beat * Config.partsPerBeat) {\r\n                                    this.freeTone(tone);\r\n                                    this.activeModTones[channel][mod].remove(i);\r\n                                    i--;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    if (this.part == Config.partsPerBeat) {\r\n                        this.part = 0;\r\n\r\n                        if (playSong) {\r\n                            this.beat++;\r\n                            if (this.beat == this.song.beatsPerBar) {\r\n                                // bar changed, reset for next bar:\r\n                                this.beat = 0;\r\n                                this.bar++;\r\n                                if (this.loopRepeatCount != 0 && this.bar == this.song.loopStart + this.song.loopLength) {\r\n                                    this.bar = this.song.loopStart;\r\n                                    if (this.loopRepeatCount > 0) this.loopRepeatCount--;\r\n                                }\r\n                                if (this.bar >= this.song.barCount) {\r\n                                    this.bar = 0;\r\n                                    if (this.loopRepeatCount != -1) {\r\n                                        ended = true;\r\n                                        this.resetEffects();\r\n                                        this.pause();\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Update mod values so that next values copy to current values\r\n            for (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\r\n                    this.modValues[setting] = this.nextModValues[setting];\r\n            }\r\n\r\n            // Set samples per tick if song tempo mods changed it\r\n            if (this.isModActive(ModSetting.mstTempo, true)) {\r\n                samplesPerTick = this.getSamplesPerTick();\r\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\r\n            }\r\n\r\n            // Bound LFO times to be within their period (to keep values from getting large)\r\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\r\n            for (let channel: number = 0; channel < this.song.pitchChannelCount; channel++) {\r\n                for (let instrument of this.song.channels[channel].instruments) {\r\n                    instrument.nextLFOtime = (instrument.nextLFOtime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\r\n                    instrument.arpTime = (instrument.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\r\n                }\r\n            }\r\n\r\n            for (let setting: number = 0; setting < ModSetting.mstMaxValue; setting++) {\r\n                for (let channel: number = 0; channel < channelCount; channel++) {\r\n                    for (let instrument: number = 0; instrument < this.song.instrumentsPerChannel; instrument++) {\r\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\r\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        // Optimization: Avoid persistent reverb values in the float denormal range.\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < reverbFeedback0 && reverbFeedback0 < epsilon) reverbFeedback0 = 0.0;\r\n        if (-epsilon < reverbFeedback1 && reverbFeedback1 < epsilon) reverbFeedback1 = 0.0;\r\n        if (-epsilon < reverbFeedback2 && reverbFeedback2 < epsilon) reverbFeedback2 = 0.0;\r\n        if (-epsilon < reverbFeedback3 && reverbFeedback3 < epsilon) reverbFeedback3 = 0.0;\r\n        //if (-epsilon < highpassInput && highpassInput < epsilon) highpassInput = 0.0;\r\n        //if (-epsilon < highpassOutput && highpassOutput < epsilon) highpassOutput = 0.0;\r\n        if (-epsilon < limit && limit < epsilon) limit = 0.0;\r\n\r\n        this.stereoBufferIndex = (this.stereoBufferIndex + outputBufferLength * 2) % stereoBufferLength;\r\n        this.chorusPhase = chorusPhase;\r\n        this.chorusDelayPos = chorusDelayPos;\r\n        this.reverbDelayPos = reverbDelayPos;\r\n        this.reverbFeedback0 = reverbFeedback0;\r\n        this.reverbFeedback1 = reverbFeedback1;\r\n        this.reverbFeedback2 = reverbFeedback2;\r\n        this.reverbFeedback3 = reverbFeedback3;\r\n        //this.highpassInput = highpassInput;\r\n        //this.highpassOutput = highpassOutput;\r\n        this.limit = limit;\r\n\r\n        if (playSong) {\r\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / this.song.beatsPerBar + this.bar;\r\n        }\r\n\r\n        /*\r\n        const synthDuration: number = performance.now() - synthStartTime;\r\n        // Performance measurements:\r\n        samplesAccumulated += outputBufferLength;\r\n        samplePerformance += synthDuration;\r\n    \t\r\n        if (samplesAccumulated >= 44100 * 4) {\r\n        const secondsGenerated = samplesAccumulated / 44100;\r\n        const secondsRequired = samplePerformance / 1000;\r\n        const ratio = secondsRequired / secondsGenerated;\r\n        console.log(ratio);\r\n        samplePerformance = 0;\r\n        samplesAccumulated = 0;\r\n        }\r\n        */\r\n    }\r\n\r\n    private freeTone(tone: Tone): void {\r\n        this.tonePool.pushBack(tone);\r\n    }\r\n\r\n    private newTone(): Tone {\r\n        if (this.tonePool.count() > 0) {\r\n            const tone: Tone = this.tonePool.popBack();\r\n            tone.reset();\r\n            tone.active = false;\r\n            return tone;\r\n        }\r\n        return new Tone();\r\n    }\r\n\r\n    private releaseTone(channel: number, tone: Tone): void {\r\n        if (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n            this.releasedTones[channel].pushFront(tone);\r\n        }\r\n        else {\r\n            /*\r\n            for (let mod = 0; mod < Config.modCount; mod++) {\r\n            this.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].pushFront(tone);\r\n            }\r\n            */\r\n        }\r\n    }\r\n\r\n    private freeReleasedTone(channel: number, toneIndex: number): void {\r\n        if (this.song == null || !this.song.getChannelIsMod(channel)) {\r\n            this.freeTone(this.releasedTones[channel].get(toneIndex));\r\n            this.releasedTones[channel].remove(toneIndex);\r\n        } else {\r\n            /*\r\n            for (let mod = 0; mod < Config.modCount; mod++) {\r\n            this.freeTone(this.releasedModTones[channel - (this.song.pitchChannelCount + this.song.noiseChannelCount)][mod].get(toneIndex));\r\n            this.releasedModTones[channel][mod].remove(toneIndex);\r\n            }\r\n            */\r\n        }\r\n    }\r\n\r\n    public freeAllTones(): void {\r\n        while (this.liveInputTones.count() > 0) {\r\n            this.freeTone(this.liveInputTones.popBack());\r\n        }\r\n        for (let i: number = 0; i < this.activeTones.length; i++) {\r\n            while (this.activeTones[i].count() > 0) {\r\n                this.freeTone(this.activeTones[i].popBack());\r\n            }\r\n        }\r\n        for (let i: number = 0; i < this.releasedTones.length; i++) {\r\n            while (this.releasedTones[i].count() > 0) {\r\n                this.freeTone(this.releasedTones[i].popBack());\r\n            }\r\n        }\r\n        for (let i = 0; i < this.activeModTones.length; i++) {\r\n            for (let mod = 0; mod < this.activeModTones[i].length; mod++) {\r\n                while (this.activeModTones[i][mod].count() > 0) {\r\n                    this.freeTone(this.activeModTones[i][mod].popBack());\r\n                }\r\n            }\r\n        }\r\n        /*\r\n        for (let i = 0; i < this.releasedModTones.length; i++) {\r\n        for (let mod = 0; mod < this.releasedModTones[i].length; mod++) {\r\n        while (this.releasedModTones[i][mod].count() > 0) {\r\n        this.freeTone(this.releasedModTones[i][mod].popBack());\r\n        }\r\n        }\r\n        }\r\n        */\r\n    }\r\n\r\n    private determineLiveInputTones(song: Song): void {\r\n        const toneList: Deque<Tone> = this.liveInputTones;\r\n        const pitches: number[] = this.liveInputPitches;\r\n        let toneCount: number = 0;\r\n        if (this.liveInputDuration > 0) {\r\n            const instrument: Instrument = song.channels[this.liveInputChannel].instruments[song.getPatternInstrument(this.liveInputChannel, this.bar)];\r\n\r\n            if (instrument.getChord().arpeggiates) {\r\n                let tone: Tone;\r\n                if (toneList.count() == 0) {\r\n                    tone = this.newTone();\r\n                    toneList.pushBack(tone);\r\n                } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                    this.releaseTone(this.liveInputChannel, toneList.popFront());\r\n                    tone = this.newTone();\r\n                    toneList.pushBack(tone);\r\n                } else {\r\n                    tone = toneList.get(0);\r\n                }\r\n                toneCount = 1;\r\n\r\n                for (let i: number = 0; i < pitches.length; i++) {\r\n                    tone.pitches[i] = pitches[i];\r\n                }\r\n                tone.pitchCount = pitches.length;\r\n                tone.chordSize = 1;\r\n                tone.instrument = instrument;\r\n                tone.note = tone.prevNote = tone.nextNote = null;\r\n            } else {\r\n                //const transition: Transition = instrument.getTransition();\r\n                for (let i: number = 0; i < pitches.length; i++) {\r\n                    //const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n\r\n                    let tone: Tone;\r\n                    if (toneList.count() <= i) {\r\n                        tone = this.newTone();\r\n                        toneList.pushBack(tone);\r\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\r\n                        this.releaseTone(this.liveInputChannel, toneList.get(i));\r\n                        tone = this.newTone();\r\n                        toneList.set(i, tone);\r\n                    } else {\r\n                        tone = toneList.get(i);\r\n                    }\r\n                    toneCount++;\r\n\r\n                    tone.pitches[0] = pitches[i];\r\n                    tone.pitchCount = 1;\r\n                    tone.chordSize = pitches.length;\r\n                    tone.instrument = instrument;\r\n                    tone.note = tone.prevNote = tone.nextNote = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        while (toneList.count() > toneCount) {\r\n            this.releaseTone(this.liveInputChannel, toneList.popBack());\r\n        }\r\n\r\n        this.liveInputStarted = false;\r\n    }\r\n\r\n    private determineCurrentActiveTones(song: Song, channel: number, playSong: boolean): void {\r\n        const instrument: Instrument = song.channels[channel].instruments[song.getPatternInstrument(channel, this.bar)];\r\n        const pattern: Pattern | null = song.getPattern(channel, this.bar);\r\n        const time: number = this.part + this.beat * Config.partsPerBeat;\r\n\r\n        if (playSong && song.getChannelIsMod(channel) && !song.channels[channel].muted) {\r\n            // Offset channel (first mod channel is 0 index in mod tone array)\r\n            let modChannelIdx = channel - (song.pitchChannelCount + song.noiseChannelCount);\r\n\r\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\r\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\r\n            let notes: (Note | null)[] = [];\r\n            let prevNotes: (Note | null)[] = [];\r\n            let nextNotes: (Note | null)[] = [];\r\n            let fillCount: number = Config.modCount;\r\n            while (fillCount--) {\r\n                notes.push(null);\r\n                prevNotes.push(null);\r\n                nextNotes.push(null);\r\n            }\r\n\r\n            if (pattern != null) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= time) {\r\n                        // Actually need to check which note starts closer to the start of this note.\r\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                    else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                    }\r\n                    else if (pattern.notes[i].start > time) {\r\n                        // Actually need to check which note starts closer to the end of this note.\r\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\r\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\r\n                const toneList: Deque<Tone> = this.activeModTones[modChannelIdx][mod];\r\n                if (notes[mod] != null) {\r\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\r\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\r\n                    this.syncTones(channel, toneList, instrument, (notes[mod] as Note).pitches, (notes[mod] as Note), (prevNotes[mod] as Note), (nextNotes[mod] as Note), time);\r\n                } else {\r\n                    while (toneList.count() > 0) {\r\n                        this.freeTone(toneList.popBack());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else if (!song.getChannelIsMod(channel)) {\r\n\r\n            let note: Note | null = null;\r\n            let prevNote: Note | null = null;\r\n            let nextNote: Note | null = null;\r\n\r\n            if (playSong && pattern != null && !song.channels[channel].muted) {\r\n                for (let i: number = 0; i < pattern.notes.length; i++) {\r\n                    if (pattern.notes[i].end <= time) {\r\n                        prevNote = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start <= time && pattern.notes[i].end > time) {\r\n                        note = pattern.notes[i];\r\n                    } else if (pattern.notes[i].start > time) {\r\n                        nextNote = pattern.notes[i];\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            const toneList: Deque<Tone> = this.activeTones[channel];\r\n            if (note != null) {\r\n                if (prevNote != null && prevNote.end != note.start) prevNote = null;\r\n                if (nextNote != null && nextNote.start != note.end) nextNote = null;\r\n                this.syncTones(channel, toneList, instrument, note.pitches, note, prevNote, nextNote, time);\r\n            } else {\r\n                while (toneList.count() > 0) {\r\n                    // Automatically free or release seamless tones if there's no new note to take over.\r\n                    if (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n                        this.releaseTone(channel, toneList.popBack());\r\n                    } else {\r\n                        this.freeTone(toneList.popBack());\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private syncTones(channel: number, toneList: Deque<Tone>, instrument: Instrument, pitches: number[], note: Note, prevNote: Note | null, nextNote: Note | null, currentPart: number): void {\r\n        let toneCount: number = 0;\r\n        if (instrument.getChord().arpeggiates) {\r\n            let tone: Tone;\r\n            if (toneList.count() == 0) {\r\n                tone = this.newTone();\r\n                toneList.pushBack(tone);\r\n            } else {\r\n                tone = toneList.get(0);\r\n            }\r\n            toneCount = 1;\r\n\r\n            for (let i: number = 0; i < pitches.length; i++) {\r\n                tone.pitches[i] = pitches[i];\r\n            }\r\n            tone.pitchCount = pitches.length;\r\n            tone.chordSize = 1;\r\n            tone.instrument = instrument;\r\n            tone.note = note;\r\n            tone.noteStart = note.start - Math.max(0, this.tyingOver[channel]);\r\n            tone.noteEnd = note.end;\r\n            tone.prevNote = prevNote;\r\n            tone.nextNote = nextNote;\r\n            tone.prevNotePitchIndex = 0;\r\n            tone.nextNotePitchIndex = 0;\r\n        } else {\r\n            const transition: Transition = instrument.getTransition();\r\n            for (let i: number = 0; i < pitches.length; i++) {\r\n\r\n                const strumOffsetParts: number = i * instrument.getChord().strumParts;\r\n                let prevNoteForThisTone: Note | null = (prevNote && prevNote.pitches.length > i) ? prevNote : null;\r\n                let noteForThisTone: Note = note;\r\n                let nextNoteForThisTone: Note | null = (nextNote && nextNote.pitches.length > i) ? nextNote : null;\r\n                let noteStart: number = noteForThisTone.start + strumOffsetParts - Math.max(0, this.tyingOver[channel]);\r\n\r\n                if (noteStart > currentPart) {\r\n                    if (toneList.count() > i && (transition.isSeamless || this.tyingOver[channel] >= 0 ) && prevNoteForThisTone != null) {\r\n                        nextNoteForThisTone = noteForThisTone;\r\n                        noteForThisTone = prevNoteForThisTone;\r\n                        prevNoteForThisTone = null;\r\n                        noteStart = noteForThisTone.start + strumOffsetParts - Math.max(0, this.tyingOver[channel]) ;\r\n                    } else {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                let noteEnd: number = noteForThisTone.end;\r\n                if ((transition.isSeamless || this.tyingOver[channel] >= 0 ) && nextNoteForThisTone != null) {\r\n                    noteEnd = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEnd + strumOffsetParts);\r\n                }\r\n\r\n\r\n                let tone: Tone;\r\n                if (toneList.count() <= i) {\r\n                    tone = this.newTone();\r\n                    toneList.pushBack(tone);\r\n                } else {\r\n                    tone = toneList.get(i);\r\n                }\r\n                toneCount++;\r\n\r\n                tone.pitches[0] = noteForThisTone.pitches[i];\r\n                tone.pitchCount = 1;\r\n                tone.chordSize = noteForThisTone.pitches.length;\r\n                tone.instrument = instrument;\r\n                tone.note = noteForThisTone;\r\n                tone.noteStart = noteStart;\r\n                tone.noteEnd = noteEnd;\r\n                tone.prevNote = prevNoteForThisTone;\r\n                tone.nextNote = nextNoteForThisTone;\r\n                tone.prevNotePitchIndex = i;\r\n                tone.nextNotePitchIndex = i;\r\n\r\n            }\r\n        }\r\n\r\n        while (toneList.count() > toneCount) {\r\n            // Automatically free or release seamless tones if there's no new note to take over.\r\n            if (toneList.peakBack().instrument.getTransition().releases && this.tyingOver[channel] < 0) {\r\n                this.releaseTone(channel, toneList.popBack());\r\n            } else {\r\n                this.freeTone(toneList.popBack());\r\n            }\r\n        }\r\n    }\r\n\r\n    private playTone(song: Song, stereoBufferIndex: number, stereoBufferLength: number, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        Synth.computeTone(this, song, channel, samplesPerTick, runLength, tone, released, shouldFadeOutFast);\r\n        let synthBuffer: Float32Array;\r\n        switch (tone.instrument.effects) {\r\n            case 0: synthBuffer = this.samplesForNone!; break;\r\n            case 1: synthBuffer = this.samplesForReverb!; break;\r\n            case 2: synthBuffer = this.samplesForChorus!; break;\r\n            case 3: synthBuffer = this.samplesForChorusReverb!; break;\r\n            default: throw new Error();\r\n        }\r\n        const synthesizer: Function = Synth.getInstrumentSynthFunction(tone.instrument);\r\n        synthesizer(this, synthBuffer, stereoBufferIndex, stereoBufferLength, runLength * 2, tone, tone.instrument);\r\n    }\r\n\r\n    private static computeEnvelope(envelope: Envelope, time: number, beats: number, customVolume: number): number {\r\n        switch (envelope.type) {\r\n            case EnvelopeType.custom: return customVolume;\r\n            case EnvelopeType.steady: return 1.0;\r\n            case EnvelopeType.twang:\r\n                return 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.swell:\r\n                return 1.0 - 1.0 / (1.0 + time * envelope.speed);\r\n            case EnvelopeType.tremolo:\r\n                return 0.5 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.5;\r\n            case EnvelopeType.tremolo2:\r\n                return 0.75 - Math.cos(beats * 2.0 * Math.PI * envelope.speed) * 0.25;\r\n            case EnvelopeType.punch:\r\n                return Math.max(1.0, 2.0 - time * 10.0);\r\n            case EnvelopeType.flare:\r\n                const speed: number = envelope.speed;\r\n                const attack: number = 0.25 / Math.sqrt(speed);\r\n                return time < attack ? time / attack : 1.0 / (1.0 + (time - attack) * speed);\r\n            case EnvelopeType.decay:\r\n                return Math.pow(2, -envelope.speed * time);\r\n            default: throw new Error(\"Unrecognized operator envelope type.\");\r\n        }\r\n    }\r\n\r\n    private static computeChordVolume(chordSize: number): number {\r\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\r\n    }\r\n\r\n    private static computeTone(synth: Synth, song: Song, channel: number, samplesPerTick: number, runLength: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\r\n        const instrument: Instrument = tone.instrument;\r\n        const transition: Transition = instrument.getTransition();\r\n        const chord: Chord = instrument.getChord();\r\n        const chordVolume: number = chord.arpeggiates ? 1 : Synth.computeChordVolume(tone.chordSize);\r\n        const isNoiseChannel: boolean = song.getChannelIsNoise(channel);\r\n        const intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\r\n        const secondsPerPart: number = Config.ticksPerPart * samplesPerTick / synth.samplesPerSecond;\r\n        const beatsPerPart: number = 1.0 / Config.partsPerBeat;\r\n        const toneWasActive: boolean = tone.active;\r\n        const tickSampleCountdown: number = synth.tickSampleCountdown;\r\n        const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\r\n        const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\r\n        const ticksIntoBar: number = (synth.beat * Config.partsPerBeat + synth.part) * Config.ticksPerPart + synth.tick;\r\n        const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\r\n        const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\r\n        const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\r\n        const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\r\n        const instrumentIdx: number = (synth.song as Song).channels[channel].instruments.findIndex(i => i == instrument);\r\n        const treatAsSeamless: boolean = transition.isSeamless || synth.tyingOver[channel] >= 0;\r\n            \r\n        tone.phaseDeltaScale = 0.0;\r\n        tone.filter = 1.0;\r\n        tone.filterScale = 1.0;\r\n        tone.vibratoScale = 0.0;\r\n        tone.intervalMult = 1.0;\r\n        tone.intervalVolumeMult = 1.0;\r\n        tone.active = false;\r\n\r\n        let startPan: number = instrument.pan;\r\n        let endPan: number = instrument.pan;\r\n        if (synth.isModActive(ModSetting.mstPan, false, channel, instrumentIdx)) {\r\n            startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\r\n            endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\r\n        }\r\n\r\n        let startPanDelay: number = instrument.panDelay;\r\n        let endPanDelay: number = instrument.panDelay;\r\n        if (synth.isModActive(ModSetting.mstPanDelay, false, channel, instrumentIdx)) {\r\n            startPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, false);\r\n            endPanDelay = synth.getModValue(ModSetting.mstPanDelay, false, channel, instrumentIdx, true);\r\n        }\r\n\r\n        const useStartPan: number = (startPan - Config.panCenter) / Config.panCenter;\r\n        const useEndPan: number = (endPan - Config.panCenter) / Config.panCenter;\r\n        // 10 pan delay is the same amount as vanilla beepbox.\r\n        const maxDelayStart: number = startPanDelay * 0.00013 * synth.samplesPerSecond;\r\n        const maxDelayEnd: number = endPanDelay * 0.00013 * synth.samplesPerSecond;\r\n        tone.stereoDelayStart = -useStartPan * maxDelayStart;\r\n        const delayEnd: number = -useEndPan * maxDelayEnd;\r\n        tone.stereoDelayDelta = (delayEnd - tone.stereoDelayStart) / runLength;\r\n        tone.stereoVolumeLStart = Math.cos((1 + useStartPan) * Math.PI * 0.25) * 1.414;\r\n        tone.stereoVolumeRStart = Math.cos((1 - useStartPan) * Math.PI * 0.25) * 1.414;\r\n        const stereoVolumeLEnd: number = Math.cos((1 + useEndPan) * Math.PI * 0.25) * 1.414;\r\n        const stereoVolumeREnd: number = Math.cos((1 - useEndPan) * Math.PI * 0.25) * 1.414;\r\n        tone.stereoVolumeLDelta = (stereoVolumeLEnd - tone.stereoVolumeLStart) / runLength;\r\n        tone.stereoVolumeRDelta = (stereoVolumeREnd - tone.stereoVolumeRStart) / runLength;\r\n\r\n        let resetPhases: boolean = true;\r\n        let partsSinceStart: number = 0.0;\r\n        let intervalStart: number = 0.0;\r\n        let intervalEnd: number = 0.0;\r\n        let transitionVolumeStart: number = 1.0;\r\n        let transitionVolumeEnd: number = 1.0;\r\n        let chordVolumeStart: number = chordVolume;\r\n        let chordVolumeEnd: number = chordVolume;\r\n        let customVolumeStart: number = 0.0;\r\n        let customVolumeEnd: number = 0.0;\r\n        let decayTimeStart: number = 0.0;\r\n        let decayTimeEnd: number = 0.0;\r\n\r\n        let volumeReferencePitch: number;\r\n        let basePitch: number;\r\n        let baseVolume: number;\r\n        let pitchDamping: number;\r\n        if (instrument.type == InstrumentType.spectrum) {\r\n            if (isNoiseChannel) {\r\n                basePitch = Config.spectrumBasePitch;\r\n                baseVolume = 0.6; // Note: spectrum is louder for drum channels than pitch channels!\r\n            } else {\r\n                basePitch = Config.keys[song.key].basePitch;\r\n                baseVolume = 0.3;\r\n            }\r\n            volumeReferencePitch = Config.spectrumBasePitch;\r\n            pitchDamping = 28;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            basePitch = Config.spectrumBasePitch;\r\n            baseVolume = 0.45;\r\n            volumeReferencePitch = basePitch;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            basePitch = Config.chipNoises[instrument.chipNoise].basePitch;\r\n            baseVolume = 0.19;\r\n            volumeReferencePitch = basePitch;\r\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\r\n        } else if (instrument.type == InstrumentType.fm) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.03;\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.03375; // looks low compared to drums, but it's doubled for chorus and drums tend to be loud anyway.\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.025;\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            basePitch = Config.keys[song.key].basePitch;\r\n            baseVolume = 0.04725;\r\n            volumeReferencePitch = 16;\r\n            pitchDamping = 48;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            baseVolume = 1.0;\r\n            volumeReferencePitch = 0;\r\n            pitchDamping = 1.0;\r\n            basePitch = 0;\r\n        } else {\r\n            throw new Error(\"Unknown instrument type in computeTone.\");\r\n        }\r\n\r\n        for (let i: number = 0; i < Config.operatorCount; i++) {\r\n            tone.phaseDeltas[i] = 0.0;\r\n            tone.volumeStarts[i] = 0.0;\r\n            tone.volumeDeltas[i] = 0.0;\r\n        }\r\n\r\n        if (released) {\r\n            const ticksSoFar: number = tone.noteLengthTicks + tone.ticksSinceReleased;\r\n            const startTicksSinceReleased: number = tone.ticksSinceReleased + startRatio;\r\n            const endTicksSinceReleased: number = tone.ticksSinceReleased + endRatio;\r\n            const startTick: number = tone.noteLengthTicks + startTicksSinceReleased;\r\n            const endTick: number = tone.noteLengthTicks + endTicksSinceReleased;\r\n            const toneTransition: Transition = tone.instrument.getTransition();\r\n            resetPhases = false;\r\n            partsSinceStart = Math.floor(ticksSoFar / Config.ticksPerPart);\r\n            intervalStart = intervalEnd = tone.lastInterval;\r\n            customVolumeStart = customVolumeEnd = Synth.expressionToVolumeMult(tone.lastVolume);\r\n            transitionVolumeStart = Synth.expressionToVolumeMult((1.0 - startTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n            transitionVolumeEnd = Synth.expressionToVolumeMult((1.0 - endTicksSinceReleased / toneTransition.releaseTicks) * 6.0);\r\n            decayTimeStart = startTick / Config.ticksPerPart;\r\n            decayTimeEnd = endTick / Config.ticksPerPart;\r\n\r\n            if (shouldFadeOutFast) {\r\n                transitionVolumeStart *= 1.0 - startRatio;\r\n                transitionVolumeEnd *= 1.0 - endRatio;\r\n            }\r\n        } else if (tone.note == null) {\r\n            transitionVolumeStart = transitionVolumeEnd = 1;\r\n            customVolumeStart = customVolumeEnd = 1;\r\n            tone.lastInterval = 0;\r\n            tone.lastVolume = 6;\r\n            tone.ticksSinceReleased = 0;\r\n            resetPhases = false;\r\n\r\n            const heldTicksStart: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n            tone.liveInputSamplesHeld += runLength;\r\n            const heldTicksEnd: number = tone.liveInputSamplesHeld / samplesPerTick;\r\n            tone.noteLengthTicks = heldTicksEnd;\r\n            const heldPartsStart: number = heldTicksStart / Config.ticksPerPart;\r\n            const heldPartsEnd: number = heldTicksEnd / Config.ticksPerPart;\r\n            partsSinceStart = Math.floor(heldPartsStart);\r\n            decayTimeStart = heldPartsStart;\r\n            decayTimeEnd = heldPartsEnd;\r\n        } else {\r\n            const note: Note = tone.note;\r\n            const prevNote: Note | null = tone.prevNote;\r\n            const nextNote: Note | null = tone.nextNote;\r\n\r\n            const time: number = synth.part + synth.beat * Config.partsPerBeat;\r\n            const partsPerBar: number = Config.partsPerBeat * song.beatsPerBar;\r\n            const noteStart: number = tone.noteStart;// - Math.max(0, synth.tyingOver[channel] || 0);\r\n            const noteEnd: number = tone.noteEnd;\r\n\r\n            partsSinceStart = time - noteStart;\r\n\r\n            let endPinIndex: number;\r\n            for (endPinIndex = 1; endPinIndex < note.pins.length - 1; endPinIndex++) {\r\n                if (note.pins[endPinIndex].time + note.start > time) break;\r\n            }\r\n            const startPin: NotePin = note.pins[endPinIndex - 1];\r\n            const endPin: NotePin = note.pins[endPinIndex];\r\n            const noteStartTick: number = noteStart * Config.ticksPerPart;\r\n            const noteEndTick: number = noteEnd * Config.ticksPerPart;\r\n            const noteLengthTicks: number = noteEndTick - noteStartTick;\r\n            const pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\r\n            const pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\r\n\r\n            tone.lastInterval = note.pins[note.pins.length - 1].interval;\r\n            tone.lastVolume = note.pins[note.pins.length - 1].volume;\r\n            tone.ticksSinceReleased = 0;\r\n            tone.noteLengthTicks = noteLengthTicks;\r\n\r\n            const tickTimeStart: number = time * Config.ticksPerPart + synth.tick;\r\n            const tickTimeEnd: number = time * Config.ticksPerPart + synth.tick + 1;\r\n            const noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\r\n            const noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\r\n            const pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\r\n            const pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\r\n            let customVolumeTickStart: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioStart;\r\n            let customVolumeTickEnd: number = startPin.volume + (endPin.volume - startPin.volume) * pinRatioEnd;\r\n            let transitionVolumeTickStart: number = 1.0;\r\n            let transitionVolumeTickEnd: number = 1.0;\r\n            let chordVolumeTickStart: number = chordVolume;\r\n            let chordVolumeTickEnd: number = chordVolume;\r\n            let intervalTickStart: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\r\n            let intervalTickEnd: number = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\r\n            let decayTimeTickStart: number = partTimeTickStart - noteStart;\r\n            let decayTimeTickEnd: number = partTimeTickEnd - noteStart;\r\n            resetPhases = (tickTimeStart + startRatio - noteStartTick == 0.0) || !toneWasActive;\r\n\r\n            // if seamless, don't reset phases at start. (it's probably not necessary to constantly reset phases if there are no notes? Just do it once when note starts? But make sure that reset phases doesn't also reset stuff that this function did to set up the tone. Remember when the first run length was lost!\r\n            // if slide, average the interval, decayTime, and custom volume at the endpoints and interpolate between over slide duration.\r\n            // note that currently seamless and slide make different assumptions about whether a note at the end of a bar will connect with the next bar!\r\n            const maximumSlideTicks: number = noteLengthTicks * 0.5;\r\n            if (treatAsSeamless && !transition.slides && note.start == 0) {\r\n                // Special case for seamless, no-slide transition: assume the previous bar ends with another seamless note, don't reset tone history.\r\n                resetPhases = !toneWasActive;\r\n            } else if (treatAsSeamless && prevNote != null) {\r\n                resetPhases = !toneWasActive;\r\n                if (transition.slides) {\r\n                    const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n                    const slideRatioStartTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickStart / slideTicks);\r\n                    const slideRatioEndTick: number = Math.max(0.0, 1.0 - noteTicksPassedTickEnd / slideTicks);\r\n                    const intervalDiff: number = ((prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval) - tone.pitches[0]) * 0.5;\r\n                    const volumeDiff: number = (prevNote.pins[prevNote.pins.length - 1].volume - note.pins[0].volume) * 0.5;\r\n                    const decayTimeDiff: number = (prevNote.end - prevNote.start) * 0.5;\r\n                    intervalTickStart += slideRatioStartTick * intervalDiff;\r\n                    intervalTickEnd += slideRatioEndTick * intervalDiff;\r\n                    customVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n                    customVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n                    decayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n                    decayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n                    if (!chord.arpeggiates) {\r\n                        const chordSizeDiff: number = (prevNote.pitches.length - tone.chordSize) * 0.5;\r\n                        chordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n                        chordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n                    }\r\n                }\r\n            }\r\n            if (treatAsSeamless && !transition.slides && note.end == partsPerBar) {\r\n                // Special case for seamless, no-slide transition: assume the next bar starts with another seamless note, don't fade out.\r\n            } else if (treatAsSeamless && nextNote != null) {\r\n                if (transition.slides) {\r\n                    const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\r\n                    const slideRatioStartTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickStart) / slideTicks);\r\n                    const slideRatioEndTick: number = Math.max(0.0, 1.0 - (noteLengthTicks - noteTicksPassedTickEnd) / slideTicks);\r\n                    const intervalDiff: number = (nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + note.pins[note.pins.length - 1].interval)) * 0.5;\r\n                    const volumeDiff: number = (nextNote.pins[0].volume - note.pins[note.pins.length - 1].volume) * 0.5;\r\n                    const decayTimeDiff: number = -(noteEnd - noteStart) * 0.5;\r\n                    intervalTickStart += slideRatioStartTick * intervalDiff;\r\n                    intervalTickEnd += slideRatioEndTick * intervalDiff;\r\n                    customVolumeTickStart += slideRatioStartTick * volumeDiff;\r\n                    customVolumeTickEnd += slideRatioEndTick * volumeDiff;\r\n                    decayTimeTickStart += slideRatioStartTick * decayTimeDiff;\r\n                    decayTimeTickEnd += slideRatioEndTick * decayTimeDiff;\r\n\r\n                    if (!chord.arpeggiates) {\r\n                        const chordSizeDiff: number = (nextNote.pitches.length - tone.chordSize) * 0.5;\r\n                        chordVolumeTickStart = Synth.computeChordVolume(tone.chordSize + slideRatioStartTick * chordSizeDiff);\r\n                        chordVolumeTickEnd = Synth.computeChordVolume(tone.chordSize + slideRatioEndTick * chordSizeDiff);\r\n                    }\r\n                }\r\n            } else if (!(transition.releases && synth.tyingOver[channel] < 0 )) {\r\n                const releaseTicks: number = transition.releaseTicks;\r\n                if (releaseTicks > 0.0) {\r\n                    transitionVolumeTickStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / releaseTicks);\r\n                    transitionVolumeTickEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / releaseTicks);\r\n                }\r\n            }\r\n\r\n            intervalStart = intervalTickStart + (intervalTickEnd - intervalTickStart) * startRatio;\r\n            intervalEnd = intervalTickStart + (intervalTickEnd - intervalTickStart) * endRatio;\r\n            if (instrument.type != InstrumentType.mod) {\r\n                customVolumeStart = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * startRatio);\r\n                customVolumeEnd = Synth.expressionToVolumeMult(customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * endRatio);\r\n            } else {\r\n                customVolumeStart = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.max(0.0, startRatio);\r\n                customVolumeEnd = customVolumeTickStart + (customVolumeTickEnd - customVolumeTickStart) * Math.min(1.0, endRatio);\r\n                tone.customVolumeStart = customVolumeStart;\r\n                tone.customVolumeEnd = customVolumeEnd;\r\n            }\r\n            transitionVolumeStart = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * startRatio;\r\n            transitionVolumeEnd = transitionVolumeTickStart + (transitionVolumeTickEnd - transitionVolumeTickStart) * endRatio;\r\n            chordVolumeStart = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * startRatio;\r\n            chordVolumeEnd = chordVolumeTickStart + (chordVolumeTickEnd - chordVolumeTickStart) * endRatio;\r\n            decayTimeStart = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * startRatio;\r\n            decayTimeEnd = decayTimeTickStart + (decayTimeTickEnd - decayTimeTickStart) * endRatio;\r\n        }\r\n\r\n        const sampleTime: number = 1.0 / synth.samplesPerSecond;\r\n        tone.active = true;\r\n\r\n        if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.fm || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.spectrum) {\r\n\r\n            const lfoEffectStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.LFOtime);\r\n            const lfoEffectEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrument.nextLFOtime);\r\n\r\n            let useVibratoStart: number = instrument.vibratoDepth;\r\n            let useVibratoEnd: number = instrument.vibratoDepth;\r\n\r\n            if (synth.isModActive(ModSetting.mstVibratoDepth, false, channel, instrumentIdx)) {\r\n                useVibratoStart = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, false) / 25;\r\n                useVibratoEnd = synth.getModValue(ModSetting.mstVibratoDepth, false, channel, instrumentIdx, true) / 25;\r\n            }\r\n\r\n            // Only use vibrato properties if the instrument's vibrato is custom or mods are applied to it\r\n            let partsStart: number;\r\n            let partsEnd: number;\r\n            const activeVibratoDelayMods: boolean = synth.isModActive(ModSetting.mstVibratoDelay, false, channel, instrumentIdx);\r\n            if (instrument.vibrato != Config.vibratos.length && !activeVibratoDelayMods) {\r\n                partsStart = Config.vibratos[instrument.vibrato].delayParts;\r\n                partsEnd = Config.vibratos[instrument.vibrato].delayParts;\r\n            }\r\n            else {\r\n                let vibratoDelayStart: number = instrument.vibratoDelay;\r\n                let vibratoDelayEnd: number = instrument.vibratoDelay;\r\n\r\n                if (activeVibratoDelayMods) {\r\n                    vibratoDelayStart = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, false);\r\n                    vibratoDelayEnd = synth.getModValue(ModSetting.mstVibratoDelay, false, channel, instrumentIdx, true);\r\n\r\n                    // Special case - max vibrato delay means neeeeeever vibrato.\r\n                    if (vibratoDelayStart == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n                        vibratoDelayStart = Number.MAX_VALUE;\r\n                    }\r\n                    if (vibratoDelayEnd == synth.song!.mstMaxVols.get(ModSetting.mstVibratoDelay)!) {\r\n                        vibratoDelayEnd = Number.MAX_VALUE;\r\n                    }\r\n                }\r\n\r\n                partsStart = vibratoDelayStart;\r\n                partsEnd = vibratoDelayEnd;\r\n\r\n            }\r\n\r\n            const vibratoScaleStart: number = (partsSinceStart < partsStart) ? 0.0 : useVibratoStart;\r\n            const vibratoScaleEnd: number = (partsSinceStart < partsEnd) ? 0.0 : useVibratoEnd;\r\n\r\n            const vibratoStart: number = vibratoScaleStart * lfoEffectStart;\r\n            const vibratoEnd: number = vibratoScaleEnd * lfoEffectEnd;\r\n            intervalStart += vibratoStart;\r\n            intervalEnd += vibratoEnd;\r\n        }\r\n\r\n        if (!treatAsSeamless || (!(!transition.slides && tone.note != null && tone.note.start == 0) && !(tone.prevNote != null))) {\r\n            const attackSeconds: number = transition.attackSeconds;\r\n            if (attackSeconds > 0.0) {\r\n                transitionVolumeStart *= Math.min(1.0, secondsPerPart * decayTimeStart / attackSeconds);\r\n                transitionVolumeEnd *= Math.min(1.0, secondsPerPart * decayTimeEnd / attackSeconds);\r\n            }\r\n        }\r\n\r\n        const instrumentVolumeMult: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\r\n\r\n        if (instrument.type == InstrumentType.drumset) {\r\n            // It's possible that the note will change while the user is editing it,\r\n            // but the tone's pitches don't get updated because the tone has already\r\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\r\n            tone.drumsetPitch = tone.pitches[0];\r\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\r\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\r\n        }\r\n\r\n        let filterCutModStart: number = instrument.filterCutoff;\r\n        let filterCutModEnd: number = instrument.filterCutoff;\r\n        if (synth.isModActive(ModSetting.mstFilterCut, false, channel, instrumentIdx)) {\r\n            filterCutModStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, false), ModSetting.mstFilterCut);\r\n            filterCutModEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterCut, false, channel, instrumentIdx, true), ModSetting.mstFilterCut);\r\n        }\r\n\r\n        let cutoffOctavesModStart: number;\r\n        let cutoffOctavesModEnd: number;\r\n        if (instrument.type == InstrumentType.drumset) {\r\n            cutoffOctavesModStart = 0;\r\n            cutoffOctavesModEnd = 0;\r\n        }\r\n        else {\r\n            cutoffOctavesModStart = (filterCutModStart - (Config.filterCutoffRange - 1)) * 0.5;\r\n            cutoffOctavesModEnd = (filterCutModEnd - (Config.filterCutoffRange - 1)) * 0.5;\r\n        }\r\n\r\n        const filterEnvelope: Envelope = (instrument.type == InstrumentType.drumset) ? instrument.getDrumsetEnvelope(tone.drumsetPitch) : instrument.getFilterEnvelope();\r\n        const filterCutoffHzStart: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModStart);\r\n        const filterCutoffHzEnd: number = Config.filterCutoffMaxHz * Math.pow(2.0, cutoffOctavesModEnd);\r\n        const filterBaseStart: number = 2.0 * Math.sin(Math.PI * filterCutoffHzStart / synth.samplesPerSecond);\r\n        const filterBaseEnd: number = 2.0 * Math.sin(Math.PI * filterCutoffHzEnd / synth.samplesPerSecond);\r\n        const filterMin: number = 2.0 * Math.sin(Math.PI * Config.filterCutoffMinHz / synth.samplesPerSecond);\r\n        tone.filter = filterBaseStart * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n        let endFilter: number = filterBaseEnd * Synth.computeEnvelope(filterEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n        tone.filter = Math.min(Config.filterMax, Math.max(filterMin, tone.filter));\r\n        endFilter = Math.min(Config.filterMax, Math.max(filterMin, endFilter));\r\n        tone.filterScale = Math.pow(endFilter / tone.filter, 1.0 / runLength);\r\n\r\n        let filterVolumeStart: number = Math.pow(0.5, cutoffOctavesModStart * 0.35);\r\n        let filterVolumeEnd: number = Math.pow(0.5, cutoffOctavesModEnd * 0.35);\r\n\r\n        tone.filterResonanceStart = instrument.getFilterResonance();\r\n        tone.filterResonanceDelta = 0.0;\r\n\r\n        let useFilterResonanceStart: number = instrument.filterResonance;\r\n        let useFilterResonanceEnd: number = instrument.filterResonance;\r\n\r\n        tone.isFirstOrder = (instrument.type == InstrumentType.drumset) ? false : (useFilterResonanceStart == 0);\r\n\r\n        if (synth.isModActive(ModSetting.mstFilterPeak, false, channel, instrumentIdx)) {\r\n            // This flag is used to avoid the special casing when filter resonance == 0 without mods. So, it will sound a bit different,\r\n            // but the effect and ability to smoothly modulate will be preserved.\r\n            tone.isFirstOrder = false;\r\n\r\n            useFilterResonanceStart = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, false), ModSetting.mstFilterPeak);\r\n            useFilterResonanceEnd = song.modValueToReal(synth.getModValue(ModSetting.mstFilterPeak, false, channel, instrumentIdx, true), ModSetting.mstFilterPeak);\r\n\r\n            // Also set cut in the tone.\r\n            tone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n            const filterResonanceEnd: number = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceEnd - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n\r\n            // Just a linear delta. Could get messy since it's not an amazing approximation of sqrt?\r\n            tone.filterResonanceDelta = (filterResonanceEnd - tone.filterResonanceStart) / runLength;\r\n        }\r\n        else {\r\n            // Still need to compute this, mods or no. This calc is delegated to the tone level instead of the synth level, a notable difference from beepbox.\r\n            // No functional difference though.\r\n            tone.filterResonanceStart = Config.filterMaxResonance * Math.pow(Math.max(0, useFilterResonanceStart - 1) / (Config.filterResonanceRange - 2), 0.5);\r\n        }\r\n\r\n        if (tone.isFirstOrder == false) {\r\n            filterVolumeStart = Math.pow(filterVolumeStart, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceStart - 1));\r\n            filterVolumeEnd = Math.pow(filterVolumeEnd, 1.7) * Math.pow(0.5, 0.125 * (useFilterResonanceEnd - 1));\r\n        }\r\n        if (filterEnvelope.type == EnvelopeType.decay) {\r\n            filterVolumeStart *= (1.25 + .025 * filterEnvelope.speed);\r\n            filterVolumeEnd *= (1.25 + .025 * filterEnvelope.speed);\r\n        } else if (filterEnvelope.type == EnvelopeType.twang) {\r\n            filterVolumeStart *= (1 + .02 * filterEnvelope.speed);\r\n            filterVolumeEnd *= (1 + .02 * filterEnvelope.speed);\r\n        }\r\n\r\n        if (resetPhases) {\r\n            tone.reset();\r\n        }\r\n\r\n        if (instrument.type == InstrumentType.fm) {\r\n            // phase modulation!\r\n\r\n            let sineVolumeBoostStart: number = 1.0;\r\n            let sineVolumeBoostEnd: number = 1.0;\r\n            let totalCarrierVolumeStart: number = 0.0;\r\n            let totalCarrierVolumeEnd: number = 0.0;\r\n\r\n            let arpeggioInterval: number = 0;\r\n            if (tone.pitchCount > 1 && !chord.harmonizes) {\r\n                const arpeggio: number = Math.floor((instrument.arpTime) / Config.ticksPerArpeggio);\r\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n            }\r\n\r\n            let detuneStart: number = instrument.detune / 25;\r\n            let detuneEnd: number = instrument.detune / 25;\r\n            if (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n                detuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n                detuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n            }\r\n\r\n            if (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n                detuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n                detuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n            }\r\n\r\n            const carrierCount: number = Config.algorithms[instrument.algorithm].carrierCount;\r\n            for (let i: number = 0; i < Config.operatorCount; i++) {\r\n\r\n                const associatedCarrierIndex: number = Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1;\r\n                const pitch: number = tone.pitches[!chord.harmonizes ? 0 : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\r\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\r\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\r\n                const startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale + interval;\r\n                const startFreq: number = freqMult * (Instrument.frequencyFromPitch(startPitch)) + Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\r\n\r\n                tone.phaseDeltas[i] = startFreq * sampleTime * Config.sineWaveLength;\r\n\r\n                let amplitudeStart: number = instrument.operators[i].amplitude;\r\n                let amplitudeEnd: number = instrument.operators[i].amplitude;\r\n                if (synth.isModActive(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx)) {\r\n                    amplitudeStart *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, false) / 15.0;\r\n                    amplitudeEnd *= synth.getModValue(ModSetting.mstFMSlider1 + i, false, channel, instrumentIdx, true) / 15.0;\r\n                }\r\n\r\n                const amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\r\n                const amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\r\n                const amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n                const amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\r\n                let volumeStart: number = amplitudeMultStart;\r\n                let volumeEnd: number = amplitudeMultEnd;\r\n\r\n                // Check for mod-related volume delta\r\n                if (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                    const startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n                    const endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n                    volumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n                    volumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n                }\r\n\r\n                // Check for SONG mod-related volume delta\r\n                if (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n                    volumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n                    volumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n                }\r\n\r\n                if (i < carrierCount) {\r\n                    // carrier\r\n                    const endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale + interval;\r\n                    const pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n                    const pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n                    volumeStart *= pitchVolumeStart;\r\n                    volumeEnd *= pitchVolumeEnd;\r\n\r\n                    totalCarrierVolumeStart += amplitudeCurveStart;\r\n                    totalCarrierVolumeEnd += amplitudeCurveEnd;\r\n                } else {\r\n                    // modulator\r\n                    volumeStart *= Config.sineWaveLength * 1.5;\r\n                    volumeEnd *= Config.sineWaveLength * 1.5;\r\n\r\n                    sineVolumeBoostStart *= 1.0 - Math.min(1.0, amplitudeStart / 15);\r\n                    sineVolumeBoostEnd *= 1.0 - Math.min(1.0, amplitudeEnd / 15);\r\n                }\r\n                const operatorEnvelope: Envelope = Config.envelopes[instrument.operators[i].envelope];\r\n\r\n                volumeStart *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n                volumeEnd *= Synth.computeEnvelope(operatorEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n                tone.volumeStarts[i] = volumeStart;\r\n                tone.volumeDeltas[i] = (volumeEnd - volumeStart) / runLength;\r\n            }\r\n\r\n            let useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\r\n            let useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\r\n            if (synth.isModActive(ModSetting.mstFMFeedback, false, channel, instrumentIdx)) {\r\n                useFeedbackAmplitudeStart *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, false) / 15.0;\r\n                useFeedbackAmplitudeEnd *= synth.getModValue(ModSetting.mstFMFeedback, false, channel, instrumentIdx, true) / 15.0;\r\n            }\r\n\r\n            const feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\r\n            const feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\r\n            const feedbackEnvelope: Envelope = Config.envelopes[instrument.feedbackEnvelope];\r\n            let feedbackStart: number = feedbackAmplitudeStart * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n            let feedbackEnd: number = feedbackAmplitudeEnd * Synth.computeEnvelope(feedbackEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n            tone.feedbackMult = feedbackStart;\r\n            tone.feedbackDelta = (feedbackEnd - tone.feedbackMult) / runLength;\r\n\r\n            const volumeMult: number = baseVolume * instrumentVolumeMult;\r\n            tone.volumeStart = filterVolumeStart * volumeMult * transitionVolumeStart * chordVolumeStart;\r\n            const volumeEnd: number = filterVolumeEnd * volumeMult * transitionVolumeEnd * chordVolumeEnd;\r\n            tone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n            sineVolumeBoostStart *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeStart / 15.0)) - 1.0) / 3.0;\r\n            sineVolumeBoostEnd *= (Math.pow(2.0, (2.0 - 1.4 * useFeedbackAmplitudeEnd / 15.0)) - 1.0) / 3.0;\r\n            sineVolumeBoostStart *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeStart - 1) / 2.0);\r\n            sineVolumeBoostEnd *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierVolumeEnd - 1) / 2.0);\r\n            tone.volumeStart *= 1.0 + sineVolumeBoostStart * 3.0;\r\n            tone.volumeDelta *= 1.0 + (sineVolumeBoostStart + sineVolumeBoostEnd) * 1.5; // Volume boosts are averaged such that delta brings you to next target start boost.\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            // Modulator value is used for data, so don't actually compute audio nonsense for it.\r\n            tone.volumeStart = transitionVolumeStart;\r\n            let volumeEnd: number = transitionVolumeEnd;\r\n\r\n            tone.volumeStart *= customVolumeStart;\r\n            volumeEnd *= customVolumeEnd;\r\n\r\n            tone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n\r\n        } else {\r\n            let detuneStart: number = instrument.detune / 25;\r\n            let detuneEnd: number = instrument.detune / 25;\r\n            if (synth.isModActive(ModSetting.mstDetune, false, channel, instrumentIdx)) {\r\n                detuneStart = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, false) / 25;\r\n                detuneEnd = synth.getModValue(ModSetting.mstDetune, false, channel, instrumentIdx, true) / 25;\r\n            }\r\n\r\n            if (synth.isModActive(ModSetting.mstSongDetune, true)) {\r\n                detuneStart += synth.getModValue(ModSetting.mstSongDetune, true, null, null, false) / 25;\r\n                detuneEnd += synth.getModValue(ModSetting.mstSongDetune, true, null, null, true) / 25;\r\n            }\r\n\r\n            let pitch: number = tone.pitches[0];\r\n\r\n            if (tone.pitchCount > 1) {\r\n                const arpeggio: number = Math.floor(instrument.arpTime / Config.ticksPerArpeggio);\r\n                if (chord.harmonizes) {\r\n                    const intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\r\n                    tone.intervalMult = Math.pow(2.0, intervalOffset / 12.0);\r\n                    tone.intervalVolumeMult = Math.pow(2.0, -intervalOffset / pitchDamping);\r\n                } else {\r\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\r\n                }\r\n            }\r\n\r\n            const startPitch: number = basePitch + (pitch + intervalStart + detuneStart) * intervalScale;\r\n            const endPitch: number = basePitch + (pitch + intervalEnd + detuneEnd) * intervalScale;\r\n            const startFreq: number = Instrument.frequencyFromPitch(startPitch);\r\n            const pitchVolumeStart: number = Math.pow(2.0, -(startPitch - volumeReferencePitch) / pitchDamping);\r\n            const pitchVolumeEnd: number = Math.pow(2.0, -(endPitch - volumeReferencePitch) / pitchDamping);\r\n            let settingsVolumeMultStart: number = baseVolume * filterVolumeStart;\r\n            let settingsVolumeMultEnd: number = baseVolume * filterVolumeEnd;\r\n            if (instrument.type == InstrumentType.noise) {\r\n                settingsVolumeMultStart *= Config.chipNoises[instrument.chipNoise].volume;\r\n                settingsVolumeMultEnd *= Config.chipNoises[instrument.chipNoise].volume;\r\n            }\r\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave) {\r\n                settingsVolumeMultStart *= Config.chipWaves[instrument.chipWave].volume;\r\n                settingsVolumeMultEnd *= Config.chipWaves[instrument.chipWave].volume;\r\n            }\r\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.customChipWave) {\r\n                settingsVolumeMultStart *= Config.intervals[instrument.interval].volume;\r\n                settingsVolumeMultEnd *= Config.intervals[instrument.interval].volume;\r\n            }\r\n            if (instrument.type == InstrumentType.pwm) {\r\n\r\n                // Check for PWM mods to this instrument\r\n                let pulseWidthModStart: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n                let pulseWidthModEnd: number = instrument.pulseWidth / (Config.pulseWidthRange * 2);\r\n                if (synth.isModActive(ModSetting.mstPulseWidth, false, channel, instrumentIdx)) {\r\n                    pulseWidthModStart = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, false)) / (Config.pulseWidthRange * 2);\r\n                    pulseWidthModEnd = (synth.getModValue(ModSetting.mstPulseWidth, false, channel, instrumentIdx, true)) / (Config.pulseWidthRange * 2);\r\n                }\r\n\r\n                const pulseEnvelope: Envelope = Config.envelopes[instrument.pulseEnvelope];\r\n                const pulseWidthStart: number = pulseWidthModStart * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeStart, beatsPerPart * partTimeStart, customVolumeStart);\r\n                const pulseWidthEnd: number = pulseWidthModEnd * Synth.computeEnvelope(pulseEnvelope, secondsPerPart * decayTimeEnd, beatsPerPart * partTimeEnd, customVolumeEnd);\r\n\r\n                tone.pulseWidth = pulseWidthStart;\r\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / runLength;\r\n            }\r\n\r\n            tone.phaseDeltas[0] = startFreq * sampleTime;\r\n\r\n            tone.volumeStart = transitionVolumeStart * chordVolumeStart * pitchVolumeStart * settingsVolumeMultStart * instrumentVolumeMult;\r\n            let volumeEnd: number = transitionVolumeEnd * chordVolumeEnd * pitchVolumeEnd * settingsVolumeMultEnd * instrumentVolumeMult;\r\n\r\n            if (filterEnvelope.type != EnvelopeType.custom && (instrument.type != InstrumentType.pwm || Config.envelopes[instrument.pulseEnvelope].type != EnvelopeType.custom)) {\r\n                tone.volumeStart *= customVolumeStart;\r\n                volumeEnd *= customVolumeEnd;\r\n            }\r\n\r\n            // Check for mod-related volume delta\r\n            if (synth.isModActive(ModSetting.mstInsVolume, false, channel, instrumentIdx)) {\r\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\r\n                const startVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, false);\r\n                const endVal: number = synth.getModValue(ModSetting.mstInsVolume, false, channel, instrumentIdx, true)\r\n                tone.volumeStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(startVal));\r\n                volumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : this.instrumentVolumeToVolumeMult(endVal));\r\n            }\r\n            // Check for SONG mod-related volume delta\r\n            if (synth.isModActive(ModSetting.mstSongVolume, true)) {\r\n                tone.volumeStart *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, false)) / 100.0;\r\n                volumeEnd *= (synth.getModValue(ModSetting.mstSongVolume, true, undefined, undefined, true)) / 100.0;\r\n            }\r\n\r\n            tone.volumeDelta = (volumeEnd - tone.volumeStart) / runLength;\r\n        }\r\n\r\n        tone.phaseDeltaScale = Math.pow(2.0, ((intervalEnd - intervalStart) * intervalScale / 12.0) / runLength);\r\n    }\r\n\r\n    public static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\r\n        let effect: number = 0;\r\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\r\n            effect += Math.sin(Math.PI * 2 * secondsIntoBar / vibratoPeriodSeconds);\r\n        }\r\n        return effect;\r\n    }\r\n\r\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\r\n\r\n    private static getInstrumentSynthFunction(instrument: Instrument): Function {\r\n        if (instrument.type == InstrumentType.fm) {\r\n            const fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\r\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\r\n                const synthSource: string[] = [];\r\n\r\n                for (const line of Synth.fmSourceTemplate) {\r\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\r\n                        const outputs: string[] = [];\r\n                        for (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\r\n                            outputs.push(\"operator\" + j + \"Scaled\");\r\n                        }\r\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\r\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\r\n                        for (let j: number = Config.operatorCount - 1; j >= 0; j--) {\r\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\r\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\r\n                                    let modulators = \"\";\r\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\r\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\r\n                                    }\r\n\r\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\r\n                                    if (feedbackIndices.length > 0) {\r\n                                        modulators += \" + feedbackMult * (\";\r\n                                        const feedbacks: string[] = [];\r\n                                        for (const modulatorNumber of feedbackIndices) {\r\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\r\n                                        }\r\n                                        modulators += feedbacks.join(\" + \") + \")\";\r\n                                    }\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\r\n                                } else {\r\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\r\n                                }\r\n                            }\r\n                        }\r\n                    } else if (line.indexOf(\"#\") != -1) {\r\n                        for (let j = 0; j < Config.operatorCount; j++) {\r\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\r\n                        }\r\n                    } else {\r\n                        synthSource.push(line);\r\n                    }\r\n                }\r\n\r\n                //console.log(synthSource.join(\"\\n\"));\r\n\r\n                Synth.fmSynthFunctionCache[fingerprint] = new Function(\"synth\", \"data\", \"stereoBufferIndex\", \"stereoBufferLength\", \"runLength\", \"tone\", \"instrument\", synthSource.join(\"\\n\"));\r\n            }\r\n            return Synth.fmSynthFunctionCache[fingerprint];\r\n        } else if (instrument.type == InstrumentType.chip) {\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.customChipWave) {\r\n            return Synth.chipSynth;\r\n        } else if (instrument.type == InstrumentType.harmonics) {\r\n            return Synth.harmonicsSynth;\r\n        } else if (instrument.type == InstrumentType.pwm) {\r\n            return Synth.pulseWidthSynth;\r\n        } else if (instrument.type == InstrumentType.noise) {\r\n            return Synth.noiseSynth;\r\n        } else if (instrument.type == InstrumentType.spectrum) {\r\n            return Synth.spectrumSynth;\r\n        } else if (instrument.type == InstrumentType.drumset) {\r\n            return Synth.drumsetSynth;\r\n        } else if (instrument.type == InstrumentType.mod) {\r\n            return Synth.modSynth;\r\n        } else {\r\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\r\n        }\r\n    }\r\n\r\n    private static chipSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        var wave: Float64Array;\r\n        var volumeScale: number;\r\n\r\n        const isCustomWave: boolean = (instrument.type == InstrumentType.customChipWave);\r\n\r\n        if (!isCustomWave) {\r\n            wave = Config.chipWaves[instrument.chipWave].samples;\r\n            volumeScale = 1.0;\r\n        }\r\n        else {\r\n            wave = instrument.customChipWaveIntegral;\r\n            // Integrals for custom chip wave can get rather big. This \"zero point\" can be config'ed later.\r\n            volumeScale = 0.1;\r\n        }\r\n\r\n        const waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n        const intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / 12.0);\r\n        const intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / 12.0) * tone.intervalMult;\r\n        const intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n        if (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n        const deltaRatio: number = intervalB / intervalA;\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n        let phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const phaseAInt: number = phaseA | 0;\r\n        const phaseBInt: number = phaseB | 0;\r\n        const indexA: number = phaseAInt % waveLength;\r\n        const indexB: number = phaseBInt % waveLength;\r\n        const phaseRatioA: number = phaseA - phaseAInt;\r\n        const phaseRatioB: number = phaseB - phaseBInt;\r\n        let prevWaveIntegralA: number = wave[indexA];\r\n        let prevWaveIntegralB: number = wave[indexB];\r\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n\r\n        //console.log(\"S: \" + stereoBufferIndex + \" P: \" + stopIndex);\r\n\r\n        while (stereoBufferIndex < stopIndex) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            let nextWaveIntegralA: number = wave[indexA];\r\n            let nextWaveIntegralB: number = wave[indexB];\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n            let waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n            let waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n            prevWaveIntegralA = nextWaveIntegralA;\r\n            prevWaveIntegralB = nextWaveIntegralB;\r\n\r\n            const combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDeltaA *= phaseDeltaScale;\r\n            phaseDeltaB *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume * volumeScale;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        //debugString += \",\" + data.subarray(stereoBufferIndex - runLength, stereoBufferIndex).toString();\r\n        //console.log(stereoBufferIndex);\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n\r\n    }\r\n\r\n\r\n    private static harmonicsSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        const wave: Float32Array = instrument.harmonicsWave.getCustomWave();\r\n        const waveLength: number = +wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\r\n\r\n        const intervalA: number = +Math.pow(2.0, (Config.intervals[instrument.interval].offset + Config.intervals[instrument.interval].spread) / 12.0);\r\n        const intervalB: number = Math.pow(2.0, (Config.intervals[instrument.interval].offset - Config.intervals[instrument.interval].spread) / 12.0) * tone.intervalMult;\r\n        const intervalSign: number = tone.intervalVolumeMult * Config.intervals[instrument.interval].sign;\r\n        if (instrument.interval == 0 && !instrument.getChord().customInterval) tone.phases[1] = tone.phases[0];\r\n        const deltaRatio: number = intervalB / intervalA;\r\n        let phaseDeltaA: number = tone.phaseDeltas[0] * intervalA * waveLength;\r\n        let phaseDeltaB: number = phaseDeltaA * deltaRatio;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\r\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const phaseAInt: number = phaseA | 0;\r\n        const phaseBInt: number = phaseB | 0;\r\n        const indexA: number = phaseAInt % waveLength;\r\n        const indexB: number = phaseBInt % waveLength;\r\n        const phaseRatioA: number = phaseA - phaseAInt;\r\n        const phaseRatioB: number = phaseB - phaseBInt;\r\n        let prevWaveIntegralA: number = wave[indexA];\r\n        let prevWaveIntegralB: number = wave[indexB];\r\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\r\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n        while (stereoBufferIndex < stopIndex) {\r\n\r\n            phaseA += phaseDeltaA;\r\n            phaseB += phaseDeltaB;\r\n\r\n            const phaseAInt: number = phaseA | 0;\r\n            const phaseBInt: number = phaseB | 0;\r\n            const indexA: number = phaseAInt % waveLength;\r\n            const indexB: number = phaseBInt % waveLength;\r\n            let nextWaveIntegralA: number = wave[indexA];\r\n            let nextWaveIntegralB: number = wave[indexB];\r\n            const phaseRatioA: number = phaseA - phaseAInt;\r\n            const phaseRatioB: number = phaseB - phaseBInt;\r\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\r\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\r\n            let waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\r\n            let waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\r\n\r\n            prevWaveIntegralA = nextWaveIntegralA;\r\n            prevWaveIntegralB = nextWaveIntegralB;\r\n\r\n            const combinedWave: number = (waveA + waveB * intervalSign);\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (combinedWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDeltaA *= phaseDeltaScale;\r\n            phaseDeltaB *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phaseA / waveLength;\r\n        tone.phases[1] = phaseB / waveLength;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static pulseWidthSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let phaseDelta: number = tone.phaseDeltas[0];\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phase: number = (tone.phases[0] % 1);\r\n\r\n        let pulseWidth: number = tone.pulseWidth;\r\n        const pulseWidthDelta: number = tone.pulseWidthDelta;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n\r\n        while (stereoBufferIndex < stopIndex) {\r\n\r\n            const sawPhaseA: number = phase % 1;\r\n            const sawPhaseB: number = (phase + pulseWidth) % 1;\r\n\r\n            let pulseWave: number = sawPhaseB - sawPhaseA;\r\n\r\n            // This a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing.\r\n            if (sawPhaseA < phaseDelta) {\r\n                var t = sawPhaseA / phaseDelta;\r\n                pulseWave += (t + t - t * t - 1) * 0.5;\r\n            } else if (sawPhaseA > 1.0 - phaseDelta) {\r\n                var t = (sawPhaseA - 1.0) / phaseDelta;\r\n                pulseWave += (t + t + t * t + 1) * 0.5;\r\n            }\r\n            if (sawPhaseB < phaseDelta) {\r\n                var t = sawPhaseB / phaseDelta;\r\n                pulseWave -= (t + t - t * t - 1) * 0.5;\r\n            } else if (sawPhaseB > 1.0 - phaseDelta) {\r\n                var t = (sawPhaseB - 1.0) / phaseDelta;\r\n                pulseWave -= (t + t + t * t + 1) * 0.5;\r\n            }\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (pulseWave - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n\r\n            phase += phaseDelta;\r\n            phaseDelta *= phaseDeltaScale;\r\n            pulseWidth += pulseWidthDelta;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phase;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static fmSourceTemplate: string[] = (`\r\nconst sineWave = beepbox.Config.sineWave;\r\n\r\nlet phaseDeltaScale = +tone.phaseDeltaScale;\r\n// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\r\nlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * beepbox.Config.sineWaveLength;\r\nlet operator#PhaseDelta  = +tone.phaseDeltas[#];\r\nlet operator#OutputMult  = +tone.volumeStarts[#];\r\nconst operator#OutputDelta = +tone.volumeDeltas[#];\r\nlet operator#Output      = +tone.feedbackOutputs[#];\r\nlet feedbackMult         = +tone.feedbackMult;\r\nconst feedbackDelta        = +tone.feedbackDelta;\r\nlet volume = +tone.volumeStart;\r\nconst volumeDelta = +tone.volumeDelta;\r\n\r\nconst isFirstOrder = tone.isFirstOrder;\r\nlet filter1 = +tone.filter;\r\nlet filter2 = isFirstOrder ? 1.0 : filter1;\r\nconst filterScale1 = +tone.filterScale;\r\nconst filterScale2 = isFirstOrder ? 1.0 : filterScale1;\r\nlet filterResonance = tone.filterResonanceStart;\r\nlet filterResonanceDelta = tone.filterResonanceDelta;\r\nlet filterSample0 = +tone.filterSample0;\r\nlet filterSample1 = +tone.filterSample1;\r\n\r\nconst stopIndex = stereoBufferIndex + runLength;\r\nstereoBufferIndex += tone.stereoOffset;\r\nlet stereoVolumeL = tone.stereoVolumeLStart;\r\nlet stereoVolumeLDelta = tone.stereoVolumeLDelta;\r\nlet stereoVolumeR = tone.stereoVolumeRStart;\r\nlet stereoVolumeRDelta = tone.stereoVolumeRDelta;\r\nlet stereoDelay = tone.stereoDelayStart;\r\nlet stereoDelayDelta = tone.stereoDelayDelta;\r\nlet delays = [];\r\nwhile (stereoBufferIndex < stopIndex) {\r\n// INSERT OPERATOR COMPUTATION HERE\r\nconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\r\n\r\nconst feedback = filterResonance + filterResonance / (1.0 - filter1);\r\nfilterSample0 += filter1 * (fmOutput - filterSample0 + feedback * (filterSample0 - filterSample1));\r\nfilterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\nfeedbackMult += feedbackDelta;\r\noperator#OutputMult += operator#OutputDelta;\r\noperator#Phase += operator#PhaseDelta;\r\noperator#PhaseDelta *= phaseDeltaScale;\r\nfilter1 *= filterScale1;\r\nfilter2 *= filterScale2;\r\nfilterResonance += filterResonanceDelta;\r\n\r\nconst output = filterSample1 * volume;\r\nvolume += volumeDelta;\r\n\r\n//const absStereoDelay: number = Math.abs(stereoDelay);\r\n//const fracStereoDelay: number = absStereoDelay % 1;\r\n//const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n//delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n// Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\ndelays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\ndata[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\ndata[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\ndata[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\ndata[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\nstereoVolumeL += stereoVolumeLDelta;\r\nstereoVolumeR += stereoVolumeRDelta;\r\nstereoDelay += stereoDelayDelta;\r\n\r\nstereoBufferIndex += 2;\r\n}\r\n\r\ntone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\r\ntone.feedbackOutputs[#] = operator#Output;\r\n\r\nconst epsilon = (1.0e-24);\r\nif (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\nif (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\ntone.filterSample0 = filterSample0;\r\ntone.filterSample1 = filterSample1;\r\n`).split(\"\\n\");\r\n\r\n    private static operatorSourceTemplate: string[] = (`\r\nconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\r\nconst operator#PhaseInt = operator#PhaseMix|0;\r\nconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\r\nconst operator#Sample   = sineWave[operator#Index];\r\noperator#Output       = operator#Sample + (sineWave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\r\nconst operator#Scaled   = operator#OutputMult * operator#Output;\r\n`).split(\"\\n\");\r\n\r\n    private static noiseSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let wave: Float32Array = instrument.getDrumWave();\r\n        let phaseDelta: number = +tone.phaseDeltas[0];\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        if (tone.phases[0] == 0) {\r\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n            phase = Math.random() * Config.chipNoiseLength;\r\n        }\r\n        let sample: number = +tone.sample;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        const pitchRelativefilter: number = Math.min(1.0, tone.phaseDeltas[0] * Config.chipNoises[instrument.chipNoise].pitchFilterMult);\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n        while (stereoBufferIndex < stopIndex) {\r\n            const waveSample: number = wave[phase & 0x7fff];\r\n\r\n            sample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            phase += phaseDelta;\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDelta *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.sample = sample;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (-epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static spectrumSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let wave: Float32Array = instrument.getDrumWave();\r\n        let phaseDelta: number = tone.phaseDeltas[0] * (1 << 7);\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let sample: number = +tone.sample;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n        const pitchRelativefilter: number = Math.min(1.0, phaseDelta);\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n\r\n        while (stereoBufferIndex < stopIndex) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & 0x7fff;\r\n            let waveSample: number = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            waveSample += (wave[index + 1] - waveSample) * phaseRatio;\r\n\r\n            sample += (waveSample - sample) * pitchRelativefilter;\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            phase += phaseDelta;\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDelta *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.sample = sample;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static drumsetSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        let wave: Float32Array = instrument.getDrumsetWave(tone.drumsetPitch);\r\n        let phaseDelta: number = tone.phaseDeltas[0] / Instrument.drumsetIndexReferenceDelta(tone.drumsetPitch);;\r\n        const phaseDeltaScale: number = +tone.phaseDeltaScale;\r\n        let volume: number = +tone.volumeStart;\r\n        const volumeDelta: number = +tone.volumeDelta;\r\n        let sample: number = +tone.sample;\r\n\r\n        const isFirstOrder: boolean = tone.isFirstOrder;\r\n        let filter1: number = +tone.filter;\r\n        let filter2: number = isFirstOrder ? 1.0 : filter1;\r\n        const filterScale1: number = +tone.filterScale;\r\n        const filterScale2: number = isFirstOrder ? 1.0 : filterScale1;\r\n        let filterResonance: number = tone.filterResonanceStart;\r\n        let filterResonanceDelta: number = tone.filterResonanceDelta;\r\n        let filterSample0: number = +tone.filterSample0;\r\n        let filterSample1: number = +tone.filterSample1;\r\n\r\n        let phase: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\r\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\r\n        if (tone.phases[0] == 0) phase = Synth.findRandomZeroCrossing(wave) + phaseDelta;\r\n\r\n        const stopIndex: number = stereoBufferIndex + runLength;\r\n        stereoBufferIndex += tone.stereoOffset;\r\n        let stereoVolumeL: number = tone.stereoVolumeLStart;\r\n        let stereoVolumeLDelta: number = tone.stereoVolumeLDelta;\r\n        let stereoVolumeR: number = tone.stereoVolumeRStart;\r\n        let stereoVolumeRDelta: number = tone.stereoVolumeRDelta;\r\n        let stereoDelay: number = tone.stereoDelayStart;\r\n        let stereoDelayDelta: number = tone.stereoDelayDelta;\r\n        let delays: number[];\r\n        while (stereoBufferIndex < stopIndex) {\r\n            const phaseInt: number = phase | 0;\r\n            const index: number = phaseInt & 0x7fff;\r\n            sample = wave[index];\r\n            const phaseRatio: number = phase - phaseInt;\r\n            sample += (wave[index + 1] - sample) * phaseRatio;\r\n\r\n            const feedback: number = filterResonance + filterResonance / (1.0 - filter1);\r\n            filterSample0 += filter1 * (sample - filterSample0 + feedback * (filterSample0 - filterSample1));\r\n            filterSample1 += filter2 * (filterSample0 - filterSample1);\r\n\r\n            phase += phaseDelta;\r\n            filter1 *= filterScale1;\r\n            filter2 *= filterScale2;\r\n            phaseDelta *= phaseDeltaScale;\r\n            filterResonance += filterResonanceDelta;\r\n\r\n            const output: number = filterSample1 * volume;\r\n            volume += volumeDelta;\r\n\r\n            //const absStereoDelay: number = Math.abs(stereoDelay);\r\n            //const fracStereoDelay: number = absStereoDelay % 1;\r\n            //const floorStereoDelay: number = absStereoDelay | 0;\r\n\r\n            //delays = stereoDelay < 0 ? [0, 0, floorStereoDelay * 2, fracStereoDelay] : [floorStereoDelay * 2, fracStereoDelay, 0, 0];\r\n\r\n            // Optimized ver: can remove the above three declarations, but muddier conceptually. Still has that conditional, too...\r\n            delays = stereoDelay < 0 ? [0, 0, ((-stereoDelay) | 0) * 2, (-stereoDelay) % 1] : [(stereoDelay | 0) * 2, stereoDelay % 1, 0, 0];\r\n\r\n            data[(stereoBufferIndex + delays[0]) % stereoBufferLength] += output * stereoVolumeL * (1 - delays[1]);\r\n            data[(stereoBufferIndex + delays[0] + 2) % stereoBufferLength] += output * stereoVolumeL * delays[1];\r\n            data[(stereoBufferIndex + delays[2] + 1) % stereoBufferLength] += output * stereoVolumeR * (1 - delays[3]);\r\n            data[(stereoBufferIndex + delays[2] + 3) % stereoBufferLength] += output * stereoVolumeR * delays[3];\r\n\r\n            stereoVolumeL += stereoVolumeLDelta;\r\n            stereoVolumeR += stereoVolumeRDelta;\r\n            stereoDelay += stereoDelayDelta;\r\n\r\n            stereoBufferIndex += 2;\r\n        }\r\n        tone.phases[0] = phase / Config.chipNoiseLength;\r\n        tone.sample = sample;\r\n\r\n        const epsilon: number = (1.0e-24);\r\n        if (- epsilon < filterSample0 && filterSample0 < epsilon) filterSample0 = 0.0;\r\n        if (-epsilon < filterSample1 && filterSample1 < epsilon) filterSample1 = 0.0;\r\n        tone.filterSample0 = filterSample0;\r\n        tone.filterSample1 = filterSample1;\r\n    }\r\n\r\n    private static modSynth(synth: Synth, data: Float32Array, stereoBufferIndex: number, stereoBufferLength: number, runLength: number, tone: Tone, instrument: Instrument): void {\r\n        // Note: present modulator value is tone.volumeStart.\r\n\r\n        if (!synth.song) return;\r\n\r\n        let mod: number = Config.modCount - 1 - tone.pitches[0];\r\n        let setting: ModSetting = instrument.modSettings[mod];\r\n\r\n        synth.setModValue(tone.customVolumeStart, tone.customVolumeEnd, mod, instrument, setting);\r\n\r\n        // Reset arps, but only at the start of the note\r\n        if (setting == ModSetting.mstResetArpeggio && synth.tick == 0 && tone.noteStart == synth.beat * Config.partsPerBeat + synth.part) {\r\n            synth.song.channels[instrument.modChannels[mod]].instruments[instrument.modInstruments[mod]].arpTime = 0;\r\n        }\r\n        else if (setting == ModSetting.mstNextBar) {\r\n            synth.wantToSkip = true;\r\n        }\r\n    }\r\n\r\n    private static findRandomZeroCrossing(wave: Float32Array): number {\r\n        let phase: number = Math.random() * Config.chipNoiseLength;\r\n\r\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\r\n        // otherwise they pop. Try to find a zero crossing.\r\n        let indexPrev: number = phase & 0x7fff;\r\n        let wavePrev: number = wave[indexPrev];\r\n        const stride: number = 16;\r\n        for (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\r\n            const indexNext: number = (indexPrev + stride) & 0x7fff;\r\n            const waveNext: number = wave[indexNext];\r\n            if (wavePrev * waveNext <= 0.0) {\r\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\r\n                for (let i: number = 0; i < 16; i++) {\r\n                    const innerIndexNext: number = (indexPrev + 1) & 0x7fff;\r\n                    const innerWaveNext: number = wave[innerIndexNext];\r\n                    if (wavePrev * innerWaveNext <= 0.0) {\r\n                        // Found the zero crossing again! Now let's find the exact intersection.\r\n                        const slope: number = innerWaveNext - wavePrev;\r\n                        phase = indexPrev;\r\n                        if (Math.abs(slope) > 0.00000001) {\r\n                            phase += -wavePrev / slope;\r\n                        }\r\n                        phase = Math.max(0, phase) % Config.chipNoiseLength;\r\n                        break;\r\n                    } else {\r\n                        indexPrev = innerIndexNext;\r\n                        wavePrev = innerWaveNext;\r\n                    }\r\n                }\r\n                break;\r\n            } else {\r\n                indexPrev = indexNext;\r\n                wavePrev = waveNext;\r\n            }\r\n        }\r\n\r\n        return phase;\r\n    }\r\n\r\n    public static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\r\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\r\n    }\r\n    public static volumeMultToInstrumentVolume(volumeMult: number): number {\r\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\r\n    }\r\n    public static expressionToVolumeMult(expression: number): number {\r\n        return Math.pow(Math.max(0.0, expression) / 6.0, 1.5);\r\n    }\r\n    public static volumeMultToExpression(volumeMult: number): number {\r\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * 6.0;\r\n    }\r\n\r\n    private getSamplesPerTick(): number {\r\n        if (this.song == null) return 0;\r\n        let beatsPerMinute: number = this.song.getBeatsPerMinute();\r\n        if (this.isModActive(ModSetting.mstTempo, true)) {\r\n            beatsPerMinute = this.getModValue(ModSetting.mstTempo, true);\r\n        }\r\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\r\n    }\r\n\r\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\r\n        const beatsPerSecond: number = beatsPerMinute / 60.0;\r\n        const partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\r\n        const tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\r\n        return this.samplesPerSecond / tickPerSecond;\r\n    }\r\n}\r\n\r\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\r\nexport { Dictionary, DictionaryArray, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\r\n//}\r\n"]}